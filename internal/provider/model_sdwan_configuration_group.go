// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type ConfigurationGroup struct {
	Id              types.String                        `tfsdk:"id"`
	Name            types.String                        `tfsdk:"name"`
	Description     types.String                        `tfsdk:"description"`
	Solution        types.String                        `tfsdk:"solution"`
	FeatureProfiles []ConfigurationGroupFeatureProfiles `tfsdk:"feature_profiles"`
}

type ConfigurationGroupFeatureProfiles struct {
	Id types.String `tfsdk:"id"`
}

func (data ConfigurationGroup) toBody(ctx context.Context) string {
	body := ""
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "name", data.Name.ValueString())
	}
	if !data.Description.IsNull() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.Solution.IsNull() {
		body, _ = sjson.Set(body, "solution", data.Solution.ValueString())
	}
	if true {
		body, _ = sjson.Set(body, "profiles", []interface{}{})
		for _, item := range data.FeatureProfiles {
			itemBody := ""
			if !item.Id.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "id", item.Id.ValueString())
			}
			body, _ = sjson.SetRaw(body, "profiles.-1", itemBody)
		}
	}
	return body
}

func (data *ConfigurationGroup) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("solution"); value.Exists() {
		data.Solution = types.StringValue(value.String())
	} else {
		data.Solution = types.StringNull()
	}
	if value := res.Get("profiles"); value.Exists() && len(value.Array()) > 0 {
		data.FeatureProfiles = make([]ConfigurationGroupFeatureProfiles, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := ConfigurationGroupFeatureProfiles{}
			if cValue := v.Get("id"); cValue.Exists() {
				item.Id = types.StringValue(cValue.String())
			} else {
				item.Id = types.StringNull()
			}
			data.FeatureProfiles = append(data.FeatureProfiles, item)
			return true
		})
	} else {
		if len(data.FeatureProfiles) > 0 {
			data.FeatureProfiles = []ConfigurationGroupFeatureProfiles{}
		}
	}
}

func (data *ConfigurationGroup) hasChanges(ctx context.Context, state *ConfigurationGroup) bool {
	hasChanges := false
	if !data.Name.Equal(state.Name) {
		hasChanges = true
	}
	if !data.Description.Equal(state.Description) {
		hasChanges = true
	}
	if !data.Solution.Equal(state.Solution) {
		hasChanges = true
	}
	if len(data.FeatureProfiles) != len(state.FeatureProfiles) {
		hasChanges = true
	} else {
		for i := range data.FeatureProfiles {
			if !data.FeatureProfiles[i].Id.Equal(state.FeatureProfiles[i].Id) {
				hasChanges = true
			}
		}
	}
	return hasChanges
}
