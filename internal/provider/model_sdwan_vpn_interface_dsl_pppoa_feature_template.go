// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-sdwan/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VPNInterfaceDSLPPPoA struct {
	Id                                   types.String                        `tfsdk:"id"`
	Version                              types.Int64                         `tfsdk:"version"`
	TemplateType                         types.String                        `tfsdk:"template_type"`
	Name                                 types.String                        `tfsdk:"name"`
	Description                          types.String                        `tfsdk:"description"`
	DeviceTypes                          types.Set                           `tfsdk:"device_types"`
	AtmSubInterfaceName                  types.String                        `tfsdk:"atm_sub_interface_name"`
	AtmSubInterfaceNameVariable          types.String                        `tfsdk:"atm_sub_interface_name_variable"`
	Shutdown                             types.Bool                          `tfsdk:"shutdown"`
	ShutdownVariable                     types.String                        `tfsdk:"shutdown_variable"`
	InterfaceDescription                 types.String                        `tfsdk:"interface_description"`
	InterfaceDescriptionVariable         types.String                        `tfsdk:"interface_description_variable"`
	Vdsl                                 []VPNInterfaceDSLPPPoAVdsl          `tfsdk:"vdsl"`
	Pvc                                  []VPNInterfaceDSLPPPoAPvc           `tfsdk:"pvc"`
	PppAuthenticationProtocol            types.String                        `tfsdk:"ppp_authentication_protocol"`
	PppAuthenticationProtocolVariable    types.String                        `tfsdk:"ppp_authentication_protocol_variable"`
	PppAuthenticationProtocolPap         types.Bool                          `tfsdk:"ppp_authentication_protocol_pap"`
	PppAuthenticationProtocolPapVariable types.String                        `tfsdk:"ppp_authentication_protocol_pap_variable"`
	AuthenticationType                   types.String                        `tfsdk:"authentication_type"`
	AuthenticationTypeVariable           types.String                        `tfsdk:"authentication_type_variable"`
	ChapHostname                         types.String                        `tfsdk:"chap_hostname"`
	ChapHostnameVariable                 types.String                        `tfsdk:"chap_hostname_variable"`
	ChapPppAuthPassword                  types.String                        `tfsdk:"chap_ppp_auth_password"`
	ChapPppAuthPasswordVariable          types.String                        `tfsdk:"chap_ppp_auth_password_variable"`
	PapUsername                          types.String                        `tfsdk:"pap_username"`
	PapUsernameVariable                  types.String                        `tfsdk:"pap_username_variable"`
	PapPassword                          types.Bool                          `tfsdk:"pap_password"`
	PapPppAuthPassword                   types.String                        `tfsdk:"pap_ppp_auth_password"`
	PapPppAuthPasswordVariable           types.String                        `tfsdk:"pap_ppp_auth_password_variable"`
	EnableCoreRegion                     types.Bool                          `tfsdk:"enable_core_region"`
	EnableCoreRegionVariable             types.String                        `tfsdk:"enable_core_region_variable"`
	CoreRegion                           types.String                        `tfsdk:"core_region"`
	CoreRegionVariable                   types.String                        `tfsdk:"core_region_variable"`
	SecondaryRegion                      types.String                        `tfsdk:"secondary_region"`
	SecondaryRegionVariable              types.String                        `tfsdk:"secondary_region_variable"`
	Encapsulation                        []VPNInterfaceDSLPPPoAEncapsulation `tfsdk:"encapsulation"`
	Groups                               types.Set                           `tfsdk:"groups"`
	GroupsVariable                       types.String                        `tfsdk:"groups_variable"`
	Border                               types.Bool                          `tfsdk:"border"`
	BorderVariable                       types.String                        `tfsdk:"border_variable"`
	PerTunnelQos                         types.Bool                          `tfsdk:"per_tunnel_qos"`
	PerTunnelQosVariable                 types.String                        `tfsdk:"per_tunnel_qos_variable"`
	PerTunnelQosAggregator               types.Bool                          `tfsdk:"per_tunnel_qos_aggregator"`
	PerTunnelQosAggregatorVariable       types.String                        `tfsdk:"per_tunnel_qos_aggregator_variable"`
	Color                                types.String                        `tfsdk:"color"`
	ColorVariable                        types.String                        `tfsdk:"color_variable"`
	LastResortCircuit                    types.Bool                          `tfsdk:"last_resort_circuit"`
	LastResortCircuitVariable            types.String                        `tfsdk:"last_resort_circuit_variable"`
	LowBandwidthLink                     types.Bool                          `tfsdk:"low_bandwidth_link"`
	LowBandwidthLinkVariable             types.String                        `tfsdk:"low_bandwidth_link_variable"`
	TunnelTcpMss                         types.Int64                         `tfsdk:"tunnel_tcp_mss"`
	TunnelTcpMssVariable                 types.String                        `tfsdk:"tunnel_tcp_mss_variable"`
	ClearDontFragment                    types.Bool                          `tfsdk:"clear_dont_fragment"`
	ClearDontFragmentVariable            types.String                        `tfsdk:"clear_dont_fragment_variable"`
	NetworkBroadcast1                    types.Bool                          `tfsdk:"network_broadcast_1"`
	NetworkBroadcast1Variable            types.String                        `tfsdk:"network_broadcast_1_variable"`
	MaxControlConnections                types.Int64                         `tfsdk:"max_control_connections"`
	MaxControlConnectionsVariable        types.String                        `tfsdk:"max_control_connections_variable"`
	ControlConnections                   types.Bool                          `tfsdk:"control_connections"`
	ControlConnectionsVariable           types.String                        `tfsdk:"control_connections_variable"`
	VbondAsStunServer                    types.Bool                          `tfsdk:"vbond_as_stun_server"`
	VbondAsStunServerVariable            types.String                        `tfsdk:"vbond_as_stun_server_variable"`
	ExcludeControllerGroupList           types.Set                           `tfsdk:"exclude_controller_group_list"`
	ExcludeControllerGroupListVariable   types.String                        `tfsdk:"exclude_controller_group_list_variable"`
	VmanageConnectionPreference          types.Int64                         `tfsdk:"vmanage_connection_preference"`
	VmanageConnectionPreferenceVariable  types.String                        `tfsdk:"vmanage_connection_preference_variable"`
	PortHop                              types.Bool                          `tfsdk:"port_hop"`
	PortHopVariable                      types.String                        `tfsdk:"port_hop_variable"`
	Restrict                             types.Bool                          `tfsdk:"restrict"`
	RestrictVariable                     types.String                        `tfsdk:"restrict_variable"`
	Carrier                              types.String                        `tfsdk:"carrier"`
	CarrierVariable                      types.String                        `tfsdk:"carrier_variable"`
	NatRefreshInterval                   types.Int64                         `tfsdk:"nat_refresh_interval"`
	NatRefreshIntervalVariable           types.String                        `tfsdk:"nat_refresh_interval_variable"`
	HelloInterval                        types.Int64                         `tfsdk:"hello_interval"`
	HelloIntervalVariable                types.String                        `tfsdk:"hello_interval_variable"`
	HelloTolerance                       types.Int64                         `tfsdk:"hello_tolerance"`
	HelloToleranceVariable               types.String                        `tfsdk:"hello_tolerance_variable"`
	BindLoopbackTunnel                   types.String                        `tfsdk:"bind_loopback_tunnel"`
	BindLoopbackTunnelVariable           types.String                        `tfsdk:"bind_loopback_tunnel_variable"`
	All                                  types.Bool                          `tfsdk:"all"`
	AllVariable                          types.String                        `tfsdk:"all_variable"`
	NetworkBroadcast2                    types.Bool                          `tfsdk:"network_broadcast_2"`
	NetworkBroadcast2Variable            types.String                        `tfsdk:"network_broadcast_2_variable"`
	Bgp                                  types.Bool                          `tfsdk:"bgp"`
	BgpVariable                          types.String                        `tfsdk:"bgp_variable"`
	Dhcp                                 types.Bool                          `tfsdk:"dhcp"`
	DhcpVariable                         types.String                        `tfsdk:"dhcp_variable"`
	Dns                                  types.Bool                          `tfsdk:"dns"`
	DnsVariable                          types.String                        `tfsdk:"dns_variable"`
	Icmp                                 types.Bool                          `tfsdk:"icmp"`
	IcmpVariable                         types.String                        `tfsdk:"icmp_variable"`
	Ssh                                  types.Bool                          `tfsdk:"ssh"`
	SshVariable                          types.String                        `tfsdk:"ssh_variable"`
	Netconf                              types.Bool                          `tfsdk:"netconf"`
	NetconfVariable                      types.String                        `tfsdk:"netconf_variable"`
	Ospf                                 types.Bool                          `tfsdk:"ospf"`
	OspfVariable                         types.String                        `tfsdk:"ospf_variable"`
	Stun                                 types.Bool                          `tfsdk:"stun"`
	StunVariable                         types.String                        `tfsdk:"stun_variable"`
	Snmp                                 types.Bool                          `tfsdk:"snmp"`
	SnmpVariable                         types.String                        `tfsdk:"snmp_variable"`
	Https                                types.Bool                          `tfsdk:"https"`
	HttpsVariable                        types.String                        `tfsdk:"https_variable"`
	Nat                                  types.Bool                          `tfsdk:"nat"`
	NatVariable                          types.String                        `tfsdk:"nat_variable"`
	RefreshMode                          types.String                        `tfsdk:"refresh_mode"`
	RefreshModeVariable                  types.String                        `tfsdk:"refresh_mode_variable"`
	UdpTimeout                           types.Int64                         `tfsdk:"udp_timeout"`
	UdpTimeoutVariable                   types.String                        `tfsdk:"udp_timeout_variable"`
	TcpTimeout                           types.Int64                         `tfsdk:"tcp_timeout"`
	TcpTimeoutVariable                   types.String                        `tfsdk:"tcp_timeout_variable"`
	BlockIcmpError                       types.Bool                          `tfsdk:"block_icmp_error"`
	BlockIcmpErrorVariable               types.String                        `tfsdk:"block_icmp_error_variable"`
	RespondToPing                        types.Bool                          `tfsdk:"respond_to_ping"`
	RespondToPingVariable                types.String                        `tfsdk:"respond_to_ping_variable"`
	PortForward                          []VPNInterfaceDSLPPPoAPortForward   `tfsdk:"port_forward"`
	AdaptiveQos                          types.Bool                          `tfsdk:"adaptive_qos"`
	AdaptPeriod                          types.Int64                         `tfsdk:"adapt_period"`
	AdaptPeriodVariable                  types.String                        `tfsdk:"adapt_period_variable"`
	ShapingRateDownstreamDefault         types.Int64                         `tfsdk:"shaping_rate_downstream_default"`
	ShapingRateDownstreamDefaultVariable types.String                        `tfsdk:"shaping_rate_downstream_default_variable"`
	ShapingRateDownstreamMin             types.Int64                         `tfsdk:"shaping_rate_downstream_min"`
	ShapingRateDownstreamMinVariable     types.String                        `tfsdk:"shaping_rate_downstream_min_variable"`
	ShapingRateDownstreamMax             types.Int64                         `tfsdk:"shaping_rate_downstream_max"`
	ShapingRateDownstreamMaxVariable     types.String                        `tfsdk:"shaping_rate_downstream_max_variable"`
	ShapingRateUpstreamDefault           types.Int64                         `tfsdk:"shaping_rate_upstream_default"`
	ShapingRateUpstreamDefaultVariable   types.String                        `tfsdk:"shaping_rate_upstream_default_variable"`
	ShapingRateUpstreamMin               types.Int64                         `tfsdk:"shaping_rate_upstream_min"`
	ShapingRateUpstreamMinVariable       types.String                        `tfsdk:"shaping_rate_upstream_min_variable"`
	ShapingRateUpstreamMax               types.Int64                         `tfsdk:"shaping_rate_upstream_max"`
	ShapingRateUpstreamMaxVariable       types.String                        `tfsdk:"shaping_rate_upstream_max_variable"`
	ShapingRate                          types.Int64                         `tfsdk:"shaping_rate"`
	ShapingRateVariable                  types.String                        `tfsdk:"shaping_rate_variable"`
	QosMap                               types.String                        `tfsdk:"qos_map"`
	QosMapVariable                       types.String                        `tfsdk:"qos_map_variable"`
	VpnQosMap                            types.String                        `tfsdk:"vpn_qos_map"`
	VpnQosMapVariable                    types.String                        `tfsdk:"vpn_qos_map_variable"`
	BandwidthUpstream                    types.Int64                         `tfsdk:"bandwidth_upstream"`
	BandwidthUpstreamVariable            types.String                        `tfsdk:"bandwidth_upstream_variable"`
	BandwidthDownstream                  types.Int64                         `tfsdk:"bandwidth_downstream"`
	BandwidthDownstreamVariable          types.String                        `tfsdk:"bandwidth_downstream_variable"`
	WriteRule                            types.String                        `tfsdk:"write_rule"`
	WriteRuleVariable                    types.String                        `tfsdk:"write_rule_variable"`
	AccessList                           []VPNInterfaceDSLPPPoAAccessList    `tfsdk:"access_list"`
	Policer                              []VPNInterfaceDSLPPPoAPolicer       `tfsdk:"policer"`
	IpMtu                                types.Int64                         `tfsdk:"ip_mtu"`
	IpMtuVariable                        types.String                        `tfsdk:"ip_mtu_variable"`
	TcpMss                               types.Int64                         `tfsdk:"tcp_mss"`
	TcpMssVariable                       types.String                        `tfsdk:"tcp_mss_variable"`
	TlocExtension                        types.String                        `tfsdk:"tloc_extension"`
	TlocExtensionVariable                types.String                        `tfsdk:"tloc_extension_variable"`
	Tracker                              types.Set                           `tfsdk:"tracker"`
	TrackerVariable                      types.String                        `tfsdk:"tracker_variable"`
	IpDirectedBroadcast                  types.Bool                          `tfsdk:"ip_directed_broadcast"`
	IpDirectedBroadcastVariable          types.String                        `tfsdk:"ip_directed_broadcast_variable"`
}

type VPNInterfaceDSLPPPoAVdsl struct {
	Optional                       types.Bool   `tfsdk:"optional"`
	ControllerVdslSlot             types.String `tfsdk:"controller_vdsl_slot"`
	ControllerVdslSlotVariable     types.String `tfsdk:"controller_vdsl_slot_variable"`
	Sra                            types.Bool   `tfsdk:"sra"`
	SraVariable                    types.String `tfsdk:"sra_variable"`
	ModeAdsl1                      types.Bool   `tfsdk:"mode_adsl1"`
	ModeAdsl1Variable              types.String `tfsdk:"mode_adsl1_variable"`
	ModeAdsl2                      types.Bool   `tfsdk:"mode_adsl2"`
	ModeAdsl2Variable              types.String `tfsdk:"mode_adsl2_variable"`
	ModeAdsl2plus                  types.Bool   `tfsdk:"mode_adsl2plus"`
	ModeAdsl2plusVariable          types.String `tfsdk:"mode_adsl2plus_variable"`
	ModeVdsl2                      types.Bool   `tfsdk:"mode_vdsl2"`
	ModeVdsl2Variable              types.String `tfsdk:"mode_vdsl2_variable"`
	ModeAnsi                       types.Bool   `tfsdk:"mode_ansi"`
	ModeAnsiVariable               types.String `tfsdk:"mode_ansi_variable"`
	VdslModemConfiguration         types.String `tfsdk:"vdsl_modem_configuration"`
	VdslModemConfigurationVariable types.String `tfsdk:"vdsl_modem_configuration_variable"`
}

type VPNInterfaceDSLPPPoAPvc struct {
	Optional                          types.Bool   `tfsdk:"optional"`
	VpiAndVci                         types.String `tfsdk:"vpi_and_vci"`
	VpiAndVciVariable                 types.String `tfsdk:"vpi_and_vci_variable"`
	VbrNrtPeakCellRate                types.Int64  `tfsdk:"vbr_nrt_peak_cell_rate"`
	VbrNrtPeakCellRateVariable        types.String `tfsdk:"vbr_nrt_peak_cell_rate_variable"`
	VbrNrtSustainableCellRate         types.Int64  `tfsdk:"vbr_nrt_sustainable_cell_rate"`
	VbrNrtSustainableCellRateVariable types.String `tfsdk:"vbr_nrt_sustainable_cell_rate_variable"`
	VbrNrtMaximumBurstSize            types.Int64  `tfsdk:"vbr_nrt_maximum_burst_size"`
	VbrNrtMaximumBurstSizeVariable    types.String `tfsdk:"vbr_nrt_maximum_burst_size_variable"`
	VbrRtPeakCellRate                 types.Int64  `tfsdk:"vbr_rt_peak_cell_rate"`
	VbrRtPeakCellRateVariable         types.String `tfsdk:"vbr_rt_peak_cell_rate_variable"`
	VbrRtAverageCellRate              types.Int64  `tfsdk:"vbr_rt_average_cell_rate"`
	VbrRtAverageCellRateVariable      types.String `tfsdk:"vbr_rt_average_cell_rate_variable"`
	VbrRtMaximumBurstSize             types.Int64  `tfsdk:"vbr_rt_maximum_burst_size"`
	VbrRtMaximumBurstSizeVariable     types.String `tfsdk:"vbr_rt_maximum_burst_size_variable"`
	Dialer                            types.Bool   `tfsdk:"dialer"`
	DialerVariable                    types.String `tfsdk:"dialer_variable"`
	EncapsulationAal5nlpid            types.Bool   `tfsdk:"encapsulation_aal5nlpid"`
	EncapsulationAal5nlpidVariable    types.String `tfsdk:"encapsulation_aal5nlpid_variable"`
	EncapsulationAal5snap             types.Bool   `tfsdk:"encapsulation_aal5snap"`
	EncapsulationAal5snapVariable     types.String `tfsdk:"encapsulation_aal5snap_variable"`
	DialerPoolMember                  types.Int64  `tfsdk:"dialer_pool_member"`
	DialerPoolMemberVariable          types.String `tfsdk:"dialer_pool_member_variable"`
}

type VPNInterfaceDSLPPPoAEncapsulation struct {
	Optional           types.Bool   `tfsdk:"optional"`
	EncapsulationType  types.String `tfsdk:"encapsulation_type"`
	Preference         types.Int64  `tfsdk:"preference"`
	PreferenceVariable types.String `tfsdk:"preference_variable"`
	Weight             types.Int64  `tfsdk:"weight"`
	WeightVariable     types.String `tfsdk:"weight_variable"`
}

type VPNInterfaceDSLPPPoAPortForward struct {
	Optional                 types.Bool   `tfsdk:"optional"`
	PortStartRange           types.Int64  `tfsdk:"port_start_range"`
	PortEndRange             types.Int64  `tfsdk:"port_end_range"`
	Protocol                 types.String `tfsdk:"protocol"`
	PrivateVpn               types.Int64  `tfsdk:"private_vpn"`
	PrivateVpnVariable       types.String `tfsdk:"private_vpn_variable"`
	PrivateIpAddress         types.String `tfsdk:"private_ip_address"`
	PrivateIpAddressVariable types.String `tfsdk:"private_ip_address_variable"`
}

type VPNInterfaceDSLPPPoAAccessList struct {
	Optional        types.Bool   `tfsdk:"optional"`
	Direction       types.String `tfsdk:"direction"`
	AclName         types.String `tfsdk:"acl_name"`
	AclNameVariable types.String `tfsdk:"acl_name_variable"`
}

type VPNInterfaceDSLPPPoAPolicer struct {
	Optional    types.Bool   `tfsdk:"optional"`
	Direction   types.String `tfsdk:"direction"`
	PolicerName types.String `tfsdk:"policer_name"`
}

func (data VPNInterfaceDSLPPPoA) getModel() string {
	return "vpn-interface-pppoa"
}

func (data VPNInterfaceDSLPPPoA) toBody(ctx context.Context) string {
	body := ""

	var device_types []string
	data.DeviceTypes.ElementsAs(ctx, &device_types, false)
	body, _ = sjson.Set(body, "deviceType", device_types)
	body, _ = sjson.Set(body, "factoryDefault", false)
	body, _ = sjson.Set(body, "templateDescription", data.Description.ValueString())
	body, _ = sjson.Set(body, "templateMinVersion", "15.0.0")
	body, _ = sjson.Set(body, "templateName", data.Name.ValueString())
	body, _ = sjson.Set(body, "templateType", "vpn-interface-pppoa")
	body, _ = sjson.Set(body, "templateDefinition", map[string]interface{}{})

	path := "templateDefinition."

	if !data.AtmSubInterfaceNameVariable.IsNull() {
		body, _ = sjson.Set(body, path+"if-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"if-name."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"if-name."+"vipVariableName", data.AtmSubInterfaceNameVariable.ValueString())
	} else if data.AtmSubInterfaceName.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"if-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"if-name."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"if-name."+"vipValue", data.AtmSubInterfaceName.ValueString())
	}

	if !data.ShutdownVariable.IsNull() {
		body, _ = sjson.Set(body, path+"shutdown."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shutdown."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"shutdown."+"vipVariableName", data.ShutdownVariable.ValueString())
	} else if data.Shutdown.IsNull() {
		body, _ = sjson.Set(body, path+"shutdown."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shutdown."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"shutdown."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shutdown."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"shutdown."+"vipValue", strconv.FormatBool(data.Shutdown.ValueBool()))
	}

	if !data.InterfaceDescriptionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"description."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"description."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"description."+"vipVariableName", data.InterfaceDescriptionVariable.ValueString())
	} else if data.InterfaceDescription.IsNull() {
		body, _ = sjson.Set(body, path+"description."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"description."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"description."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"description."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"description."+"vipValue", data.InterfaceDescription.ValueString())
	}
	if len(data.Vdsl) > 0 {
		body, _ = sjson.Set(body, path+"controller.vdsl."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"controller.vdsl."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"controller.vdsl."+"vipPrimaryKey", []string{"name"})
		body, _ = sjson.Set(body, path+"controller.vdsl."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"controller.vdsl."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"controller.vdsl."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"controller.vdsl."+"vipPrimaryKey", []string{"name"})
		body, _ = sjson.Set(body, path+"controller.vdsl."+"vipValue", []interface{}{})
	}
	for _, item := range data.Vdsl {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "name")

		if !item.ControllerVdslSlotVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "name."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "name."+"vipVariableName", item.ControllerVdslSlotVariable.ValueString())
		} else if item.ControllerVdslSlot.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "name."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "name."+"vipValue", item.ControllerVdslSlot.ValueString())
		}
		itemAttributes = append(itemAttributes, "sra")

		if !item.SraVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "sra."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "sra."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "sra."+"vipVariableName", item.SraVariable.ValueString())
		} else if item.Sra.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "sra."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "sra."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "sra."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "sra."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "sra."+"vipValue", strconv.FormatBool(item.Sra.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "adsl1")

		if !item.ModeAdsl1Variable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl1."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl1."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl1."+"vipVariableName", item.ModeAdsl1Variable.ValueString())
		} else if item.ModeAdsl1.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl1."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl1."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl1."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl1."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl1."+"vipValue", strconv.FormatBool(item.ModeAdsl1.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "adsl2")

		if !item.ModeAdsl2Variable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2."+"vipVariableName", item.ModeAdsl2Variable.ValueString())
		} else if item.ModeAdsl2.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2."+"vipValue", strconv.FormatBool(item.ModeAdsl2.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "adsl2plus")

		if !item.ModeAdsl2plusVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2plus."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2plus."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2plus."+"vipVariableName", item.ModeAdsl2plusVariable.ValueString())
		} else if item.ModeAdsl2plus.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2plus."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2plus."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2plus."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2plus."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.adsl2plus."+"vipValue", strconv.FormatBool(item.ModeAdsl2plus.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "vdsl2")

		if !item.ModeVdsl2Variable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.vdsl2."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.vdsl2."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.vdsl2."+"vipVariableName", item.ModeVdsl2Variable.ValueString())
		} else if item.ModeVdsl2.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.vdsl2."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.vdsl2."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.vdsl2."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.vdsl2."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.vdsl2."+"vipValue", strconv.FormatBool(item.ModeVdsl2.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "ansi")

		if !item.ModeAnsiVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.ansi."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.ansi."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.ansi."+"vipVariableName", item.ModeAnsiVariable.ValueString())
		} else if item.ModeAnsi.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.ansi."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.ansi."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.ansi."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.ansi."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "operating.mode.auto.ansi."+"vipValue", strconv.FormatBool(item.ModeAnsi.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "modem")

		if !item.VdslModemConfigurationVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "modem."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "modem."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "modem."+"vipVariableName", item.VdslModemConfigurationVariable.ValueString())
		} else if item.VdslModemConfiguration.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "modem."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "modem."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "modem."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "modem."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "modem."+"vipValue", item.VdslModemConfiguration.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"controller.vdsl."+"vipValue.-1", itemBody)
	}
	if len(data.Pvc) > 0 {
		body, _ = sjson.Set(body, path+"pvc."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"pvc."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"pvc."+"vipPrimaryKey", []string{"local-vpi-vci"})
		body, _ = sjson.Set(body, path+"pvc."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"pvc."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"pvc."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"pvc."+"vipPrimaryKey", []string{"local-vpi-vci"})
		body, _ = sjson.Set(body, path+"pvc."+"vipValue", []interface{}{})
	}
	for _, item := range data.Pvc {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "local-vpi-vci")

		if !item.VpiAndVciVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "local-vpi-vci."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "local-vpi-vci."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "local-vpi-vci."+"vipVariableName", item.VpiAndVciVariable.ValueString())
		} else if item.VpiAndVci.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "local-vpi-vci."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "local-vpi-vci."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "local-vpi-vci."+"vipValue", item.VpiAndVci.ValueString())
		}
		itemAttributes = append(itemAttributes, "PCR")

		if !item.VbrNrtPeakCellRateVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.PCR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.PCR."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.PCR."+"vipVariableName", item.VbrNrtPeakCellRateVariable.ValueString())
		} else if item.VbrNrtPeakCellRate.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt", map[string]interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.PCR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.PCR."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.PCR."+"vipValue", item.VbrNrtPeakCellRate.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "SCR")

		if !item.VbrNrtSustainableCellRateVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.SCR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.SCR."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.SCR."+"vipVariableName", item.VbrNrtSustainableCellRateVariable.ValueString())
		} else if item.VbrNrtSustainableCellRate.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt", map[string]interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.SCR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.SCR."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.SCR."+"vipValue", item.VbrNrtSustainableCellRate.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "MCR")

		if !item.VbrNrtMaximumBurstSizeVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.MCR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.MCR."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.MCR."+"vipVariableName", item.VbrNrtMaximumBurstSizeVariable.ValueString())
		} else if item.VbrNrtMaximumBurstSize.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt", map[string]interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.MCR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.MCR."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "vbr-nrt.MCR."+"vipValue", item.VbrNrtMaximumBurstSize.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "PCR")

		if !item.VbrRtPeakCellRateVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.PCR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.PCR."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.PCR."+"vipVariableName", item.VbrRtPeakCellRateVariable.ValueString())
		} else if item.VbrRtPeakCellRate.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-rt", map[string]interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.PCR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.PCR."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.PCR."+"vipValue", item.VbrRtPeakCellRate.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "ACR")

		if !item.VbrRtAverageCellRateVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.ACR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.ACR."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.ACR."+"vipVariableName", item.VbrRtAverageCellRateVariable.ValueString())
		} else if item.VbrRtAverageCellRate.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-rt", map[string]interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.ACR."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.ACR."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.ACR."+"vipValue", item.VbrRtAverageCellRate.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "Burst-cell-size")

		if !item.VbrRtMaximumBurstSizeVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.Burst-cell-size."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.Burst-cell-size."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.Burst-cell-size."+"vipVariableName", item.VbrRtMaximumBurstSizeVariable.ValueString())
		} else if item.VbrRtMaximumBurstSize.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vbr-rt", map[string]interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.Burst-cell-size."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.Burst-cell-size."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "vbr-rt.Burst-cell-size."+"vipValue", item.VbrRtMaximumBurstSize.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "dialer")

		if !item.DialerVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5mux.ppp.dialer."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5mux.ppp.dialer."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5mux.ppp.dialer."+"vipVariableName", item.DialerVariable.ValueString())
		} else if item.Dialer.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5mux.ppp.dialer."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5mux.ppp.dialer."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5mux.ppp.dialer."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5mux.ppp.dialer."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5mux.ppp.dialer."+"vipValue", strconv.FormatBool(item.Dialer.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "aal5nlpid")

		if !item.EncapsulationAal5nlpidVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5nlpid."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5nlpid."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5nlpid."+"vipVariableName", item.EncapsulationAal5nlpidVariable.ValueString())
		} else if item.EncapsulationAal5nlpid.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5nlpid."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5nlpid."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5nlpid."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5nlpid."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5nlpid."+"vipValue", strconv.FormatBool(item.EncapsulationAal5nlpid.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "aal5snap")

		if !item.EncapsulationAal5snapVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5snap."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5snap."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5snap."+"vipVariableName", item.EncapsulationAal5snapVariable.ValueString())
		} else if item.EncapsulationAal5snap.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5snap."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5snap."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5snap."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5snap."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "encapsulation.aal5snap."+"vipValue", strconv.FormatBool(item.EncapsulationAal5snap.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "pool-member")

		if !item.DialerPoolMemberVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "dialer.pool-member."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "dialer.pool-member."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "dialer.pool-member."+"vipVariableName", item.DialerPoolMemberVariable.ValueString())
		} else if item.DialerPoolMember.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "dialer", map[string]interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "dialer.pool-member."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "dialer.pool-member."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "dialer.pool-member."+"vipValue", item.DialerPoolMember.ValueInt64())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"pvc."+"vipValue.-1", itemBody)
	}

	if !data.PppAuthenticationProtocolVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication.method."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.authentication.method."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.authentication.method."+"vipVariableName", data.PppAuthenticationProtocolVariable.ValueString())
	} else if data.PppAuthenticationProtocol.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.authentication.method."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.authentication.method."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.authentication.method."+"vipValue", data.PppAuthenticationProtocol.ValueString())
	}

	if !data.PppAuthenticationProtocolPapVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipVariableName", data.PppAuthenticationProtocolPapVariable.ValueString())
	} else if data.PppAuthenticationProtocolPap.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipValue", strconv.FormatBool(data.PppAuthenticationProtocolPap.ValueBool()))
	}

	if !data.AuthenticationTypeVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipVariableName", data.AuthenticationTypeVariable.ValueString())
	} else if data.AuthenticationType.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipValue", data.AuthenticationType.ValueString())
	}

	if !data.ChapHostnameVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipVariableName", data.ChapHostnameVariable.ValueString())
	} else if data.ChapHostname.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.chap", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipValue", data.ChapHostname.ValueString())
	}

	if !data.ChapPppAuthPasswordVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipVariableName", data.ChapPppAuthPasswordVariable.ValueString())
	} else if data.ChapPppAuthPassword.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.chap.password", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipValue", data.ChapPppAuthPassword.ValueString())
	}

	if !data.PapUsernameVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipVariableName", data.PapUsernameVariable.ValueString())
	} else if data.PapUsername.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipValue", data.PapUsername.ValueString())
	}
	if data.PapPassword.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.password."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.password."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.password."+"vipValue", strconv.FormatBool(data.PapPassword.ValueBool()))
	}

	if !data.PapPppAuthPasswordVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipVariableName", data.PapPppAuthPasswordVariable.ValueString())
	} else if data.PapPppAuthPassword.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipValue", data.PapPppAuthPassword.ValueString())
	}

	if !data.EnableCoreRegionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipVariableName", data.EnableCoreRegionVariable.ValueString())
	} else if data.EnableCoreRegion.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipValue", strconv.FormatBool(data.EnableCoreRegion.ValueBool()))
	}

	if !data.CoreRegionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipVariableName", data.CoreRegionVariable.ValueString())
	} else if data.CoreRegion.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipValue", data.CoreRegion.ValueString())
	}

	if !data.SecondaryRegionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipVariableName", data.SecondaryRegionVariable.ValueString())
	} else if data.SecondaryRegion.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipValue", data.SecondaryRegion.ValueString())
	}
	if len(data.Encapsulation) > 0 {
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipPrimaryKey", []string{"encap"})
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipPrimaryKey", []string{"encap"})
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipValue", []interface{}{})
	}
	for _, item := range data.Encapsulation {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "encap")
		if item.EncapsulationType.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "encap."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "encap."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "encap."+"vipValue", item.EncapsulationType.ValueString())
		}
		itemAttributes = append(itemAttributes, "preference")

		if !item.PreferenceVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipVariableName", item.PreferenceVariable.ValueString())
		} else if item.Preference.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipValue", item.Preference.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "weight")

		if !item.WeightVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipVariableName", item.WeightVariable.ValueString())
		} else if item.Weight.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipValue", item.Weight.ValueInt64())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"tunnel-interface.encapsulation."+"vipValue.-1", itemBody)
	}

	if !data.GroupsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipVariableName", data.GroupsVariable.ValueString())
	} else if data.Groups.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipType", "constant")
		var values []int64
		data.Groups.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipValue", values)
	}

	if !data.BorderVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipVariableName", data.BorderVariable.ValueString())
	} else if data.Border.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipValue", strconv.FormatBool(data.Border.ValueBool()))
	}

	if !data.PerTunnelQosVariable.IsNull() {
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipVariableName", data.PerTunnelQosVariable.ValueString())
	} else if data.PerTunnelQos.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipValue", strconv.FormatBool(data.PerTunnelQos.ValueBool()))
	}

	if !data.PerTunnelQosAggregatorVariable.IsNull() {
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipVariableName", data.PerTunnelQosAggregatorVariable.ValueString())
	} else if data.PerTunnelQosAggregator.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipValue", strconv.FormatBool(data.PerTunnelQosAggregator.ValueBool()))
	}

	if !data.ColorVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipVariableName", data.ColorVariable.ValueString())
	} else if data.Color.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipValue", data.Color.ValueString())
	}

	if !data.LastResortCircuitVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipVariableName", data.LastResortCircuitVariable.ValueString())
	} else if data.LastResortCircuit.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipValue", strconv.FormatBool(data.LastResortCircuit.ValueBool()))
	}

	if !data.LowBandwidthLinkVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipVariableName", data.LowBandwidthLinkVariable.ValueString())
	} else if data.LowBandwidthLink.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipValue", strconv.FormatBool(data.LowBandwidthLink.ValueBool()))
	}

	if !data.TunnelTcpMssVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipVariableName", data.TunnelTcpMssVariable.ValueString())
	} else if data.TunnelTcpMss.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipValue", data.TunnelTcpMss.ValueInt64())
	}

	if !data.ClearDontFragmentVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipVariableName", data.ClearDontFragmentVariable.ValueString())
	} else if data.ClearDontFragment.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipValue", strconv.FormatBool(data.ClearDontFragment.ValueBool()))
	}

	if !data.NetworkBroadcast1Variable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipVariableName", data.NetworkBroadcast1Variable.ValueString())
	} else if data.NetworkBroadcast1.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipValue", strconv.FormatBool(data.NetworkBroadcast1.ValueBool()))
	}

	if !data.MaxControlConnectionsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipVariableName", data.MaxControlConnectionsVariable.ValueString())
	} else if data.MaxControlConnections.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipValue", data.MaxControlConnections.ValueInt64())
	}

	if !data.ControlConnectionsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipVariableName", data.ControlConnectionsVariable.ValueString())
	} else if data.ControlConnections.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipValue", strconv.FormatBool(data.ControlConnections.ValueBool()))
	}

	if !data.VbondAsStunServerVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipVariableName", data.VbondAsStunServerVariable.ValueString())
	} else if data.VbondAsStunServer.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipValue", strconv.FormatBool(data.VbondAsStunServer.ValueBool()))
	}

	if !data.ExcludeControllerGroupListVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipVariableName", data.ExcludeControllerGroupListVariable.ValueString())
	} else if data.ExcludeControllerGroupList.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipType", "constant")
		var values []int64
		data.ExcludeControllerGroupList.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipValue", values)
	}

	if !data.VmanageConnectionPreferenceVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipVariableName", data.VmanageConnectionPreferenceVariable.ValueString())
	} else if data.VmanageConnectionPreference.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipValue", data.VmanageConnectionPreference.ValueInt64())
	}

	if !data.PortHopVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipVariableName", data.PortHopVariable.ValueString())
	} else if data.PortHop.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipValue", strconv.FormatBool(data.PortHop.ValueBool()))
	}

	if !data.RestrictVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipVariableName", data.RestrictVariable.ValueString())
	} else if data.Restrict.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipValue", strconv.FormatBool(data.Restrict.ValueBool()))
	}

	if !data.CarrierVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipVariableName", data.CarrierVariable.ValueString())
	} else if data.Carrier.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipValue", data.Carrier.ValueString())
	}

	if !data.NatRefreshIntervalVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipVariableName", data.NatRefreshIntervalVariable.ValueString())
	} else if data.NatRefreshInterval.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipValue", data.NatRefreshInterval.ValueInt64())
	}

	if !data.HelloIntervalVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipVariableName", data.HelloIntervalVariable.ValueString())
	} else if data.HelloInterval.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipValue", data.HelloInterval.ValueInt64())
	}

	if !data.HelloToleranceVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipVariableName", data.HelloToleranceVariable.ValueString())
	} else if data.HelloTolerance.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipValue", data.HelloTolerance.ValueInt64())
	}

	if !data.BindLoopbackTunnelVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipVariableName", data.BindLoopbackTunnelVariable.ValueString())
	} else if data.BindLoopbackTunnel.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipValue", data.BindLoopbackTunnel.ValueString())
	}

	if !data.AllVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipVariableName", data.AllVariable.ValueString())
	} else if data.All.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipValue", strconv.FormatBool(data.All.ValueBool()))
	}

	if !data.NetworkBroadcast2Variable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipVariableName", data.NetworkBroadcast2Variable.ValueString())
	} else if data.NetworkBroadcast2.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipValue", strconv.FormatBool(data.NetworkBroadcast2.ValueBool()))
	}

	if !data.BgpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipVariableName", data.BgpVariable.ValueString())
	} else if data.Bgp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipValue", strconv.FormatBool(data.Bgp.ValueBool()))
	}

	if !data.DhcpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipVariableName", data.DhcpVariable.ValueString())
	} else if data.Dhcp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipValue", strconv.FormatBool(data.Dhcp.ValueBool()))
	}

	if !data.DnsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipVariableName", data.DnsVariable.ValueString())
	} else if data.Dns.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipValue", strconv.FormatBool(data.Dns.ValueBool()))
	}

	if !data.IcmpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipVariableName", data.IcmpVariable.ValueString())
	} else if data.Icmp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipValue", strconv.FormatBool(data.Icmp.ValueBool()))
	}

	if !data.SshVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipVariableName", data.SshVariable.ValueString())
	} else if data.Ssh.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipValue", strconv.FormatBool(data.Ssh.ValueBool()))
	}

	if !data.NetconfVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipVariableName", data.NetconfVariable.ValueString())
	} else if data.Netconf.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipValue", strconv.FormatBool(data.Netconf.ValueBool()))
	}

	if !data.OspfVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipVariableName", data.OspfVariable.ValueString())
	} else if data.Ospf.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipValue", strconv.FormatBool(data.Ospf.ValueBool()))
	}

	if !data.StunVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipVariableName", data.StunVariable.ValueString())
	} else if data.Stun.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipValue", strconv.FormatBool(data.Stun.ValueBool()))
	}

	if !data.SnmpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipVariableName", data.SnmpVariable.ValueString())
	} else if data.Snmp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipValue", strconv.FormatBool(data.Snmp.ValueBool()))
	}

	if !data.HttpsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipVariableName", data.HttpsVariable.ValueString())
	} else if data.Https.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipValue", strconv.FormatBool(data.Https.ValueBool()))
	}

	if !data.NatVariable.IsNull() {
		body, _ = sjson.Set(body, path+"nat."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"nat."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"nat."+"vipVariableName", data.NatVariable.ValueString())
	} else if data.Nat.IsNull() {
		body, _ = sjson.Set(body, path+"nat."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"nat."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"nat."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"nat."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"nat."+"vipValue", strconv.FormatBool(data.Nat.ValueBool()))
	}

	if !data.RefreshModeVariable.IsNull() {
		body, _ = sjson.Set(body, path+"nat.refresh."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.refresh."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"nat.refresh."+"vipVariableName", data.RefreshModeVariable.ValueString())
	} else if data.RefreshMode.IsNull() {
		body, _ = sjson.Set(body, path+"nat.refresh."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.refresh."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"nat.refresh."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.refresh."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"nat.refresh."+"vipValue", data.RefreshMode.ValueString())
	}

	if !data.UdpTimeoutVariable.IsNull() {
		body, _ = sjson.Set(body, path+"nat.udp-timeout."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.udp-timeout."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"nat.udp-timeout."+"vipVariableName", data.UdpTimeoutVariable.ValueString())
	} else if data.UdpTimeout.IsNull() {
		body, _ = sjson.Set(body, path+"nat.udp-timeout."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.udp-timeout."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"nat.udp-timeout."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.udp-timeout."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"nat.udp-timeout."+"vipValue", data.UdpTimeout.ValueInt64())
	}

	if !data.TcpTimeoutVariable.IsNull() {
		body, _ = sjson.Set(body, path+"nat.tcp-timeout."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.tcp-timeout."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"nat.tcp-timeout."+"vipVariableName", data.TcpTimeoutVariable.ValueString())
	} else if data.TcpTimeout.IsNull() {
		body, _ = sjson.Set(body, path+"nat.tcp-timeout."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.tcp-timeout."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"nat.tcp-timeout."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.tcp-timeout."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"nat.tcp-timeout."+"vipValue", data.TcpTimeout.ValueInt64())
	}

	if !data.BlockIcmpErrorVariable.IsNull() {
		body, _ = sjson.Set(body, path+"nat.block-icmp-error."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.block-icmp-error."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"nat.block-icmp-error."+"vipVariableName", data.BlockIcmpErrorVariable.ValueString())
	} else if data.BlockIcmpError.IsNull() {
		body, _ = sjson.Set(body, path+"nat.block-icmp-error."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.block-icmp-error."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"nat.block-icmp-error."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.block-icmp-error."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"nat.block-icmp-error."+"vipValue", strconv.FormatBool(data.BlockIcmpError.ValueBool()))
	}

	if !data.RespondToPingVariable.IsNull() {
		body, _ = sjson.Set(body, path+"nat.respond-to-ping."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.respond-to-ping."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"nat.respond-to-ping."+"vipVariableName", data.RespondToPingVariable.ValueString())
	} else if data.RespondToPing.IsNull() {
		body, _ = sjson.Set(body, path+"nat.respond-to-ping."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.respond-to-ping."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"nat.respond-to-ping."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"nat.respond-to-ping."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"nat.respond-to-ping."+"vipValue", strconv.FormatBool(data.RespondToPing.ValueBool()))
	}
	if len(data.PortForward) > 0 {
		body, _ = sjson.Set(body, path+"nat.port-forward."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"nat.port-forward."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"nat.port-forward."+"vipPrimaryKey", []string{"port-start", "port-end", "proto"})
		body, _ = sjson.Set(body, path+"nat.port-forward."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"nat.port-forward."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"nat.port-forward."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"nat.port-forward."+"vipPrimaryKey", []string{"port-start", "port-end", "proto"})
		body, _ = sjson.Set(body, path+"nat.port-forward."+"vipValue", []interface{}{})
	}
	for _, item := range data.PortForward {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "port-start")
		if item.PortStartRange.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "port-start."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "port-start."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "port-start."+"vipValue", item.PortStartRange.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "port-end")
		if item.PortEndRange.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "port-end."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "port-end."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "port-end."+"vipValue", item.PortEndRange.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "proto")
		if item.Protocol.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "proto."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "proto."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "proto."+"vipValue", item.Protocol.ValueString())
		}
		itemAttributes = append(itemAttributes, "private-vpn")

		if !item.PrivateVpnVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "private-vpn."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "private-vpn."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "private-vpn."+"vipVariableName", item.PrivateVpnVariable.ValueString())
		} else if item.PrivateVpn.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "private-vpn."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "private-vpn."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "private-vpn."+"vipValue", item.PrivateVpn.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "private-ip-address")

		if !item.PrivateIpAddressVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "private-ip-address."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "private-ip-address."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "private-ip-address."+"vipVariableName", item.PrivateIpAddressVariable.ValueString())
		} else if item.PrivateIpAddress.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "private-ip-address."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "private-ip-address."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "private-ip-address."+"vipValue", item.PrivateIpAddress.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"nat.port-forward."+"vipValue.-1", itemBody)
	}
	if data.AdaptiveQos.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"qos-adaptive."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-adaptive."+"vipValue", strconv.FormatBool(data.AdaptiveQos.ValueBool()))
	}

	if !data.AdaptPeriodVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.period."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.period."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-adaptive.period."+"vipVariableName", data.AdaptPeriodVariable.ValueString())
	} else if data.AdaptPeriod.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.period."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.period."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"qos-adaptive.period."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.period."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-adaptive.period."+"vipValue", data.AdaptPeriod.ValueInt64())
	}

	if !data.ShapingRateDownstreamDefaultVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.bandwidth-down."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.bandwidth-down."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.bandwidth-down."+"vipVariableName", data.ShapingRateDownstreamDefaultVariable.ValueString())
	} else if data.ShapingRateDownstreamDefault.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.bandwidth-down."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.bandwidth-down."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.bandwidth-down."+"vipValue", data.ShapingRateDownstreamDefault.ValueInt64())
	}

	if !data.ShapingRateDownstreamMinVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmin."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmin."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmin."+"vipVariableName", data.ShapingRateDownstreamMinVariable.ValueString())
	} else if data.ShapingRateDownstreamMin.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmin."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmin."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmin."+"vipValue", data.ShapingRateDownstreamMin.ValueInt64())
	}

	if !data.ShapingRateDownstreamMaxVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmax."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmax."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmax."+"vipVariableName", data.ShapingRateDownstreamMaxVariable.ValueString())
	} else if data.ShapingRateDownstreamMax.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmax."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmax."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-adaptive.downstream.range.dmax."+"vipValue", data.ShapingRateDownstreamMax.ValueInt64())
	}

	if !data.ShapingRateUpstreamDefaultVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.bandwidth-up."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.bandwidth-up."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.bandwidth-up."+"vipVariableName", data.ShapingRateUpstreamDefaultVariable.ValueString())
	} else if data.ShapingRateUpstreamDefault.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.bandwidth-up."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.bandwidth-up."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.bandwidth-up."+"vipValue", data.ShapingRateUpstreamDefault.ValueInt64())
	}

	if !data.ShapingRateUpstreamMinVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umin."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umin."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umin."+"vipVariableName", data.ShapingRateUpstreamMinVariable.ValueString())
	} else if data.ShapingRateUpstreamMin.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umin."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umin."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umin."+"vipValue", data.ShapingRateUpstreamMin.ValueInt64())
	}

	if !data.ShapingRateUpstreamMaxVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umax."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umax."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umax."+"vipVariableName", data.ShapingRateUpstreamMaxVariable.ValueString())
	} else if data.ShapingRateUpstreamMax.IsNull() {
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umax."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umax."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-adaptive.upstream.range.umax."+"vipValue", data.ShapingRateUpstreamMax.ValueInt64())
	}

	if !data.ShapingRateVariable.IsNull() {
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipVariableName", data.ShapingRateVariable.ValueString())
	} else if data.ShapingRate.IsNull() {
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipValue", data.ShapingRate.ValueInt64())
	}

	if !data.QosMapVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-map."+"vipVariableName", data.QosMapVariable.ValueString())
	} else if data.QosMap.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"qos-map."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-map."+"vipValue", data.QosMap.ValueString())
	}

	if !data.VpnQosMapVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipVariableName", data.VpnQosMapVariable.ValueString())
	} else if data.VpnQosMap.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipValue", data.VpnQosMap.ValueString())
	}

	if !data.BandwidthUpstreamVariable.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipVariableName", data.BandwidthUpstreamVariable.ValueString())
	} else if data.BandwidthUpstream.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipValue", data.BandwidthUpstream.ValueInt64())
	}

	if !data.BandwidthDownstreamVariable.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipVariableName", data.BandwidthDownstreamVariable.ValueString())
	} else if data.BandwidthDownstream.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipValue", data.BandwidthDownstream.ValueInt64())
	}

	if !data.WriteRuleVariable.IsNull() {
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipVariableName", data.WriteRuleVariable.ValueString())
	} else if data.WriteRule.IsNull() {
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipValue", data.WriteRule.ValueString())
	}
	if len(data.AccessList) > 0 {
		body, _ = sjson.Set(body, path+"access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"access-list."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"access-list."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"access-list."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"access-list."+"vipValue", []interface{}{})
	}
	for _, item := range data.AccessList {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "direction")
		if item.Direction.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipValue", item.Direction.ValueString())
		}
		itemAttributes = append(itemAttributes, "acl-name")

		if !item.AclNameVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipVariableName", item.AclNameVariable.ValueString())
		} else if item.AclName.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipValue", item.AclName.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"access-list."+"vipValue.-1", itemBody)
	}
	if len(data.Policer) > 0 {
		body, _ = sjson.Set(body, path+"policer."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"policer."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"policer."+"vipPrimaryKey", []string{"policer-name", "direction"})
		body, _ = sjson.Set(body, path+"policer."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"policer."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"policer."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"policer."+"vipPrimaryKey", []string{"policer-name", "direction"})
		body, _ = sjson.Set(body, path+"policer."+"vipValue", []interface{}{})
	}
	for _, item := range data.Policer {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "direction")
		if item.Direction.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipValue", item.Direction.ValueString())
		}
		itemAttributes = append(itemAttributes, "policer-name")
		if item.PolicerName.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "policer-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "policer-name."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "policer-name."+"vipValue", item.PolicerName.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"policer."+"vipValue.-1", itemBody)
	}

	if !data.IpMtuVariable.IsNull() {
		body, _ = sjson.Set(body, path+"mtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"mtu."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"mtu."+"vipVariableName", data.IpMtuVariable.ValueString())
	} else if data.IpMtu.IsNull() {
		body, _ = sjson.Set(body, path+"mtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"mtu."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"mtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"mtu."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"mtu."+"vipValue", data.IpMtu.ValueInt64())
	}

	if !data.TcpMssVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipVariableName", data.TcpMssVariable.ValueString())
	} else if data.TcpMss.IsNull() {
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipValue", data.TcpMss.ValueInt64())
	}

	if !data.TlocExtensionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipVariableName", data.TlocExtensionVariable.ValueString())
	} else if data.TlocExtension.IsNull() {
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipValue", data.TlocExtension.ValueString())
	}

	if !data.TrackerVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tracker."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tracker."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tracker."+"vipVariableName", data.TrackerVariable.ValueString())
	} else if data.Tracker.IsNull() {
		body, _ = sjson.Set(body, path+"tracker."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tracker."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tracker."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tracker."+"vipType", "constant")
		var values []string
		data.Tracker.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, path+"tracker."+"vipValue", values)
	}

	if !data.IpDirectedBroadcastVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipVariableName", data.IpDirectedBroadcastVariable.ValueString())
	} else if data.IpDirectedBroadcast.IsNull() {
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipValue", strconv.FormatBool(data.IpDirectedBroadcast.ValueBool()))
	}
	return body
}

func (data *VPNInterfaceDSLPPPoA) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("deviceType"); value.Exists() {
		data.DeviceTypes = helpers.GetStringSet(value.Array())
	} else {
		data.DeviceTypes = types.SetNull(types.StringType)
	}
	if value := res.Get("templateDescription"); value.Exists() && value.String() != "" {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("templateName"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("templateType"); value.Exists() {
		data.TemplateType = types.StringValue(value.String())
	} else {
		data.TemplateType = types.StringNull()
	}

	path := "templateDefinition."
	if value := res.Get(path + "if-name.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.AtmSubInterfaceName = types.StringNull()

			v := res.Get(path + "if-name.vipVariableName")
			data.AtmSubInterfaceNameVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.AtmSubInterfaceName = types.StringNull()
			data.AtmSubInterfaceNameVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "if-name.vipValue")
			data.AtmSubInterfaceName = types.StringValue(v.String())
			data.AtmSubInterfaceNameVariable = types.StringNull()
		}
	} else {
		data.AtmSubInterfaceName = types.StringNull()
		data.AtmSubInterfaceNameVariable = types.StringNull()
	}
	if value := res.Get(path + "shutdown.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Shutdown = types.BoolNull()

			v := res.Get(path + "shutdown.vipVariableName")
			data.ShutdownVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Shutdown = types.BoolNull()
			data.ShutdownVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "shutdown.vipValue")
			data.Shutdown = types.BoolValue(v.Bool())
			data.ShutdownVariable = types.StringNull()
		}
	} else {
		data.Shutdown = types.BoolNull()
		data.ShutdownVariable = types.StringNull()
	}
	if value := res.Get(path + "description.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.InterfaceDescription = types.StringNull()

			v := res.Get(path + "description.vipVariableName")
			data.InterfaceDescriptionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.InterfaceDescription = types.StringNull()
			data.InterfaceDescriptionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "description.vipValue")
			data.InterfaceDescription = types.StringValue(v.String())
			data.InterfaceDescriptionVariable = types.StringNull()
		}
	} else {
		data.InterfaceDescription = types.StringNull()
		data.InterfaceDescriptionVariable = types.StringNull()
	}
	if value := res.Get(path + "controller.vdsl.vipValue"); len(value.Array()) > 0 {
		data.Vdsl = make([]VPNInterfaceDSLPPPoAVdsl, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceDSLPPPoAVdsl{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("name.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ControllerVdslSlot = types.StringNull()

					cv := v.Get("name.vipVariableName")
					item.ControllerVdslSlotVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ControllerVdslSlot = types.StringNull()
					item.ControllerVdslSlotVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("name.vipValue")
					item.ControllerVdslSlot = types.StringValue(cv.String())
					item.ControllerVdslSlotVariable = types.StringNull()
				}
			} else {
				item.ControllerVdslSlot = types.StringNull()
				item.ControllerVdslSlotVariable = types.StringNull()
			}
			if cValue := v.Get("sra.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Sra = types.BoolNull()

					cv := v.Get("sra.vipVariableName")
					item.SraVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Sra = types.BoolNull()
					item.SraVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("sra.vipValue")
					item.Sra = types.BoolValue(cv.Bool())
					item.SraVariable = types.StringNull()
				}
			} else {
				item.Sra = types.BoolNull()
				item.SraVariable = types.StringNull()
			}
			if cValue := v.Get("operating.mode.auto.adsl1.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ModeAdsl1 = types.BoolNull()

					cv := v.Get("operating.mode.auto.adsl1.vipVariableName")
					item.ModeAdsl1Variable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ModeAdsl1 = types.BoolNull()
					item.ModeAdsl1Variable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("operating.mode.auto.adsl1.vipValue")
					item.ModeAdsl1 = types.BoolValue(cv.Bool())
					item.ModeAdsl1Variable = types.StringNull()
				}
			} else {
				item.ModeAdsl1 = types.BoolNull()
				item.ModeAdsl1Variable = types.StringNull()
			}
			if cValue := v.Get("operating.mode.auto.adsl2.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ModeAdsl2 = types.BoolNull()

					cv := v.Get("operating.mode.auto.adsl2.vipVariableName")
					item.ModeAdsl2Variable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ModeAdsl2 = types.BoolNull()
					item.ModeAdsl2Variable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("operating.mode.auto.adsl2.vipValue")
					item.ModeAdsl2 = types.BoolValue(cv.Bool())
					item.ModeAdsl2Variable = types.StringNull()
				}
			} else {
				item.ModeAdsl2 = types.BoolNull()
				item.ModeAdsl2Variable = types.StringNull()
			}
			if cValue := v.Get("operating.mode.auto.adsl2plus.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ModeAdsl2plus = types.BoolNull()

					cv := v.Get("operating.mode.auto.adsl2plus.vipVariableName")
					item.ModeAdsl2plusVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ModeAdsl2plus = types.BoolNull()
					item.ModeAdsl2plusVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("operating.mode.auto.adsl2plus.vipValue")
					item.ModeAdsl2plus = types.BoolValue(cv.Bool())
					item.ModeAdsl2plusVariable = types.StringNull()
				}
			} else {
				item.ModeAdsl2plus = types.BoolNull()
				item.ModeAdsl2plusVariable = types.StringNull()
			}
			if cValue := v.Get("operating.mode.auto.vdsl2.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ModeVdsl2 = types.BoolNull()

					cv := v.Get("operating.mode.auto.vdsl2.vipVariableName")
					item.ModeVdsl2Variable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ModeVdsl2 = types.BoolNull()
					item.ModeVdsl2Variable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("operating.mode.auto.vdsl2.vipValue")
					item.ModeVdsl2 = types.BoolValue(cv.Bool())
					item.ModeVdsl2Variable = types.StringNull()
				}
			} else {
				item.ModeVdsl2 = types.BoolNull()
				item.ModeVdsl2Variable = types.StringNull()
			}
			if cValue := v.Get("operating.mode.auto.ansi.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ModeAnsi = types.BoolNull()

					cv := v.Get("operating.mode.auto.ansi.vipVariableName")
					item.ModeAnsiVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ModeAnsi = types.BoolNull()
					item.ModeAnsiVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("operating.mode.auto.ansi.vipValue")
					item.ModeAnsi = types.BoolValue(cv.Bool())
					item.ModeAnsiVariable = types.StringNull()
				}
			} else {
				item.ModeAnsi = types.BoolNull()
				item.ModeAnsiVariable = types.StringNull()
			}
			if cValue := v.Get("modem.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.VdslModemConfiguration = types.StringNull()

					cv := v.Get("modem.vipVariableName")
					item.VdslModemConfigurationVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.VdslModemConfiguration = types.StringNull()
					item.VdslModemConfigurationVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("modem.vipValue")
					item.VdslModemConfiguration = types.StringValue(cv.String())
					item.VdslModemConfigurationVariable = types.StringNull()
				}
			} else {
				item.VdslModemConfiguration = types.StringNull()
				item.VdslModemConfigurationVariable = types.StringNull()
			}
			data.Vdsl = append(data.Vdsl, item)
			return true
		})
	} else {
		if len(data.Vdsl) > 0 {
			data.Vdsl = []VPNInterfaceDSLPPPoAVdsl{}
		}
	}
	if value := res.Get(path + "pvc.vipValue"); len(value.Array()) > 0 {
		data.Pvc = make([]VPNInterfaceDSLPPPoAPvc, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceDSLPPPoAPvc{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("local-vpi-vci.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.VpiAndVci = types.StringNull()

					cv := v.Get("local-vpi-vci.vipVariableName")
					item.VpiAndVciVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.VpiAndVci = types.StringNull()
					item.VpiAndVciVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("local-vpi-vci.vipValue")
					item.VpiAndVci = types.StringValue(cv.String())
					item.VpiAndVciVariable = types.StringNull()
				}
			} else {
				item.VpiAndVci = types.StringNull()
				item.VpiAndVciVariable = types.StringNull()
			}
			if cValue := v.Get("vbr-nrt.PCR.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.VbrNrtPeakCellRate = types.Int64Null()

					cv := v.Get("vbr-nrt.PCR.vipVariableName")
					item.VbrNrtPeakCellRateVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.VbrNrtPeakCellRate = types.Int64Null()
					item.VbrNrtPeakCellRateVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("vbr-nrt.PCR.vipValue")
					item.VbrNrtPeakCellRate = types.Int64Value(cv.Int())
					item.VbrNrtPeakCellRateVariable = types.StringNull()
				}
			} else {
				item.VbrNrtPeakCellRate = types.Int64Null()
				item.VbrNrtPeakCellRateVariable = types.StringNull()
			}
			if cValue := v.Get("vbr-nrt.SCR.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.VbrNrtSustainableCellRate = types.Int64Null()

					cv := v.Get("vbr-nrt.SCR.vipVariableName")
					item.VbrNrtSustainableCellRateVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.VbrNrtSustainableCellRate = types.Int64Null()
					item.VbrNrtSustainableCellRateVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("vbr-nrt.SCR.vipValue")
					item.VbrNrtSustainableCellRate = types.Int64Value(cv.Int())
					item.VbrNrtSustainableCellRateVariable = types.StringNull()
				}
			} else {
				item.VbrNrtSustainableCellRate = types.Int64Null()
				item.VbrNrtSustainableCellRateVariable = types.StringNull()
			}
			if cValue := v.Get("vbr-nrt.MCR.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.VbrNrtMaximumBurstSize = types.Int64Null()

					cv := v.Get("vbr-nrt.MCR.vipVariableName")
					item.VbrNrtMaximumBurstSizeVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.VbrNrtMaximumBurstSize = types.Int64Null()
					item.VbrNrtMaximumBurstSizeVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("vbr-nrt.MCR.vipValue")
					item.VbrNrtMaximumBurstSize = types.Int64Value(cv.Int())
					item.VbrNrtMaximumBurstSizeVariable = types.StringNull()
				}
			} else {
				item.VbrNrtMaximumBurstSize = types.Int64Null()
				item.VbrNrtMaximumBurstSizeVariable = types.StringNull()
			}
			if cValue := v.Get("vbr-rt.PCR.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.VbrRtPeakCellRate = types.Int64Null()

					cv := v.Get("vbr-rt.PCR.vipVariableName")
					item.VbrRtPeakCellRateVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.VbrRtPeakCellRate = types.Int64Null()
					item.VbrRtPeakCellRateVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("vbr-rt.PCR.vipValue")
					item.VbrRtPeakCellRate = types.Int64Value(cv.Int())
					item.VbrRtPeakCellRateVariable = types.StringNull()
				}
			} else {
				item.VbrRtPeakCellRate = types.Int64Null()
				item.VbrRtPeakCellRateVariable = types.StringNull()
			}
			if cValue := v.Get("vbr-rt.ACR.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.VbrRtAverageCellRate = types.Int64Null()

					cv := v.Get("vbr-rt.ACR.vipVariableName")
					item.VbrRtAverageCellRateVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.VbrRtAverageCellRate = types.Int64Null()
					item.VbrRtAverageCellRateVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("vbr-rt.ACR.vipValue")
					item.VbrRtAverageCellRate = types.Int64Value(cv.Int())
					item.VbrRtAverageCellRateVariable = types.StringNull()
				}
			} else {
				item.VbrRtAverageCellRate = types.Int64Null()
				item.VbrRtAverageCellRateVariable = types.StringNull()
			}
			if cValue := v.Get("vbr-rt.Burst-cell-size.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.VbrRtMaximumBurstSize = types.Int64Null()

					cv := v.Get("vbr-rt.Burst-cell-size.vipVariableName")
					item.VbrRtMaximumBurstSizeVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.VbrRtMaximumBurstSize = types.Int64Null()
					item.VbrRtMaximumBurstSizeVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("vbr-rt.Burst-cell-size.vipValue")
					item.VbrRtMaximumBurstSize = types.Int64Value(cv.Int())
					item.VbrRtMaximumBurstSizeVariable = types.StringNull()
				}
			} else {
				item.VbrRtMaximumBurstSize = types.Int64Null()
				item.VbrRtMaximumBurstSizeVariable = types.StringNull()
			}
			if cValue := v.Get("encapsulation.aal5mux.ppp.dialer.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Dialer = types.BoolNull()

					cv := v.Get("encapsulation.aal5mux.ppp.dialer.vipVariableName")
					item.DialerVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Dialer = types.BoolNull()
					item.DialerVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("encapsulation.aal5mux.ppp.dialer.vipValue")
					item.Dialer = types.BoolValue(cv.Bool())
					item.DialerVariable = types.StringNull()
				}
			} else {
				item.Dialer = types.BoolNull()
				item.DialerVariable = types.StringNull()
			}
			if cValue := v.Get("encapsulation.aal5nlpid.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.EncapsulationAal5nlpid = types.BoolNull()

					cv := v.Get("encapsulation.aal5nlpid.vipVariableName")
					item.EncapsulationAal5nlpidVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.EncapsulationAal5nlpid = types.BoolNull()
					item.EncapsulationAal5nlpidVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("encapsulation.aal5nlpid.vipValue")
					item.EncapsulationAal5nlpid = types.BoolValue(cv.Bool())
					item.EncapsulationAal5nlpidVariable = types.StringNull()
				}
			} else {
				item.EncapsulationAal5nlpid = types.BoolNull()
				item.EncapsulationAal5nlpidVariable = types.StringNull()
			}
			if cValue := v.Get("encapsulation.aal5snap.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.EncapsulationAal5snap = types.BoolNull()

					cv := v.Get("encapsulation.aal5snap.vipVariableName")
					item.EncapsulationAal5snapVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.EncapsulationAal5snap = types.BoolNull()
					item.EncapsulationAal5snapVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("encapsulation.aal5snap.vipValue")
					item.EncapsulationAal5snap = types.BoolValue(cv.Bool())
					item.EncapsulationAal5snapVariable = types.StringNull()
				}
			} else {
				item.EncapsulationAal5snap = types.BoolNull()
				item.EncapsulationAal5snapVariable = types.StringNull()
			}
			if cValue := v.Get("dialer.pool-member.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.DialerPoolMember = types.Int64Null()

					cv := v.Get("dialer.pool-member.vipVariableName")
					item.DialerPoolMemberVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.DialerPoolMember = types.Int64Null()
					item.DialerPoolMemberVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("dialer.pool-member.vipValue")
					item.DialerPoolMember = types.Int64Value(cv.Int())
					item.DialerPoolMemberVariable = types.StringNull()
				}
			} else {
				item.DialerPoolMember = types.Int64Null()
				item.DialerPoolMemberVariable = types.StringNull()
			}
			data.Pvc = append(data.Pvc, item)
			return true
		})
	} else {
		if len(data.Pvc) > 0 {
			data.Pvc = []VPNInterfaceDSLPPPoAPvc{}
		}
	}
	if value := res.Get(path + "ppp.authentication.method.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PppAuthenticationProtocol = types.StringNull()

			v := res.Get(path + "ppp.authentication.method.vipVariableName")
			data.PppAuthenticationProtocolVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PppAuthenticationProtocol = types.StringNull()
			data.PppAuthenticationProtocolVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.authentication.method.vipValue")
			data.PppAuthenticationProtocol = types.StringValue(v.String())
			data.PppAuthenticationProtocolVariable = types.StringNull()
		}
	} else {
		data.PppAuthenticationProtocol = types.StringNull()
		data.PppAuthenticationProtocolVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.authentication.pap.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PppAuthenticationProtocolPap = types.BoolNull()

			v := res.Get(path + "ppp.authentication.pap.vipVariableName")
			data.PppAuthenticationProtocolPapVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PppAuthenticationProtocolPap = types.BoolNull()
			data.PppAuthenticationProtocolPapVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.authentication.pap.vipValue")
			data.PppAuthenticationProtocolPap = types.BoolValue(v.Bool())
			data.PppAuthenticationProtocolPapVariable = types.StringNull()
		}
	} else {
		data.PppAuthenticationProtocolPap = types.BoolNull()
		data.PppAuthenticationProtocolPapVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.authentication.callin.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.AuthenticationType = types.StringNull()

			v := res.Get(path + "ppp.authentication.callin.vipVariableName")
			data.AuthenticationTypeVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.AuthenticationType = types.StringNull()
			data.AuthenticationTypeVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.authentication.callin.vipValue")
			data.AuthenticationType = types.StringValue(v.String())
			data.AuthenticationTypeVariable = types.StringNull()
		}
	} else {
		data.AuthenticationType = types.StringNull()
		data.AuthenticationTypeVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.chap.hostname.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ChapHostname = types.StringNull()

			v := res.Get(path + "ppp.chap.hostname.vipVariableName")
			data.ChapHostnameVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ChapHostname = types.StringNull()
			data.ChapHostnameVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.chap.hostname.vipValue")
			data.ChapHostname = types.StringValue(v.String())
			data.ChapHostnameVariable = types.StringNull()
		}
	} else {
		data.ChapHostname = types.StringNull()
		data.ChapHostnameVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.chap.password.ppp-auth-password.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ChapPppAuthPassword = types.StringNull()

			v := res.Get(path + "ppp.chap.password.ppp-auth-password.vipVariableName")
			data.ChapPppAuthPasswordVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ChapPppAuthPassword = types.StringNull()
			data.ChapPppAuthPasswordVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.chap.password.ppp-auth-password.vipValue")
			data.ChapPppAuthPassword = types.StringValue(v.String())
			data.ChapPppAuthPasswordVariable = types.StringNull()
		}
	} else {
		data.ChapPppAuthPassword = types.StringNull()
		data.ChapPppAuthPasswordVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.pap.sent-username.username.username-string.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PapUsername = types.StringNull()

			v := res.Get(path + "ppp.pap.sent-username.username.username-string.vipVariableName")
			data.PapUsernameVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PapUsername = types.StringNull()
			data.PapUsernameVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.pap.sent-username.username.username-string.vipValue")
			data.PapUsername = types.StringValue(v.String())
			data.PapUsernameVariable = types.StringNull()
		}
	} else {
		data.PapUsername = types.StringNull()
		data.PapUsernameVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.pap.sent-username.username.password.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PapPassword = types.BoolNull()

		} else if value.String() == "ignore" {
			data.PapPassword = types.BoolNull()

		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.pap.sent-username.username.password.vipValue")
			data.PapPassword = types.BoolValue(v.Bool())

		}
	} else {
		data.PapPassword = types.BoolNull()

	}
	if value := res.Get(path + "ppp.pap.sent-username.username.ppp-auth-password.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PapPppAuthPassword = types.StringNull()

			v := res.Get(path + "ppp.pap.sent-username.username.ppp-auth-password.vipVariableName")
			data.PapPppAuthPasswordVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PapPppAuthPassword = types.StringNull()
			data.PapPppAuthPasswordVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.pap.sent-username.username.ppp-auth-password.vipValue")
			data.PapPppAuthPassword = types.StringValue(v.String())
			data.PapPppAuthPasswordVariable = types.StringNull()
		}
	} else {
		data.PapPppAuthPassword = types.StringNull()
		data.PapPppAuthPasswordVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.enable-core-region.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.EnableCoreRegion = types.BoolNull()

			v := res.Get(path + "tunnel-interface.enable-core-region.vipVariableName")
			data.EnableCoreRegionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.EnableCoreRegion = types.BoolNull()
			data.EnableCoreRegionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.enable-core-region.vipValue")
			data.EnableCoreRegion = types.BoolValue(v.Bool())
			data.EnableCoreRegionVariable = types.StringNull()
		}
	} else {
		data.EnableCoreRegion = types.BoolNull()
		data.EnableCoreRegionVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.core-region.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.CoreRegion = types.StringNull()

			v := res.Get(path + "tunnel-interface.core-region.vipVariableName")
			data.CoreRegionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.CoreRegion = types.StringNull()
			data.CoreRegionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.core-region.vipValue")
			data.CoreRegion = types.StringValue(v.String())
			data.CoreRegionVariable = types.StringNull()
		}
	} else {
		data.CoreRegion = types.StringNull()
		data.CoreRegionVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.secondary-region.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SecondaryRegion = types.StringNull()

			v := res.Get(path + "tunnel-interface.secondary-region.vipVariableName")
			data.SecondaryRegionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SecondaryRegion = types.StringNull()
			data.SecondaryRegionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.secondary-region.vipValue")
			data.SecondaryRegion = types.StringValue(v.String())
			data.SecondaryRegionVariable = types.StringNull()
		}
	} else {
		data.SecondaryRegion = types.StringNull()
		data.SecondaryRegionVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.encapsulation.vipValue"); len(value.Array()) > 0 {
		data.Encapsulation = make([]VPNInterfaceDSLPPPoAEncapsulation, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceDSLPPPoAEncapsulation{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("encap.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.EncapsulationType = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.EncapsulationType = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("encap.vipValue")
					item.EncapsulationType = types.StringValue(cv.String())

				}
			} else {
				item.EncapsulationType = types.StringNull()

			}
			if cValue := v.Get("preference.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Preference = types.Int64Null()

					cv := v.Get("preference.vipVariableName")
					item.PreferenceVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Preference = types.Int64Null()
					item.PreferenceVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("preference.vipValue")
					item.Preference = types.Int64Value(cv.Int())
					item.PreferenceVariable = types.StringNull()
				}
			} else {
				item.Preference = types.Int64Null()
				item.PreferenceVariable = types.StringNull()
			}
			if cValue := v.Get("weight.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Weight = types.Int64Null()

					cv := v.Get("weight.vipVariableName")
					item.WeightVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Weight = types.Int64Null()
					item.WeightVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("weight.vipValue")
					item.Weight = types.Int64Value(cv.Int())
					item.WeightVariable = types.StringNull()
				}
			} else {
				item.Weight = types.Int64Null()
				item.WeightVariable = types.StringNull()
			}
			data.Encapsulation = append(data.Encapsulation, item)
			return true
		})
	} else {
		if len(data.Encapsulation) > 0 {
			data.Encapsulation = []VPNInterfaceDSLPPPoAEncapsulation{}
		}
	}
	if value := res.Get(path + "tunnel-interface.group.vipType"); len(value.Array()) > 0 {
		if value.String() == "variableName" {
			data.Groups = types.SetNull(types.Int64Type)

			v := res.Get(path + "tunnel-interface.group.vipVariableName")
			data.GroupsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Groups = types.SetNull(types.Int64Type)
			data.GroupsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.group.vipValue")
			data.Groups = helpers.GetInt64Set(v.Array())
			data.GroupsVariable = types.StringNull()
		}
	} else {
		data.Groups = types.SetNull(types.Int64Type)
		data.GroupsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.border.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Border = types.BoolNull()

			v := res.Get(path + "tunnel-interface.border.vipVariableName")
			data.BorderVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Border = types.BoolNull()
			data.BorderVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.border.vipValue")
			data.Border = types.BoolValue(v.Bool())
			data.BorderVariable = types.StringNull()
		}
	} else {
		data.Border = types.BoolNull()
		data.BorderVariable = types.StringNull()
	}
	if value := res.Get(path + "per-tunnel-qos.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PerTunnelQos = types.BoolNull()

			v := res.Get(path + "per-tunnel-qos.vipVariableName")
			data.PerTunnelQosVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PerTunnelQos = types.BoolNull()
			data.PerTunnelQosVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "per-tunnel-qos.vipValue")
			data.PerTunnelQos = types.BoolValue(v.Bool())
			data.PerTunnelQosVariable = types.StringNull()
		}
	} else {
		data.PerTunnelQos = types.BoolNull()
		data.PerTunnelQosVariable = types.StringNull()
	}
	if value := res.Get(path + "per-tunnel-qos-aggregator.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PerTunnelQosAggregator = types.BoolNull()

			v := res.Get(path + "per-tunnel-qos-aggregator.vipVariableName")
			data.PerTunnelQosAggregatorVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PerTunnelQosAggregator = types.BoolNull()
			data.PerTunnelQosAggregatorVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "per-tunnel-qos-aggregator.vipValue")
			data.PerTunnelQosAggregator = types.BoolValue(v.Bool())
			data.PerTunnelQosAggregatorVariable = types.StringNull()
		}
	} else {
		data.PerTunnelQosAggregator = types.BoolNull()
		data.PerTunnelQosAggregatorVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.color.value.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Color = types.StringNull()

			v := res.Get(path + "tunnel-interface.color.value.vipVariableName")
			data.ColorVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Color = types.StringNull()
			data.ColorVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.color.value.vipValue")
			data.Color = types.StringValue(v.String())
			data.ColorVariable = types.StringNull()
		}
	} else {
		data.Color = types.StringNull()
		data.ColorVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.last-resort-circuit.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.LastResortCircuit = types.BoolNull()

			v := res.Get(path + "tunnel-interface.last-resort-circuit.vipVariableName")
			data.LastResortCircuitVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.LastResortCircuit = types.BoolNull()
			data.LastResortCircuitVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.last-resort-circuit.vipValue")
			data.LastResortCircuit = types.BoolValue(v.Bool())
			data.LastResortCircuitVariable = types.StringNull()
		}
	} else {
		data.LastResortCircuit = types.BoolNull()
		data.LastResortCircuitVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.low-bandwidth-link.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.LowBandwidthLink = types.BoolNull()

			v := res.Get(path + "tunnel-interface.low-bandwidth-link.vipVariableName")
			data.LowBandwidthLinkVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.LowBandwidthLink = types.BoolNull()
			data.LowBandwidthLinkVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.low-bandwidth-link.vipValue")
			data.LowBandwidthLink = types.BoolValue(v.Bool())
			data.LowBandwidthLinkVariable = types.StringNull()
		}
	} else {
		data.LowBandwidthLink = types.BoolNull()
		data.LowBandwidthLinkVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.tunnel-tcp-mss-adjust.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TunnelTcpMss = types.Int64Null()

			v := res.Get(path + "tunnel-interface.tunnel-tcp-mss-adjust.vipVariableName")
			data.TunnelTcpMssVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TunnelTcpMss = types.Int64Null()
			data.TunnelTcpMssVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.tunnel-tcp-mss-adjust.vipValue")
			data.TunnelTcpMss = types.Int64Value(v.Int())
			data.TunnelTcpMssVariable = types.StringNull()
		}
	} else {
		data.TunnelTcpMss = types.Int64Null()
		data.TunnelTcpMssVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.clear-dont-fragment.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ClearDontFragment = types.BoolNull()

			v := res.Get(path + "tunnel-interface.clear-dont-fragment.vipVariableName")
			data.ClearDontFragmentVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ClearDontFragment = types.BoolNull()
			data.ClearDontFragmentVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.clear-dont-fragment.vipValue")
			data.ClearDontFragment = types.BoolValue(v.Bool())
			data.ClearDontFragmentVariable = types.StringNull()
		}
	} else {
		data.ClearDontFragment = types.BoolNull()
		data.ClearDontFragmentVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.network-broadcast.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.NetworkBroadcast1 = types.BoolNull()

			v := res.Get(path + "tunnel-interface.network-broadcast.vipVariableName")
			data.NetworkBroadcast1Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.NetworkBroadcast1 = types.BoolNull()
			data.NetworkBroadcast1Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.network-broadcast.vipValue")
			data.NetworkBroadcast1 = types.BoolValue(v.Bool())
			data.NetworkBroadcast1Variable = types.StringNull()
		}
	} else {
		data.NetworkBroadcast1 = types.BoolNull()
		data.NetworkBroadcast1Variable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.max-control-connections.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.MaxControlConnections = types.Int64Null()

			v := res.Get(path + "tunnel-interface.max-control-connections.vipVariableName")
			data.MaxControlConnectionsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.MaxControlConnections = types.Int64Null()
			data.MaxControlConnectionsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.max-control-connections.vipValue")
			data.MaxControlConnections = types.Int64Value(v.Int())
			data.MaxControlConnectionsVariable = types.StringNull()
		}
	} else {
		data.MaxControlConnections = types.Int64Null()
		data.MaxControlConnectionsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.control-connections.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ControlConnections = types.BoolNull()

			v := res.Get(path + "tunnel-interface.control-connections.vipVariableName")
			data.ControlConnectionsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ControlConnections = types.BoolNull()
			data.ControlConnectionsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.control-connections.vipValue")
			data.ControlConnections = types.BoolValue(v.Bool())
			data.ControlConnectionsVariable = types.StringNull()
		}
	} else {
		data.ControlConnections = types.BoolNull()
		data.ControlConnectionsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.vbond-as-stun-server.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.VbondAsStunServer = types.BoolNull()

			v := res.Get(path + "tunnel-interface.vbond-as-stun-server.vipVariableName")
			data.VbondAsStunServerVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.VbondAsStunServer = types.BoolNull()
			data.VbondAsStunServerVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.vbond-as-stun-server.vipValue")
			data.VbondAsStunServer = types.BoolValue(v.Bool())
			data.VbondAsStunServerVariable = types.StringNull()
		}
	} else {
		data.VbondAsStunServer = types.BoolNull()
		data.VbondAsStunServerVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.exclude-controller-group-list.vipType"); len(value.Array()) > 0 {
		if value.String() == "variableName" {
			data.ExcludeControllerGroupList = types.SetNull(types.Int64Type)

			v := res.Get(path + "tunnel-interface.exclude-controller-group-list.vipVariableName")
			data.ExcludeControllerGroupListVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ExcludeControllerGroupList = types.SetNull(types.Int64Type)
			data.ExcludeControllerGroupListVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.exclude-controller-group-list.vipValue")
			data.ExcludeControllerGroupList = helpers.GetInt64Set(v.Array())
			data.ExcludeControllerGroupListVariable = types.StringNull()
		}
	} else {
		data.ExcludeControllerGroupList = types.SetNull(types.Int64Type)
		data.ExcludeControllerGroupListVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.vmanage-connection-preference.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.VmanageConnectionPreference = types.Int64Null()

			v := res.Get(path + "tunnel-interface.vmanage-connection-preference.vipVariableName")
			data.VmanageConnectionPreferenceVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.VmanageConnectionPreference = types.Int64Null()
			data.VmanageConnectionPreferenceVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.vmanage-connection-preference.vipValue")
			data.VmanageConnectionPreference = types.Int64Value(v.Int())
			data.VmanageConnectionPreferenceVariable = types.StringNull()
		}
	} else {
		data.VmanageConnectionPreference = types.Int64Null()
		data.VmanageConnectionPreferenceVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.port-hop.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PortHop = types.BoolNull()

			v := res.Get(path + "tunnel-interface.port-hop.vipVariableName")
			data.PortHopVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PortHop = types.BoolNull()
			data.PortHopVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.port-hop.vipValue")
			data.PortHop = types.BoolValue(v.Bool())
			data.PortHopVariable = types.StringNull()
		}
	} else {
		data.PortHop = types.BoolNull()
		data.PortHopVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.color.restrict.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Restrict = types.BoolNull()

			v := res.Get(path + "tunnel-interface.color.restrict.vipVariableName")
			data.RestrictVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Restrict = types.BoolNull()
			data.RestrictVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.color.restrict.vipValue")
			data.Restrict = types.BoolValue(v.Bool())
			data.RestrictVariable = types.StringNull()
		}
	} else {
		data.Restrict = types.BoolNull()
		data.RestrictVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.carrier.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Carrier = types.StringNull()

			v := res.Get(path + "tunnel-interface.carrier.vipVariableName")
			data.CarrierVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Carrier = types.StringNull()
			data.CarrierVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.carrier.vipValue")
			data.Carrier = types.StringValue(v.String())
			data.CarrierVariable = types.StringNull()
		}
	} else {
		data.Carrier = types.StringNull()
		data.CarrierVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.nat-refresh-interval.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.NatRefreshInterval = types.Int64Null()

			v := res.Get(path + "tunnel-interface.nat-refresh-interval.vipVariableName")
			data.NatRefreshIntervalVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.NatRefreshInterval = types.Int64Null()
			data.NatRefreshIntervalVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.nat-refresh-interval.vipValue")
			data.NatRefreshInterval = types.Int64Value(v.Int())
			data.NatRefreshIntervalVariable = types.StringNull()
		}
	} else {
		data.NatRefreshInterval = types.Int64Null()
		data.NatRefreshIntervalVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.hello-interval.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.HelloInterval = types.Int64Null()

			v := res.Get(path + "tunnel-interface.hello-interval.vipVariableName")
			data.HelloIntervalVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.HelloInterval = types.Int64Null()
			data.HelloIntervalVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.hello-interval.vipValue")
			data.HelloInterval = types.Int64Value(v.Int())
			data.HelloIntervalVariable = types.StringNull()
		}
	} else {
		data.HelloInterval = types.Int64Null()
		data.HelloIntervalVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.hello-tolerance.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.HelloTolerance = types.Int64Null()

			v := res.Get(path + "tunnel-interface.hello-tolerance.vipVariableName")
			data.HelloToleranceVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.HelloTolerance = types.Int64Null()
			data.HelloToleranceVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.hello-tolerance.vipValue")
			data.HelloTolerance = types.Int64Value(v.Int())
			data.HelloToleranceVariable = types.StringNull()
		}
	} else {
		data.HelloTolerance = types.Int64Null()
		data.HelloToleranceVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.bind.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.BindLoopbackTunnel = types.StringNull()

			v := res.Get(path + "tunnel-interface.bind.vipVariableName")
			data.BindLoopbackTunnelVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.BindLoopbackTunnel = types.StringNull()
			data.BindLoopbackTunnelVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.bind.vipValue")
			data.BindLoopbackTunnel = types.StringValue(v.String())
			data.BindLoopbackTunnelVariable = types.StringNull()
		}
	} else {
		data.BindLoopbackTunnel = types.StringNull()
		data.BindLoopbackTunnelVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.all.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.All = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.all.vipVariableName")
			data.AllVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.All = types.BoolNull()
			data.AllVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.all.vipValue")
			data.All = types.BoolValue(v.Bool())
			data.AllVariable = types.StringNull()
		}
	} else {
		data.All = types.BoolNull()
		data.AllVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.network-broadcast.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.NetworkBroadcast2 = types.BoolNull()

			v := res.Get(path + "tunnel-interface.network-broadcast.vipVariableName")
			data.NetworkBroadcast2Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.NetworkBroadcast2 = types.BoolNull()
			data.NetworkBroadcast2Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.network-broadcast.vipValue")
			data.NetworkBroadcast2 = types.BoolValue(v.Bool())
			data.NetworkBroadcast2Variable = types.StringNull()
		}
	} else {
		data.NetworkBroadcast2 = types.BoolNull()
		data.NetworkBroadcast2Variable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.bgp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Bgp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.bgp.vipVariableName")
			data.BgpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Bgp = types.BoolNull()
			data.BgpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.bgp.vipValue")
			data.Bgp = types.BoolValue(v.Bool())
			data.BgpVariable = types.StringNull()
		}
	} else {
		data.Bgp = types.BoolNull()
		data.BgpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.dhcp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Dhcp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.dhcp.vipVariableName")
			data.DhcpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Dhcp = types.BoolNull()
			data.DhcpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.dhcp.vipValue")
			data.Dhcp = types.BoolValue(v.Bool())
			data.DhcpVariable = types.StringNull()
		}
	} else {
		data.Dhcp = types.BoolNull()
		data.DhcpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.dns.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Dns = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.dns.vipVariableName")
			data.DnsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Dns = types.BoolNull()
			data.DnsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.dns.vipValue")
			data.Dns = types.BoolValue(v.Bool())
			data.DnsVariable = types.StringNull()
		}
	} else {
		data.Dns = types.BoolNull()
		data.DnsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.icmp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Icmp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.icmp.vipVariableName")
			data.IcmpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Icmp = types.BoolNull()
			data.IcmpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.icmp.vipValue")
			data.Icmp = types.BoolValue(v.Bool())
			data.IcmpVariable = types.StringNull()
		}
	} else {
		data.Icmp = types.BoolNull()
		data.IcmpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.sshd.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ssh = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.sshd.vipVariableName")
			data.SshVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ssh = types.BoolNull()
			data.SshVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.sshd.vipValue")
			data.Ssh = types.BoolValue(v.Bool())
			data.SshVariable = types.StringNull()
		}
	} else {
		data.Ssh = types.BoolNull()
		data.SshVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.netconf.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Netconf = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.netconf.vipVariableName")
			data.NetconfVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Netconf = types.BoolNull()
			data.NetconfVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.netconf.vipValue")
			data.Netconf = types.BoolValue(v.Bool())
			data.NetconfVariable = types.StringNull()
		}
	} else {
		data.Netconf = types.BoolNull()
		data.NetconfVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.ospf.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ospf = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.ospf.vipVariableName")
			data.OspfVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ospf = types.BoolNull()
			data.OspfVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.ospf.vipValue")
			data.Ospf = types.BoolValue(v.Bool())
			data.OspfVariable = types.StringNull()
		}
	} else {
		data.Ospf = types.BoolNull()
		data.OspfVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.stun.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Stun = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.stun.vipVariableName")
			data.StunVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Stun = types.BoolNull()
			data.StunVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.stun.vipValue")
			data.Stun = types.BoolValue(v.Bool())
			data.StunVariable = types.StringNull()
		}
	} else {
		data.Stun = types.BoolNull()
		data.StunVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.snmp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Snmp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.snmp.vipVariableName")
			data.SnmpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Snmp = types.BoolNull()
			data.SnmpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.snmp.vipValue")
			data.Snmp = types.BoolValue(v.Bool())
			data.SnmpVariable = types.StringNull()
		}
	} else {
		data.Snmp = types.BoolNull()
		data.SnmpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.https.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Https = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.https.vipVariableName")
			data.HttpsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Https = types.BoolNull()
			data.HttpsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.https.vipValue")
			data.Https = types.BoolValue(v.Bool())
			data.HttpsVariable = types.StringNull()
		}
	} else {
		data.Https = types.BoolNull()
		data.HttpsVariable = types.StringNull()
	}
	if value := res.Get(path + "nat.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Nat = types.BoolNull()

			v := res.Get(path + "nat.vipVariableName")
			data.NatVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Nat = types.BoolNull()
			data.NatVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "nat.vipValue")
			data.Nat = types.BoolValue(v.Bool())
			data.NatVariable = types.StringNull()
		}
	} else {
		data.Nat = types.BoolNull()
		data.NatVariable = types.StringNull()
	}
	if value := res.Get(path + "nat.refresh.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.RefreshMode = types.StringNull()

			v := res.Get(path + "nat.refresh.vipVariableName")
			data.RefreshModeVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.RefreshMode = types.StringNull()
			data.RefreshModeVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "nat.refresh.vipValue")
			data.RefreshMode = types.StringValue(v.String())
			data.RefreshModeVariable = types.StringNull()
		}
	} else {
		data.RefreshMode = types.StringNull()
		data.RefreshModeVariable = types.StringNull()
	}
	if value := res.Get(path + "nat.udp-timeout.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.UdpTimeout = types.Int64Null()

			v := res.Get(path + "nat.udp-timeout.vipVariableName")
			data.UdpTimeoutVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.UdpTimeout = types.Int64Null()
			data.UdpTimeoutVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "nat.udp-timeout.vipValue")
			data.UdpTimeout = types.Int64Value(v.Int())
			data.UdpTimeoutVariable = types.StringNull()
		}
	} else {
		data.UdpTimeout = types.Int64Null()
		data.UdpTimeoutVariable = types.StringNull()
	}
	if value := res.Get(path + "nat.tcp-timeout.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TcpTimeout = types.Int64Null()

			v := res.Get(path + "nat.tcp-timeout.vipVariableName")
			data.TcpTimeoutVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TcpTimeout = types.Int64Null()
			data.TcpTimeoutVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "nat.tcp-timeout.vipValue")
			data.TcpTimeout = types.Int64Value(v.Int())
			data.TcpTimeoutVariable = types.StringNull()
		}
	} else {
		data.TcpTimeout = types.Int64Null()
		data.TcpTimeoutVariable = types.StringNull()
	}
	if value := res.Get(path + "nat.block-icmp-error.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.BlockIcmpError = types.BoolNull()

			v := res.Get(path + "nat.block-icmp-error.vipVariableName")
			data.BlockIcmpErrorVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.BlockIcmpError = types.BoolNull()
			data.BlockIcmpErrorVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "nat.block-icmp-error.vipValue")
			data.BlockIcmpError = types.BoolValue(v.Bool())
			data.BlockIcmpErrorVariable = types.StringNull()
		}
	} else {
		data.BlockIcmpError = types.BoolNull()
		data.BlockIcmpErrorVariable = types.StringNull()
	}
	if value := res.Get(path + "nat.respond-to-ping.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.RespondToPing = types.BoolNull()

			v := res.Get(path + "nat.respond-to-ping.vipVariableName")
			data.RespondToPingVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.RespondToPing = types.BoolNull()
			data.RespondToPingVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "nat.respond-to-ping.vipValue")
			data.RespondToPing = types.BoolValue(v.Bool())
			data.RespondToPingVariable = types.StringNull()
		}
	} else {
		data.RespondToPing = types.BoolNull()
		data.RespondToPingVariable = types.StringNull()
	}
	if value := res.Get(path + "nat.port-forward.vipValue"); len(value.Array()) > 0 {
		data.PortForward = make([]VPNInterfaceDSLPPPoAPortForward, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceDSLPPPoAPortForward{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("port-start.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.PortStartRange = types.Int64Null()

				} else if cValue.String() == "ignore" {
					item.PortStartRange = types.Int64Null()

				} else if cValue.String() == "constant" {
					cv := v.Get("port-start.vipValue")
					item.PortStartRange = types.Int64Value(cv.Int())

				}
			} else {
				item.PortStartRange = types.Int64Null()

			}
			if cValue := v.Get("port-end.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.PortEndRange = types.Int64Null()

				} else if cValue.String() == "ignore" {
					item.PortEndRange = types.Int64Null()

				} else if cValue.String() == "constant" {
					cv := v.Get("port-end.vipValue")
					item.PortEndRange = types.Int64Value(cv.Int())

				}
			} else {
				item.PortEndRange = types.Int64Null()

			}
			if cValue := v.Get("proto.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Protocol = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.Protocol = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("proto.vipValue")
					item.Protocol = types.StringValue(cv.String())

				}
			} else {
				item.Protocol = types.StringNull()

			}
			if cValue := v.Get("private-vpn.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.PrivateVpn = types.Int64Null()

					cv := v.Get("private-vpn.vipVariableName")
					item.PrivateVpnVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.PrivateVpn = types.Int64Null()
					item.PrivateVpnVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("private-vpn.vipValue")
					item.PrivateVpn = types.Int64Value(cv.Int())
					item.PrivateVpnVariable = types.StringNull()
				}
			} else {
				item.PrivateVpn = types.Int64Null()
				item.PrivateVpnVariable = types.StringNull()
			}
			if cValue := v.Get("private-ip-address.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.PrivateIpAddress = types.StringNull()

					cv := v.Get("private-ip-address.vipVariableName")
					item.PrivateIpAddressVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.PrivateIpAddress = types.StringNull()
					item.PrivateIpAddressVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("private-ip-address.vipValue")
					item.PrivateIpAddress = types.StringValue(cv.String())
					item.PrivateIpAddressVariable = types.StringNull()
				}
			} else {
				item.PrivateIpAddress = types.StringNull()
				item.PrivateIpAddressVariable = types.StringNull()
			}
			data.PortForward = append(data.PortForward, item)
			return true
		})
	} else {
		if len(data.PortForward) > 0 {
			data.PortForward = []VPNInterfaceDSLPPPoAPortForward{}
		}
	}
	if value := res.Get(path + "qos-adaptive.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.AdaptiveQos = types.BoolNull()

		} else if value.String() == "ignore" {
			data.AdaptiveQos = types.BoolNull()

		} else if value.String() == "constant" {
			v := res.Get(path + "qos-adaptive.vipValue")
			data.AdaptiveQos = types.BoolValue(v.Bool())

		}
	} else {
		data.AdaptiveQos = types.BoolNull()

	}
	if value := res.Get(path + "qos-adaptive.period.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.AdaptPeriod = types.Int64Null()

			v := res.Get(path + "qos-adaptive.period.vipVariableName")
			data.AdaptPeriodVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.AdaptPeriod = types.Int64Null()
			data.AdaptPeriodVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-adaptive.period.vipValue")
			data.AdaptPeriod = types.Int64Value(v.Int())
			data.AdaptPeriodVariable = types.StringNull()
		}
	} else {
		data.AdaptPeriod = types.Int64Null()
		data.AdaptPeriodVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-adaptive.downstream.bandwidth-down.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ShapingRateDownstreamDefault = types.Int64Null()

			v := res.Get(path + "qos-adaptive.downstream.bandwidth-down.vipVariableName")
			data.ShapingRateDownstreamDefaultVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ShapingRateDownstreamDefault = types.Int64Null()
			data.ShapingRateDownstreamDefaultVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-adaptive.downstream.bandwidth-down.vipValue")
			data.ShapingRateDownstreamDefault = types.Int64Value(v.Int())
			data.ShapingRateDownstreamDefaultVariable = types.StringNull()
		}
	} else {
		data.ShapingRateDownstreamDefault = types.Int64Null()
		data.ShapingRateDownstreamDefaultVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-adaptive.downstream.range.dmin.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ShapingRateDownstreamMin = types.Int64Null()

			v := res.Get(path + "qos-adaptive.downstream.range.dmin.vipVariableName")
			data.ShapingRateDownstreamMinVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ShapingRateDownstreamMin = types.Int64Null()
			data.ShapingRateDownstreamMinVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-adaptive.downstream.range.dmin.vipValue")
			data.ShapingRateDownstreamMin = types.Int64Value(v.Int())
			data.ShapingRateDownstreamMinVariable = types.StringNull()
		}
	} else {
		data.ShapingRateDownstreamMin = types.Int64Null()
		data.ShapingRateDownstreamMinVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-adaptive.downstream.range.dmax.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ShapingRateDownstreamMax = types.Int64Null()

			v := res.Get(path + "qos-adaptive.downstream.range.dmax.vipVariableName")
			data.ShapingRateDownstreamMaxVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ShapingRateDownstreamMax = types.Int64Null()
			data.ShapingRateDownstreamMaxVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-adaptive.downstream.range.dmax.vipValue")
			data.ShapingRateDownstreamMax = types.Int64Value(v.Int())
			data.ShapingRateDownstreamMaxVariable = types.StringNull()
		}
	} else {
		data.ShapingRateDownstreamMax = types.Int64Null()
		data.ShapingRateDownstreamMaxVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-adaptive.upstream.bandwidth-up.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ShapingRateUpstreamDefault = types.Int64Null()

			v := res.Get(path + "qos-adaptive.upstream.bandwidth-up.vipVariableName")
			data.ShapingRateUpstreamDefaultVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ShapingRateUpstreamDefault = types.Int64Null()
			data.ShapingRateUpstreamDefaultVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-adaptive.upstream.bandwidth-up.vipValue")
			data.ShapingRateUpstreamDefault = types.Int64Value(v.Int())
			data.ShapingRateUpstreamDefaultVariable = types.StringNull()
		}
	} else {
		data.ShapingRateUpstreamDefault = types.Int64Null()
		data.ShapingRateUpstreamDefaultVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-adaptive.upstream.range.umin.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ShapingRateUpstreamMin = types.Int64Null()

			v := res.Get(path + "qos-adaptive.upstream.range.umin.vipVariableName")
			data.ShapingRateUpstreamMinVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ShapingRateUpstreamMin = types.Int64Null()
			data.ShapingRateUpstreamMinVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-adaptive.upstream.range.umin.vipValue")
			data.ShapingRateUpstreamMin = types.Int64Value(v.Int())
			data.ShapingRateUpstreamMinVariable = types.StringNull()
		}
	} else {
		data.ShapingRateUpstreamMin = types.Int64Null()
		data.ShapingRateUpstreamMinVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-adaptive.upstream.range.umax.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ShapingRateUpstreamMax = types.Int64Null()

			v := res.Get(path + "qos-adaptive.upstream.range.umax.vipVariableName")
			data.ShapingRateUpstreamMaxVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ShapingRateUpstreamMax = types.Int64Null()
			data.ShapingRateUpstreamMaxVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-adaptive.upstream.range.umax.vipValue")
			data.ShapingRateUpstreamMax = types.Int64Value(v.Int())
			data.ShapingRateUpstreamMaxVariable = types.StringNull()
		}
	} else {
		data.ShapingRateUpstreamMax = types.Int64Null()
		data.ShapingRateUpstreamMaxVariable = types.StringNull()
	}
	if value := res.Get(path + "shaping-rate.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ShapingRate = types.Int64Null()

			v := res.Get(path + "shaping-rate.vipVariableName")
			data.ShapingRateVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ShapingRate = types.Int64Null()
			data.ShapingRateVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "shaping-rate.vipValue")
			data.ShapingRate = types.Int64Value(v.Int())
			data.ShapingRateVariable = types.StringNull()
		}
	} else {
		data.ShapingRate = types.Int64Null()
		data.ShapingRateVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-map.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.QosMap = types.StringNull()

			v := res.Get(path + "qos-map.vipVariableName")
			data.QosMapVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.QosMap = types.StringNull()
			data.QosMapVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-map.vipValue")
			data.QosMap = types.StringValue(v.String())
			data.QosMapVariable = types.StringNull()
		}
	} else {
		data.QosMap = types.StringNull()
		data.QosMapVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-map-vpn.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.VpnQosMap = types.StringNull()

			v := res.Get(path + "qos-map-vpn.vipVariableName")
			data.VpnQosMapVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.VpnQosMap = types.StringNull()
			data.VpnQosMapVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-map-vpn.vipValue")
			data.VpnQosMap = types.StringValue(v.String())
			data.VpnQosMapVariable = types.StringNull()
		}
	} else {
		data.VpnQosMap = types.StringNull()
		data.VpnQosMapVariable = types.StringNull()
	}
	if value := res.Get(path + "bandwidth-upstream.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.BandwidthUpstream = types.Int64Null()

			v := res.Get(path + "bandwidth-upstream.vipVariableName")
			data.BandwidthUpstreamVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.BandwidthUpstream = types.Int64Null()
			data.BandwidthUpstreamVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "bandwidth-upstream.vipValue")
			data.BandwidthUpstream = types.Int64Value(v.Int())
			data.BandwidthUpstreamVariable = types.StringNull()
		}
	} else {
		data.BandwidthUpstream = types.Int64Null()
		data.BandwidthUpstreamVariable = types.StringNull()
	}
	if value := res.Get(path + "bandwidth-downstream.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.BandwidthDownstream = types.Int64Null()

			v := res.Get(path + "bandwidth-downstream.vipVariableName")
			data.BandwidthDownstreamVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.BandwidthDownstream = types.Int64Null()
			data.BandwidthDownstreamVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "bandwidth-downstream.vipValue")
			data.BandwidthDownstream = types.Int64Value(v.Int())
			data.BandwidthDownstreamVariable = types.StringNull()
		}
	} else {
		data.BandwidthDownstream = types.Int64Null()
		data.BandwidthDownstreamVariable = types.StringNull()
	}
	if value := res.Get(path + "rewrite-rule.rule-name.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.WriteRule = types.StringNull()

			v := res.Get(path + "rewrite-rule.rule-name.vipVariableName")
			data.WriteRuleVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.WriteRule = types.StringNull()
			data.WriteRuleVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "rewrite-rule.rule-name.vipValue")
			data.WriteRule = types.StringValue(v.String())
			data.WriteRuleVariable = types.StringNull()
		}
	} else {
		data.WriteRule = types.StringNull()
		data.WriteRuleVariable = types.StringNull()
	}
	if value := res.Get(path + "access-list.vipValue"); len(value.Array()) > 0 {
		data.AccessList = make([]VPNInterfaceDSLPPPoAAccessList, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceDSLPPPoAAccessList{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("direction.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("direction.vipValue")
					item.Direction = types.StringValue(cv.String())

				}
			} else {
				item.Direction = types.StringNull()

			}
			if cValue := v.Get("acl-name.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.AclName = types.StringNull()

					cv := v.Get("acl-name.vipVariableName")
					item.AclNameVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.AclName = types.StringNull()
					item.AclNameVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("acl-name.vipValue")
					item.AclName = types.StringValue(cv.String())
					item.AclNameVariable = types.StringNull()
				}
			} else {
				item.AclName = types.StringNull()
				item.AclNameVariable = types.StringNull()
			}
			data.AccessList = append(data.AccessList, item)
			return true
		})
	} else {
		if len(data.AccessList) > 0 {
			data.AccessList = []VPNInterfaceDSLPPPoAAccessList{}
		}
	}
	if value := res.Get(path + "policer.vipValue"); len(value.Array()) > 0 {
		data.Policer = make([]VPNInterfaceDSLPPPoAPolicer, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceDSLPPPoAPolicer{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("direction.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("direction.vipValue")
					item.Direction = types.StringValue(cv.String())

				}
			} else {
				item.Direction = types.StringNull()

			}
			if cValue := v.Get("policer-name.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.PolicerName = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.PolicerName = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("policer-name.vipValue")
					item.PolicerName = types.StringValue(cv.String())

				}
			} else {
				item.PolicerName = types.StringNull()

			}
			data.Policer = append(data.Policer, item)
			return true
		})
	} else {
		if len(data.Policer) > 0 {
			data.Policer = []VPNInterfaceDSLPPPoAPolicer{}
		}
	}
	if value := res.Get(path + "mtu.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.IpMtu = types.Int64Null()

			v := res.Get(path + "mtu.vipVariableName")
			data.IpMtuVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.IpMtu = types.Int64Null()
			data.IpMtuVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "mtu.vipValue")
			data.IpMtu = types.Int64Value(v.Int())
			data.IpMtuVariable = types.StringNull()
		}
	} else {
		data.IpMtu = types.Int64Null()
		data.IpMtuVariable = types.StringNull()
	}
	if value := res.Get(path + "tcp-mss-adjust.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TcpMss = types.Int64Null()

			v := res.Get(path + "tcp-mss-adjust.vipVariableName")
			data.TcpMssVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TcpMss = types.Int64Null()
			data.TcpMssVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tcp-mss-adjust.vipValue")
			data.TcpMss = types.Int64Value(v.Int())
			data.TcpMssVariable = types.StringNull()
		}
	} else {
		data.TcpMss = types.Int64Null()
		data.TcpMssVariable = types.StringNull()
	}
	if value := res.Get(path + "tloc-extension.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TlocExtension = types.StringNull()

			v := res.Get(path + "tloc-extension.vipVariableName")
			data.TlocExtensionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TlocExtension = types.StringNull()
			data.TlocExtensionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tloc-extension.vipValue")
			data.TlocExtension = types.StringValue(v.String())
			data.TlocExtensionVariable = types.StringNull()
		}
	} else {
		data.TlocExtension = types.StringNull()
		data.TlocExtensionVariable = types.StringNull()
	}
	if value := res.Get(path + "tracker.vipType"); len(value.Array()) > 0 {
		if value.String() == "variableName" {
			data.Tracker = types.SetNull(types.StringType)

			v := res.Get(path + "tracker.vipVariableName")
			data.TrackerVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Tracker = types.SetNull(types.StringType)
			data.TrackerVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tracker.vipValue")
			data.Tracker = helpers.GetStringSet(v.Array())
			data.TrackerVariable = types.StringNull()
		}
	} else {
		data.Tracker = types.SetNull(types.StringType)
		data.TrackerVariable = types.StringNull()
	}
	if value := res.Get(path + "ip-directed-broadcast.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.IpDirectedBroadcast = types.BoolNull()

			v := res.Get(path + "ip-directed-broadcast.vipVariableName")
			data.IpDirectedBroadcastVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.IpDirectedBroadcast = types.BoolNull()
			data.IpDirectedBroadcastVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ip-directed-broadcast.vipValue")
			data.IpDirectedBroadcast = types.BoolValue(v.Bool())
			data.IpDirectedBroadcastVariable = types.StringNull()
		}
	} else {
		data.IpDirectedBroadcast = types.BoolNull()
		data.IpDirectedBroadcastVariable = types.StringNull()
	}
}

func (data *VPNInterfaceDSLPPPoA) hasChanges(ctx context.Context, state *VPNInterfaceDSLPPPoA) bool {
	hasChanges := false
	if !data.AtmSubInterfaceName.Equal(state.AtmSubInterfaceName) {
		hasChanges = true
	}
	if !data.Shutdown.Equal(state.Shutdown) {
		hasChanges = true
	}
	if !data.InterfaceDescription.Equal(state.InterfaceDescription) {
		hasChanges = true
	}
	if len(data.Vdsl) != len(state.Vdsl) {
		hasChanges = true
	} else {
		for i := range data.Vdsl {
			if !data.Vdsl[i].ControllerVdslSlot.Equal(state.Vdsl[i].ControllerVdslSlot) {
				hasChanges = true
			}
			if !data.Vdsl[i].Sra.Equal(state.Vdsl[i].Sra) {
				hasChanges = true
			}
			if !data.Vdsl[i].ModeAdsl1.Equal(state.Vdsl[i].ModeAdsl1) {
				hasChanges = true
			}
			if !data.Vdsl[i].ModeAdsl2.Equal(state.Vdsl[i].ModeAdsl2) {
				hasChanges = true
			}
			if !data.Vdsl[i].ModeAdsl2plus.Equal(state.Vdsl[i].ModeAdsl2plus) {
				hasChanges = true
			}
			if !data.Vdsl[i].ModeVdsl2.Equal(state.Vdsl[i].ModeVdsl2) {
				hasChanges = true
			}
			if !data.Vdsl[i].ModeAnsi.Equal(state.Vdsl[i].ModeAnsi) {
				hasChanges = true
			}
			if !data.Vdsl[i].VdslModemConfiguration.Equal(state.Vdsl[i].VdslModemConfiguration) {
				hasChanges = true
			}
		}
	}
	if len(data.Pvc) != len(state.Pvc) {
		hasChanges = true
	} else {
		for i := range data.Pvc {
			if !data.Pvc[i].VpiAndVci.Equal(state.Pvc[i].VpiAndVci) {
				hasChanges = true
			}
			if !data.Pvc[i].VbrNrtPeakCellRate.Equal(state.Pvc[i].VbrNrtPeakCellRate) {
				hasChanges = true
			}
			if !data.Pvc[i].VbrNrtSustainableCellRate.Equal(state.Pvc[i].VbrNrtSustainableCellRate) {
				hasChanges = true
			}
			if !data.Pvc[i].VbrNrtMaximumBurstSize.Equal(state.Pvc[i].VbrNrtMaximumBurstSize) {
				hasChanges = true
			}
			if !data.Pvc[i].VbrRtPeakCellRate.Equal(state.Pvc[i].VbrRtPeakCellRate) {
				hasChanges = true
			}
			if !data.Pvc[i].VbrRtAverageCellRate.Equal(state.Pvc[i].VbrRtAverageCellRate) {
				hasChanges = true
			}
			if !data.Pvc[i].VbrRtMaximumBurstSize.Equal(state.Pvc[i].VbrRtMaximumBurstSize) {
				hasChanges = true
			}
			if !data.Pvc[i].Dialer.Equal(state.Pvc[i].Dialer) {
				hasChanges = true
			}
			if !data.Pvc[i].EncapsulationAal5nlpid.Equal(state.Pvc[i].EncapsulationAal5nlpid) {
				hasChanges = true
			}
			if !data.Pvc[i].EncapsulationAal5snap.Equal(state.Pvc[i].EncapsulationAal5snap) {
				hasChanges = true
			}
			if !data.Pvc[i].DialerPoolMember.Equal(state.Pvc[i].DialerPoolMember) {
				hasChanges = true
			}
		}
	}
	if !data.PppAuthenticationProtocol.Equal(state.PppAuthenticationProtocol) {
		hasChanges = true
	}
	if !data.PppAuthenticationProtocolPap.Equal(state.PppAuthenticationProtocolPap) {
		hasChanges = true
	}
	if !data.AuthenticationType.Equal(state.AuthenticationType) {
		hasChanges = true
	}
	if !data.ChapHostname.Equal(state.ChapHostname) {
		hasChanges = true
	}
	if !data.ChapPppAuthPassword.Equal(state.ChapPppAuthPassword) {
		hasChanges = true
	}
	if !data.PapUsername.Equal(state.PapUsername) {
		hasChanges = true
	}
	if !data.PapPassword.Equal(state.PapPassword) {
		hasChanges = true
	}
	if !data.PapPppAuthPassword.Equal(state.PapPppAuthPassword) {
		hasChanges = true
	}
	if !data.EnableCoreRegion.Equal(state.EnableCoreRegion) {
		hasChanges = true
	}
	if !data.CoreRegion.Equal(state.CoreRegion) {
		hasChanges = true
	}
	if !data.SecondaryRegion.Equal(state.SecondaryRegion) {
		hasChanges = true
	}
	if len(data.Encapsulation) != len(state.Encapsulation) {
		hasChanges = true
	} else {
		for i := range data.Encapsulation {
			if !data.Encapsulation[i].EncapsulationType.Equal(state.Encapsulation[i].EncapsulationType) {
				hasChanges = true
			}
			if !data.Encapsulation[i].Preference.Equal(state.Encapsulation[i].Preference) {
				hasChanges = true
			}
			if !data.Encapsulation[i].Weight.Equal(state.Encapsulation[i].Weight) {
				hasChanges = true
			}
		}
	}
	if !data.Groups.Equal(state.Groups) {
		hasChanges = true
	}
	if !data.Border.Equal(state.Border) {
		hasChanges = true
	}
	if !data.PerTunnelQos.Equal(state.PerTunnelQos) {
		hasChanges = true
	}
	if !data.PerTunnelQosAggregator.Equal(state.PerTunnelQosAggregator) {
		hasChanges = true
	}
	if !data.Color.Equal(state.Color) {
		hasChanges = true
	}
	if !data.LastResortCircuit.Equal(state.LastResortCircuit) {
		hasChanges = true
	}
	if !data.LowBandwidthLink.Equal(state.LowBandwidthLink) {
		hasChanges = true
	}
	if !data.TunnelTcpMss.Equal(state.TunnelTcpMss) {
		hasChanges = true
	}
	if !data.ClearDontFragment.Equal(state.ClearDontFragment) {
		hasChanges = true
	}
	if !data.NetworkBroadcast1.Equal(state.NetworkBroadcast1) {
		hasChanges = true
	}
	if !data.MaxControlConnections.Equal(state.MaxControlConnections) {
		hasChanges = true
	}
	if !data.ControlConnections.Equal(state.ControlConnections) {
		hasChanges = true
	}
	if !data.VbondAsStunServer.Equal(state.VbondAsStunServer) {
		hasChanges = true
	}
	if !data.ExcludeControllerGroupList.Equal(state.ExcludeControllerGroupList) {
		hasChanges = true
	}
	if !data.VmanageConnectionPreference.Equal(state.VmanageConnectionPreference) {
		hasChanges = true
	}
	if !data.PortHop.Equal(state.PortHop) {
		hasChanges = true
	}
	if !data.Restrict.Equal(state.Restrict) {
		hasChanges = true
	}
	if !data.Carrier.Equal(state.Carrier) {
		hasChanges = true
	}
	if !data.NatRefreshInterval.Equal(state.NatRefreshInterval) {
		hasChanges = true
	}
	if !data.HelloInterval.Equal(state.HelloInterval) {
		hasChanges = true
	}
	if !data.HelloTolerance.Equal(state.HelloTolerance) {
		hasChanges = true
	}
	if !data.BindLoopbackTunnel.Equal(state.BindLoopbackTunnel) {
		hasChanges = true
	}
	if !data.All.Equal(state.All) {
		hasChanges = true
	}
	if !data.NetworkBroadcast2.Equal(state.NetworkBroadcast2) {
		hasChanges = true
	}
	if !data.Bgp.Equal(state.Bgp) {
		hasChanges = true
	}
	if !data.Dhcp.Equal(state.Dhcp) {
		hasChanges = true
	}
	if !data.Dns.Equal(state.Dns) {
		hasChanges = true
	}
	if !data.Icmp.Equal(state.Icmp) {
		hasChanges = true
	}
	if !data.Ssh.Equal(state.Ssh) {
		hasChanges = true
	}
	if !data.Netconf.Equal(state.Netconf) {
		hasChanges = true
	}
	if !data.Ospf.Equal(state.Ospf) {
		hasChanges = true
	}
	if !data.Stun.Equal(state.Stun) {
		hasChanges = true
	}
	if !data.Snmp.Equal(state.Snmp) {
		hasChanges = true
	}
	if !data.Https.Equal(state.Https) {
		hasChanges = true
	}
	if !data.Nat.Equal(state.Nat) {
		hasChanges = true
	}
	if !data.RefreshMode.Equal(state.RefreshMode) {
		hasChanges = true
	}
	if !data.UdpTimeout.Equal(state.UdpTimeout) {
		hasChanges = true
	}
	if !data.TcpTimeout.Equal(state.TcpTimeout) {
		hasChanges = true
	}
	if !data.BlockIcmpError.Equal(state.BlockIcmpError) {
		hasChanges = true
	}
	if !data.RespondToPing.Equal(state.RespondToPing) {
		hasChanges = true
	}
	if len(data.PortForward) != len(state.PortForward) {
		hasChanges = true
	} else {
		for i := range data.PortForward {
			if !data.PortForward[i].PortStartRange.Equal(state.PortForward[i].PortStartRange) {
				hasChanges = true
			}
			if !data.PortForward[i].PortEndRange.Equal(state.PortForward[i].PortEndRange) {
				hasChanges = true
			}
			if !data.PortForward[i].Protocol.Equal(state.PortForward[i].Protocol) {
				hasChanges = true
			}
			if !data.PortForward[i].PrivateVpn.Equal(state.PortForward[i].PrivateVpn) {
				hasChanges = true
			}
			if !data.PortForward[i].PrivateIpAddress.Equal(state.PortForward[i].PrivateIpAddress) {
				hasChanges = true
			}
		}
	}
	if !data.AdaptiveQos.Equal(state.AdaptiveQos) {
		hasChanges = true
	}
	if !data.AdaptPeriod.Equal(state.AdaptPeriod) {
		hasChanges = true
	}
	if !data.ShapingRateDownstreamDefault.Equal(state.ShapingRateDownstreamDefault) {
		hasChanges = true
	}
	if !data.ShapingRateDownstreamMin.Equal(state.ShapingRateDownstreamMin) {
		hasChanges = true
	}
	if !data.ShapingRateDownstreamMax.Equal(state.ShapingRateDownstreamMax) {
		hasChanges = true
	}
	if !data.ShapingRateUpstreamDefault.Equal(state.ShapingRateUpstreamDefault) {
		hasChanges = true
	}
	if !data.ShapingRateUpstreamMin.Equal(state.ShapingRateUpstreamMin) {
		hasChanges = true
	}
	if !data.ShapingRateUpstreamMax.Equal(state.ShapingRateUpstreamMax) {
		hasChanges = true
	}
	if !data.ShapingRate.Equal(state.ShapingRate) {
		hasChanges = true
	}
	if !data.QosMap.Equal(state.QosMap) {
		hasChanges = true
	}
	if !data.VpnQosMap.Equal(state.VpnQosMap) {
		hasChanges = true
	}
	if !data.BandwidthUpstream.Equal(state.BandwidthUpstream) {
		hasChanges = true
	}
	if !data.BandwidthDownstream.Equal(state.BandwidthDownstream) {
		hasChanges = true
	}
	if !data.WriteRule.Equal(state.WriteRule) {
		hasChanges = true
	}
	if len(data.AccessList) != len(state.AccessList) {
		hasChanges = true
	} else {
		for i := range data.AccessList {
			if !data.AccessList[i].Direction.Equal(state.AccessList[i].Direction) {
				hasChanges = true
			}
			if !data.AccessList[i].AclName.Equal(state.AccessList[i].AclName) {
				hasChanges = true
			}
		}
	}
	if len(data.Policer) != len(state.Policer) {
		hasChanges = true
	} else {
		for i := range data.Policer {
			if !data.Policer[i].Direction.Equal(state.Policer[i].Direction) {
				hasChanges = true
			}
			if !data.Policer[i].PolicerName.Equal(state.Policer[i].PolicerName) {
				hasChanges = true
			}
		}
	}
	if !data.IpMtu.Equal(state.IpMtu) {
		hasChanges = true
	}
	if !data.TcpMss.Equal(state.TcpMss) {
		hasChanges = true
	}
	if !data.TlocExtension.Equal(state.TlocExtension) {
		hasChanges = true
	}
	if !data.Tracker.Equal(state.Tracker) {
		hasChanges = true
	}
	if !data.IpDirectedBroadcast.Equal(state.IpDirectedBroadcast) {
		hasChanges = true
	}
	return hasChanges
}
