// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"net/url"

	"github.com/CiscoDevNet/terraform-provider-sdwan/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type PolicyObjectUnifiedAdvancedMalwareProtection struct {
	Id                        types.String `tfsdk:"id"`
	Version                   types.Int64  `tfsdk:"version"`
	Name                      types.String `tfsdk:"name"`
	Description               types.String `tfsdk:"description"`
	FeatureProfileId          types.String `tfsdk:"feature_profile_id"`
	AmpCloudRegion            types.String `tfsdk:"amp_cloud_region"`
	AmpCloudRegionEstServer   types.String `tfsdk:"amp_cloud_region_est_server"`
	AlertLogLevel             types.String `tfsdk:"alert_log_level"`
	FileAnalysis              types.Bool   `tfsdk:"file_analysis"`
	FileAnalysisCloudRegion   types.String `tfsdk:"file_analysis_cloud_region"`
	FileAnalysisFileTypes     types.Set    `tfsdk:"file_analysis_file_types"`
	FileAnalysisAlertLogLevel types.String `tfsdk:"file_analysis_alert_log_level"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getModel
func (data PolicyObjectUnifiedAdvancedMalwareProtection) getModel() string {
	return "policy_object_unified_advanced_malware_protection"
}

// End of section. //template:end getModel

// Section below is generated&owned by "gen/generator.go". //template:begin getPath
func (data PolicyObjectUnifiedAdvancedMalwareProtection) getPath() string {
	return fmt.Sprintf("/v1/feature-profile/sdwan/policy-object/%v/unified/advanced-malware-protection", url.QueryEscape(data.FeatureProfileId.ValueString()))
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody
func (data PolicyObjectUnifiedAdvancedMalwareProtection) toBody(ctx context.Context) string {
	body := ""
	body, _ = sjson.Set(body, "name", data.Name.ValueString())
	body, _ = sjson.Set(body, "description", data.Description.ValueString())
	path := "data."
	if true {
		body, _ = sjson.Set(body, path+"matchAllVpn.optionType", "global")
		body, _ = sjson.Set(body, path+"matchAllVpn.value", true)
	}
	if !data.AmpCloudRegion.IsNull() {
		if true {
			body, _ = sjson.Set(body, path+"fileReputationCloudServer.optionType", "global")
			body, _ = sjson.Set(body, path+"fileReputationCloudServer.value", data.AmpCloudRegion.ValueString())
		}
	}
	if !data.AmpCloudRegionEstServer.IsNull() {
		if true {
			body, _ = sjson.Set(body, path+"fileReputationEstServer.optionType", "global")
			body, _ = sjson.Set(body, path+"fileReputationEstServer.value", data.AmpCloudRegionEstServer.ValueString())
		}
	}
	if !data.AlertLogLevel.IsNull() {
		if true {
			body, _ = sjson.Set(body, path+"fileReputationAlert.optionType", "global")
			body, _ = sjson.Set(body, path+"fileReputationAlert.value", data.AlertLogLevel.ValueString())
		}
	}
	if !data.FileAnalysis.IsNull() {
		if true {
			body, _ = sjson.Set(body, path+"fileAnalysisEnabled.optionType", "global")
			body, _ = sjson.Set(body, path+"fileAnalysisEnabled.value", data.FileAnalysis.ValueBool())
		}
	}
	if !data.FileAnalysisCloudRegion.IsNull() {
		if true && data.FileAnalysis.ValueBool() == true {
			body, _ = sjson.Set(body, path+"fileAnalysisCloudServer.optionType", "global")
			body, _ = sjson.Set(body, path+"fileAnalysisCloudServer.value", data.FileAnalysisCloudRegion.ValueString())
		}
	}
	if !data.FileAnalysisFileTypes.IsNull() {
		if true && data.FileAnalysis.ValueBool() == true {
			body, _ = sjson.Set(body, path+"fileAnalysisFileTypes.optionType", "global")
			var values []string
			data.FileAnalysisFileTypes.ElementsAs(ctx, &values, false)
			body, _ = sjson.Set(body, path+"fileAnalysisFileTypes.value", values)
		}
	}
	if !data.FileAnalysisAlertLogLevel.IsNull() {
		if true && data.FileAnalysis.ValueBool() == true {
			body, _ = sjson.Set(body, path+"fileAnalysisAlert.optionType", "global")
			body, _ = sjson.Set(body, path+"fileAnalysisAlert.value", data.FileAnalysisAlertLogLevel.ValueString())
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody
func (data *PolicyObjectUnifiedAdvancedMalwareProtection) fromBody(ctx context.Context, res gjson.Result) {
	data.Name = types.StringValue(res.Get("payload.name").String())
	if value := res.Get("payload.description"); value.Exists() && value.String() != "" {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	path := "payload.data."
	data.AmpCloudRegion = types.StringNull()

	if t := res.Get(path + "fileReputationCloudServer.optionType"); t.Exists() {
		va := res.Get(path + "fileReputationCloudServer.value")
		if t.String() == "global" {
			data.AmpCloudRegion = types.StringValue(va.String())
		}
	}
	data.AmpCloudRegionEstServer = types.StringNull()

	if t := res.Get(path + "fileReputationEstServer.optionType"); t.Exists() {
		va := res.Get(path + "fileReputationEstServer.value")
		if t.String() == "global" {
			data.AmpCloudRegionEstServer = types.StringValue(va.String())
		}
	}
	data.AlertLogLevel = types.StringNull()

	if t := res.Get(path + "fileReputationAlert.optionType"); t.Exists() {
		va := res.Get(path + "fileReputationAlert.value")
		if t.String() == "global" {
			data.AlertLogLevel = types.StringValue(va.String())
		}
	}
	data.FileAnalysis = types.BoolNull()

	if t := res.Get(path + "fileAnalysisEnabled.optionType"); t.Exists() {
		va := res.Get(path + "fileAnalysisEnabled.value")
		if t.String() == "global" {
			data.FileAnalysis = types.BoolValue(va.Bool())
		}
	}
	data.FileAnalysisCloudRegion = types.StringNull()

	if t := res.Get(path + "fileAnalysisCloudServer.optionType"); t.Exists() {
		va := res.Get(path + "fileAnalysisCloudServer.value")
		if t.String() == "global" {
			data.FileAnalysisCloudRegion = types.StringValue(va.String())
		}
		data.FileAnalysis = types.BoolValue(true)
	}
	data.FileAnalysisFileTypes = types.SetNull(types.StringType)

	if t := res.Get(path + "fileAnalysisFileTypes.optionType"); t.Exists() {
		va := res.Get(path + "fileAnalysisFileTypes.value")
		if t.String() == "global" {
			data.FileAnalysisFileTypes = helpers.GetStringSet(va.Array())
		}
		data.FileAnalysis = types.BoolValue(true)
	}
	data.FileAnalysisAlertLogLevel = types.StringNull()

	if t := res.Get(path + "fileAnalysisAlert.optionType"); t.Exists() {
		va := res.Get(path + "fileAnalysisAlert.value")
		if t.String() == "global" {
			data.FileAnalysisAlertLogLevel = types.StringValue(va.String())
		}
		data.FileAnalysis = types.BoolValue(true)
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody
func (data *PolicyObjectUnifiedAdvancedMalwareProtection) updateFromBody(ctx context.Context, res gjson.Result) {
	data.Name = types.StringValue(res.Get("payload.name").String())
	if value := res.Get("payload.description"); value.Exists() && value.String() != "" {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	path := "payload.data."
	data.AmpCloudRegion = types.StringNull()

	if t := res.Get(path + "fileReputationCloudServer.optionType"); t.Exists() {
		va := res.Get(path + "fileReputationCloudServer.value")
		if t.String() == "global" {
			data.AmpCloudRegion = types.StringValue(va.String())
		}
	}
	data.AmpCloudRegionEstServer = types.StringNull()

	if t := res.Get(path + "fileReputationEstServer.optionType"); t.Exists() {
		va := res.Get(path + "fileReputationEstServer.value")
		if t.String() == "global" {
			data.AmpCloudRegionEstServer = types.StringValue(va.String())
		}
	}
	data.AlertLogLevel = types.StringNull()

	if t := res.Get(path + "fileReputationAlert.optionType"); t.Exists() {
		va := res.Get(path + "fileReputationAlert.value")
		if t.String() == "global" {
			data.AlertLogLevel = types.StringValue(va.String())
		}
	}
	data.FileAnalysis = types.BoolNull()

	if t := res.Get(path + "fileAnalysisEnabled.optionType"); t.Exists() {
		va := res.Get(path + "fileAnalysisEnabled.value")
		if t.String() == "global" {
			data.FileAnalysis = types.BoolValue(va.Bool())
		}
	}
	data.FileAnalysisCloudRegion = types.StringNull()

	if t := res.Get(path + "fileAnalysisCloudServer.optionType"); t.Exists() {
		va := res.Get(path + "fileAnalysisCloudServer.value")
		if t.String() == "global" {
			data.FileAnalysisCloudRegion = types.StringValue(va.String())
		}
	}
	data.FileAnalysisFileTypes = types.SetNull(types.StringType)

	if t := res.Get(path + "fileAnalysisFileTypes.optionType"); t.Exists() {
		va := res.Get(path + "fileAnalysisFileTypes.value")
		if t.String() == "global" {
			data.FileAnalysisFileTypes = helpers.GetStringSet(va.Array())
		}
	}
	data.FileAnalysisAlertLogLevel = types.StringNull()

	if t := res.Get(path + "fileAnalysisAlert.optionType"); t.Exists() {
		va := res.Get(path + "fileAnalysisAlert.value")
		if t.String() == "global" {
			data.FileAnalysisAlertLogLevel = types.StringValue(va.String())
		}
	}
}

// End of section. //template:end updateFromBody
