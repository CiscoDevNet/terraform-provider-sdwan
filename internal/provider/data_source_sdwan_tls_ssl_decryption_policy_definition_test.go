// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceSdwanTLSSSLDecryptionPolicyDefinition(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceSdwanTLSSSLDecryptionPolicyDefinitionConfig,
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "name", "Example"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "description", "My description"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "mode", "security"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "default_action", "noIntent"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "network_rules.0.base_action", "doNotDecrypt"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "network_rules.0.rule_id", "4"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "network_rules.0.rule_name", "Example"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "network_rules.0.rule_type", "sslDecryption"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "network_rules.0.source_and_destination_configuration.0.option", "destinationIp"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "network_rules.0.source_and_destination_configuration.0.value", "10.0.0.0/12"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "ssl_decryption_enabled", "true"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "expired_certificate", "drop"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "untrusted_certificate", "drop"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "certificate_revocation_status", "none"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "unknown_revocation_status", "drop"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "unsupported_protocol_versions", "drop"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "unsupported_cipher_suites", "drop"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "failure_mode", "close"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "rsa_key_pair_modulus", "2048"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "ec_key_type", "P384"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "certificate_lifetime_in_days", "1"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "minimal_tls_version", "TLSv1.2"),
					resource.TestCheckResourceAttr("data.sdwan_tls_ssl_decryption_policy_definition.test", "use_default_ca_cert_bundle", "true"),
				),
			},
		},
	})
}

const testAccDataSourceSdwanTLSSSLDecryptionPolicyDefinitionConfig = `

resource "sdwan_tls_ssl_decryption_policy_definition" "test" {
  name = "Example"
  description = "My description"
  mode = "security"
  default_action = "noIntent"
  network_rules = [{
    base_action = "doNotDecrypt"
    rule_id = 4
    rule_name = "Example"
    rule_type = "sslDecryption"
	source_and_destination_configuration = [{
		option = "destinationIp"
		value = "10.0.0.0/12"
	}]
  }]
  ssl_decryption_enabled = "true"
  expired_certificate = "drop"
  untrusted_certificate = "drop"
  certificate_revocation_status = "none"
  unknown_revocation_status = "drop"
  unsupported_protocol_versions = "drop"
  unsupported_cipher_suites = "drop"
  failure_mode = "close"
  rsa_key_pair_modulus = "2048"
  ec_key_type = "P384"
  certificate_lifetime_in_days = 1
  minimal_tls_version = "TLSv1.2"
  use_default_ca_cert_bundle = true
}

data "sdwan_tls_ssl_decryption_policy_definition" "test" {
  id = sdwan_tls_ssl_decryption_policy_definition.test.id
}
`
