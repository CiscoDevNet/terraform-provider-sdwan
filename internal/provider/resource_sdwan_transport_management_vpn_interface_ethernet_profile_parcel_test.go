// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccSdwanTransportManagementVPNInterfaceEthernetProfileParcel(t *testing.T) {
	if os.Getenv("SDWAN_2012") == "" {
		t.Skip("skipping test, set environment variable SDWAN_2012")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "shutdown", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "interface_name", "GigabitEthernet1"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "basic_configuration_description", "Transport Management VPN Interface Ethernet"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ipv4_settings_dynamic_dhcp_distance", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ipv4_settings_ip_address", "1.2.3.4"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ipv4_settings_subnet_mask", "0.0.0.0"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ipv4_settings_secondary_ip_addresses.0.ip_address", "1.2.3.4"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ipv4_settings_secondary_ip_addresses.0.subnet_mask", "0.0.0.0"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ipv4_settings_iperf_server", "example"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ipv4_settings_auto_detect_bandwidth", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "enable_dhcpv6", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ipv6_settings_static_ip_address", "2001:0:0:1::/64"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "arp.0.ip_address", "1.2.3.4"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "arp.0.mac_address", "00-B0-D0-63-C2-26"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "duplex", "full"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "mac_address", "00-B0-D0-63-C2-26"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ip_mtu", "1500"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "interface_mtu", "1500"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "tcp_mss", "505"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "speed", "2500"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "arp_timeout", "1200"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "autonegotiate", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "media_type", "rj45"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "load_interval", "30"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "icmp_redirect_disable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("sdwan_transport_management_vpn_interface_ethernet_profile_parcel.test", "ip_directed_broadcast", "false"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccSdwanTransportManagementVPNInterfaceEthernetPrerequisitesProfileParcelConfig + testAccSdwanTransportManagementVPNInterfaceEthernetProfileParcelConfig_minimum(),
			},
			{
				Config: testAccSdwanTransportManagementVPNInterfaceEthernetPrerequisitesProfileParcelConfig + testAccSdwanTransportManagementVPNInterfaceEthernetProfileParcelConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

const testAccSdwanTransportManagementVPNInterfaceEthernetPrerequisitesProfileParcelConfig = `
resource "sdwan_system_feature_profile" "test" {
  name = "TF_TEST"
  description = "Terraform test"
}

resource "sdwan_transport_management_vpn_profile_parcel" "test" {
  name                            = "TF_TEST"
  description                     = "Terraform test"
  feature_profile_id              = sdwan_system_feature_profile.test.id
  basic_configuration_description = "example"
  primary_dns_address_ipv4        = "1.2.3.4"
  secondary_dns_address_ipv4      = "2.3.4.5"
  primary_dns_address_ipv6        = "2001:0:0:1::0"
  secondary_dns_address_ipv6      = "2001:0:0:2::0"
  host_mappings = [
    {
      host_name            = "example"
      list_of_ip_addresses = ["1.2.3.4"]
    }
  ]
  ipv4_static_routes = [
    {
      network_address = "1.2.3.4"
      subnet_mask     = "0.0.0.0"
      gateway         = "nextHop"
      ipv4_route_gateway_next_ho = [
        {
          address                 = "1.2.3.4"
          administrative_distance = 1
        }
      ]
      administrative_distance = 1
    }
  ]
  ipv6_static_routes = [
    {
      prefix = "2002::/16"
      next_hops = [
        {
          address                 = "2001:0:0:1::/64"
          administrative_distance = 1
        }
      ]
    }
  ]
}
`

func testAccSdwanTransportManagementVPNInterfaceEthernetProfileParcelConfig_minimum() string {
	config := `resource "sdwan_transport_management_vpn_interface_ethernet_profile_parcel" "test" {` + "\n"
	config += ` name = "TF_TEST_MIN"` + "\n"
	config += ` description = "Terraform integration test"` + "\n"
	config += `	feature_profile_id = sdwan_system_feature_profile.test.id` + "\n"
	config += `	profile_parcel_id = sdwan_transport_management_vpn_profile_parcel.test.id` + "\n"
	config += `	interface_name = "GigabitEthernet1"` + "\n"
	config += `	basic_configuration_description = "Transport Management VPN Interface Ethernet"` + "\n"
	config += `	ipv4_settings_dynamic_dhcp_distance = 1` + "\n"
	config += `	ipv4_settings_ip_address = "1.2.3.4"` + "\n"
	config += `	ipv4_settings_subnet_mask = "0.0.0.0"` + "\n"
	config += `	ipv4_settings_dhcp_helper = ["1.2.3.4"]` + "\n"
	config += `	ipv4_settings_iperf_server = "example"` + "\n"
	config += `	enable_dhcpv6 = true` + "\n"
	config += `	ipv6_settings_static_ip_address = "2001:0:0:1::/64"` + "\n"
	config += `	duplex = "full"` + "\n"
	config += `	mac_address = "00-B0-D0-63-C2-26"` + "\n"
	config += `	tcp_mss = 505` + "\n"
	config += `	speed = "2500"` + "\n"
	config += `	autonegotiate = false` + "\n"
	config += `	media_type = "rj45"` + "\n"
	config += `}` + "\n"
	return config
}

func testAccSdwanTransportManagementVPNInterfaceEthernetProfileParcelConfig_all() string {
	config := `resource "sdwan_transport_management_vpn_interface_ethernet_profile_parcel" "test" {` + "\n"
	config += ` name = "TF_TEST_ALL"` + "\n"
	config += ` description = "Terraform integration test"` + "\n"
	config += `	feature_profile_id = sdwan_system_feature_profile.test.id` + "\n"
	config += `	profile_parcel_id = sdwan_transport_management_vpn_profile_parcel.test.id` + "\n"
	config += `	shutdown = true` + "\n"
	config += `	interface_name = "GigabitEthernet1"` + "\n"
	config += `	basic_configuration_description = "Transport Management VPN Interface Ethernet"` + "\n"
	config += `	ipv4_settings_dynamic_dhcp_distance = 1` + "\n"
	config += `	ipv4_settings_ip_address = "1.2.3.4"` + "\n"
	config += `	ipv4_settings_subnet_mask = "0.0.0.0"` + "\n"
	config += `	ipv4_settings_secondary_ip_addresses = [{` + "\n"
	config += `	  ip_address = "1.2.3.4"` + "\n"
	config += `	  subnet_mask = "0.0.0.0"` + "\n"
	config += `	}]` + "\n"
	config += `	ipv4_settings_dhcp_helper = ["1.2.3.4"]` + "\n"
	config += `	ipv4_settings_iperf_server = "example"` + "\n"
	config += `	ipv4_settings_auto_detect_bandwidth = false` + "\n"
	config += `	enable_dhcpv6 = true` + "\n"
	config += `	ipv6_settings_static_ip_address = "2001:0:0:1::/64"` + "\n"
	config += `	arp = [{` + "\n"
	config += `	  ip_address = "1.2.3.4"` + "\n"
	config += `	  mac_address = "00-B0-D0-63-C2-26"` + "\n"
	config += `	}]` + "\n"
	config += `	duplex = "full"` + "\n"
	config += `	mac_address = "00-B0-D0-63-C2-26"` + "\n"
	config += `	ip_mtu = 1500` + "\n"
	config += `	interface_mtu = 1500` + "\n"
	config += `	tcp_mss = 505` + "\n"
	config += `	speed = "2500"` + "\n"
	config += `	arp_timeout = 1200` + "\n"
	config += `	autonegotiate = false` + "\n"
	config += `	media_type = "rj45"` + "\n"
	config += `	load_interval = 30` + "\n"
	config += `	icmp_redirect_disable = true` + "\n"
	config += `	ip_directed_broadcast = false` + "\n"
	config += `}` + "\n"
	return config
}
