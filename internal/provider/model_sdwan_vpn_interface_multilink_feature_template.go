// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-sdwan/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VPNInterfaceMultilink struct {
	Id                                   types.String                              `tfsdk:"id"`
	Version                              types.Int64                               `tfsdk:"version"`
	TemplateType                         types.String                              `tfsdk:"template_type"`
	Name                                 types.String                              `tfsdk:"name"`
	Description                          types.String                              `tfsdk:"description"`
	DeviceTypes                          types.Set                                 `tfsdk:"device_types"`
	InterfaceName                        types.String                              `tfsdk:"interface_name"`
	InterfaceNameVariable                types.String                              `tfsdk:"interface_name_variable"`
	MultilinkGroupNumber                 types.Int64                               `tfsdk:"multilink_group_number"`
	MultilinkGroupNumberVariable         types.String                              `tfsdk:"multilink_group_number_variable"`
	InterfaceDescription                 types.String                              `tfsdk:"interface_description"`
	InterfaceDescriptionVariable         types.String                              `tfsdk:"interface_description_variable"`
	Ipv4Address                          types.String                              `tfsdk:"ipv4_address"`
	Ipv4AddressVariable                  types.String                              `tfsdk:"ipv4_address_variable"`
	Ipv6Address                          types.String                              `tfsdk:"ipv6_address"`
	Ipv6AddressVariable                  types.String                              `tfsdk:"ipv6_address_variable"`
	Ipv6AccessLists                      []VPNInterfaceMultilinkIpv6AccessLists    `tfsdk:"ipv6_access_lists"`
	PppAuthenticationProtocol            types.String                              `tfsdk:"ppp_authentication_protocol"`
	PppAuthenticationProtocolPap         types.Bool                                `tfsdk:"ppp_authentication_protocol_pap"`
	PppAuthenticationProtocolPapVariable types.String                              `tfsdk:"ppp_authentication_protocol_pap_variable"`
	AuthenticationType                   types.String                              `tfsdk:"authentication_type"`
	AuthenticationTypeVariable           types.String                              `tfsdk:"authentication_type_variable"`
	ChapHostname                         types.String                              `tfsdk:"chap_hostname"`
	ChapHostnameVariable                 types.String                              `tfsdk:"chap_hostname_variable"`
	ChapPppAuthPassword                  types.String                              `tfsdk:"chap_ppp_auth_password"`
	ChapPppAuthPasswordVariable          types.String                              `tfsdk:"chap_ppp_auth_password_variable"`
	PapUsername                          types.String                              `tfsdk:"pap_username"`
	PapUsernameVariable                  types.String                              `tfsdk:"pap_username_variable"`
	PapPassword                          types.Bool                                `tfsdk:"pap_password"`
	PapPppAuthPassword                   types.String                              `tfsdk:"pap_ppp_auth_password"`
	PapPppAuthPasswordVariable           types.String                              `tfsdk:"pap_ppp_auth_password_variable"`
	EnableCoreRegion                     types.Bool                                `tfsdk:"enable_core_region"`
	EnableCoreRegionVariable             types.String                              `tfsdk:"enable_core_region_variable"`
	CoreRegion                           types.String                              `tfsdk:"core_region"`
	CoreRegionVariable                   types.String                              `tfsdk:"core_region_variable"`
	SecondaryRegion                      types.String                              `tfsdk:"secondary_region"`
	SecondaryRegionVariable              types.String                              `tfsdk:"secondary_region_variable"`
	Encapsulation                        []VPNInterfaceMultilinkEncapsulation      `tfsdk:"encapsulation"`
	Groups                               types.Set                                 `tfsdk:"groups"`
	GroupsVariable                       types.String                              `tfsdk:"groups_variable"`
	Border                               types.Bool                                `tfsdk:"border"`
	BorderVariable                       types.String                              `tfsdk:"border_variable"`
	PerTunnelQos                         types.Bool                                `tfsdk:"per_tunnel_qos"`
	PerTunnelQosVariable                 types.String                              `tfsdk:"per_tunnel_qos_variable"`
	PerTunnelQosAggregator               types.Bool                                `tfsdk:"per_tunnel_qos_aggregator"`
	PerTunnelQosAggregatorVariable       types.String                              `tfsdk:"per_tunnel_qos_aggregator_variable"`
	Color                                types.String                              `tfsdk:"color"`
	ColorVariable                        types.String                              `tfsdk:"color_variable"`
	LastResortCircuit                    types.Bool                                `tfsdk:"last_resort_circuit"`
	LastResortCircuitVariable            types.String                              `tfsdk:"last_resort_circuit_variable"`
	LowBandwidthLink                     types.Bool                                `tfsdk:"low_bandwidth_link"`
	LowBandwidthLinkVariable             types.String                              `tfsdk:"low_bandwidth_link_variable"`
	TunnelTcpMss                         types.Int64                               `tfsdk:"tunnel_tcp_mss"`
	TunnelTcpMssVariable                 types.String                              `tfsdk:"tunnel_tcp_mss_variable"`
	EnableClearDontFragment              types.Bool                                `tfsdk:"enable_clear_dont_fragment"`
	EnableClearDontFragmentVariable      types.String                              `tfsdk:"enable_clear_dont_fragment_variable"`
	NetworkBroadcast1                    types.Bool                                `tfsdk:"network_broadcast_1"`
	NetworkBroadcast1Variable            types.String                              `tfsdk:"network_broadcast_1_variable"`
	MaxControlConnections                types.Int64                               `tfsdk:"max_control_connections"`
	MaxControlConnectionsVariable        types.String                              `tfsdk:"max_control_connections_variable"`
	ControlConnections                   types.Bool                                `tfsdk:"control_connections"`
	ControlConnectionsVariable           types.String                              `tfsdk:"control_connections_variable"`
	VbondAsStunServer                    types.Bool                                `tfsdk:"vbond_as_stun_server"`
	VbondAsStunServerVariable            types.String                              `tfsdk:"vbond_as_stun_server_variable"`
	ExcludeControllerGroupList           types.Set                                 `tfsdk:"exclude_controller_group_list"`
	ExcludeControllerGroupListVariable   types.String                              `tfsdk:"exclude_controller_group_list_variable"`
	VmanageConnectionPreference          types.Int64                               `tfsdk:"vmanage_connection_preference"`
	VmanageConnectionPreferenceVariable  types.String                              `tfsdk:"vmanage_connection_preference_variable"`
	PortHop                              types.Bool                                `tfsdk:"port_hop"`
	PortHopVariable                      types.String                              `tfsdk:"port_hop_variable"`
	Restrict                             types.Bool                                `tfsdk:"restrict"`
	RestrictVariable                     types.String                              `tfsdk:"restrict_variable"`
	Carrier                              types.String                              `tfsdk:"carrier"`
	CarrierVariable                      types.String                              `tfsdk:"carrier_variable"`
	NatRefreshInterval                   types.Int64                               `tfsdk:"nat_refresh_interval"`
	NatRefreshIntervalVariable           types.String                              `tfsdk:"nat_refresh_interval_variable"`
	HelloInterval                        types.Int64                               `tfsdk:"hello_interval"`
	HelloIntervalVariable                types.String                              `tfsdk:"hello_interval_variable"`
	HelloTolerance                       types.Int64                               `tfsdk:"hello_tolerance"`
	HelloToleranceVariable               types.String                              `tfsdk:"hello_tolerance_variable"`
	BindLoopbackTunnel                   types.String                              `tfsdk:"bind_loopback_tunnel"`
	BindLoopbackTunnelVariable           types.String                              `tfsdk:"bind_loopback_tunnel_variable"`
	All                                  types.Bool                                `tfsdk:"all"`
	AllVariable                          types.String                              `tfsdk:"all_variable"`
	NetworkBroadcast2                    types.Bool                                `tfsdk:"network_broadcast_2"`
	NetworkBroadcast2Variable            types.String                              `tfsdk:"network_broadcast_2_variable"`
	Bgp                                  types.Bool                                `tfsdk:"bgp"`
	BgpVariable                          types.String                              `tfsdk:"bgp_variable"`
	Dhcp                                 types.Bool                                `tfsdk:"dhcp"`
	DhcpVariable                         types.String                              `tfsdk:"dhcp_variable"`
	Dns                                  types.Bool                                `tfsdk:"dns"`
	DnsVariable                          types.String                              `tfsdk:"dns_variable"`
	Icmp                                 types.Bool                                `tfsdk:"icmp"`
	IcmpVariable                         types.String                              `tfsdk:"icmp_variable"`
	Ssh                                  types.Bool                                `tfsdk:"ssh"`
	SshVariable                          types.String                              `tfsdk:"ssh_variable"`
	Netconf                              types.Bool                                `tfsdk:"netconf"`
	NetconfVariable                      types.String                              `tfsdk:"netconf_variable"`
	Ospf                                 types.Bool                                `tfsdk:"ospf"`
	OspfVariable                         types.String                              `tfsdk:"ospf_variable"`
	Stun                                 types.Bool                                `tfsdk:"stun"`
	StunVariable                         types.String                              `tfsdk:"stun_variable"`
	Snmp                                 types.Bool                                `tfsdk:"snmp"`
	SnmpVariable                         types.String                              `tfsdk:"snmp_variable"`
	Https                                types.Bool                                `tfsdk:"https"`
	HttpsVariable                        types.String                              `tfsdk:"https_variable"`
	DisableFragmentation                 types.Bool                                `tfsdk:"disable_fragmentation"`
	DisableFragmentationVariable         types.String                              `tfsdk:"disable_fragmentation_variable"`
	FragmentMaxDelay                     types.Int64                               `tfsdk:"fragment_max_delay"`
	FragmentMaxDelayVariable             types.String                              `tfsdk:"fragment_max_delay_variable"`
	InterleavingFragment                 types.Bool                                `tfsdk:"interleaving_fragment"`
	InterleavingFragmentVariable         types.String                              `tfsdk:"interleaving_fragment_variable"`
	ClearDontFragmentBit                 types.Bool                                `tfsdk:"clear_dont_fragment_bit"`
	ClearDontFragmentBitVariable         types.String                              `tfsdk:"clear_dont_fragment_bit_variable"`
	PmtuDiscovery                        types.Bool                                `tfsdk:"pmtu_discovery"`
	PmtuDiscoveryVariable                types.String                              `tfsdk:"pmtu_discovery_variable"`
	IpMtu                                types.Int64                               `tfsdk:"ip_mtu"`
	IpMtuVariable                        types.String                              `tfsdk:"ip_mtu_variable"`
	StaticIngressQos                     types.Int64                               `tfsdk:"static_ingress_qos"`
	StaticIngressQosVariable             types.String                              `tfsdk:"static_ingress_qos_variable"`
	TcpMss                               types.Int64                               `tfsdk:"tcp_mss"`
	TcpMssVariable                       types.String                              `tfsdk:"tcp_mss_variable"`
	IpDirectedBroadcast                  types.Bool                                `tfsdk:"ip_directed_broadcast"`
	IpDirectedBroadcastVariable          types.String                              `tfsdk:"ip_directed_broadcast_variable"`
	TlocExtension                        types.String                              `tfsdk:"tloc_extension"`
	TlocExtensionVariable                types.String                              `tfsdk:"tloc_extension_variable"`
	AdministrativeShutdown               types.Bool                                `tfsdk:"administrative_shutdown"`
	AdministrativeShutdownVariable       types.String                              `tfsdk:"administrative_shutdown_variable"`
	LinkAutonegotiate                    types.Bool                                `tfsdk:"link_autonegotiate"`
	LinkAutonegotiateVariable            types.String                              `tfsdk:"link_autonegotiate_variable"`
	ShapingRate                          types.Int64                               `tfsdk:"shaping_rate"`
	ShapingRateVariable                  types.String                              `tfsdk:"shaping_rate_variable"`
	QosMap                               types.String                              `tfsdk:"qos_map"`
	QosMapVariable                       types.String                              `tfsdk:"qos_map_variable"`
	VpnQosMap                            types.String                              `tfsdk:"vpn_qos_map"`
	VpnQosMapVariable                    types.String                              `tfsdk:"vpn_qos_map_variable"`
	BandwidthUpstream                    types.Int64                               `tfsdk:"bandwidth_upstream"`
	BandwidthUpstreamVariable            types.String                              `tfsdk:"bandwidth_upstream_variable"`
	BandwidthDownstream                  types.Int64                               `tfsdk:"bandwidth_downstream"`
	BandwidthDownstreamVariable          types.String                              `tfsdk:"bandwidth_downstream_variable"`
	WriteRule                            types.String                              `tfsdk:"write_rule"`
	WriteRuleVariable                    types.String                              `tfsdk:"write_rule_variable"`
	AccessList                           []VPNInterfaceMultilinkAccessList         `tfsdk:"access_list"`
	ControllerTxExList                   []VPNInterfaceMultilinkControllerTxExList `tfsdk:"controller_tx_ex_list"`
	NimInterfaceList                     []VPNInterfaceMultilinkNimInterfaceList   `tfsdk:"nim_interface_list"`
}

type VPNInterfaceMultilinkIpv6AccessLists struct {
	Optional        types.Bool   `tfsdk:"optional"`
	Direction       types.String `tfsdk:"direction"`
	AclName         types.String `tfsdk:"acl_name"`
	AclNameVariable types.String `tfsdk:"acl_name_variable"`
}

type VPNInterfaceMultilinkEncapsulation struct {
	Optional           types.Bool   `tfsdk:"optional"`
	EncapsulationType  types.String `tfsdk:"encapsulation_type"`
	Preference         types.Int64  `tfsdk:"preference"`
	PreferenceVariable types.String `tfsdk:"preference_variable"`
	Weight             types.Int64  `tfsdk:"weight"`
	WeightVariable     types.String `tfsdk:"weight_variable"`
}

type VPNInterfaceMultilinkAccessList struct {
	Optional        types.Bool   `tfsdk:"optional"`
	Direction       types.String `tfsdk:"direction"`
	AclName         types.String `tfsdk:"acl_name"`
	AclNameVariable types.String `tfsdk:"acl_name_variable"`
}

type VPNInterfaceMultilinkControllerTxExList struct {
	Optional            types.Bool                                                `tfsdk:"optional"`
	CardType            types.String                                              `tfsdk:"card_type"`
	Slot                types.String                                              `tfsdk:"slot"`
	Framing             types.String                                              `tfsdk:"framing"`
	FramingVariable     types.String                                              `tfsdk:"framing_variable"`
	LineMode            types.String                                              `tfsdk:"line_mode"`
	LineModeVariable    types.String                                              `tfsdk:"line_mode_variable"`
	Internal            types.Bool                                                `tfsdk:"internal"`
	InternalVariable    types.String                                              `tfsdk:"internal_variable"`
	Description         types.String                                              `tfsdk:"description"`
	DescriptionVariable types.String                                              `tfsdk:"description_variable"`
	Linecode            types.String                                              `tfsdk:"linecode"`
	LinecodeVariable    types.String                                              `tfsdk:"linecode_variable"`
	SetLengthForLong    types.String                                              `tfsdk:"set_length_for_long"`
	SetLengthForShort   types.String                                              `tfsdk:"set_length_for_short"`
	ChannelGroupList    []VPNInterfaceMultilinkControllerTxExListChannelGroupList `tfsdk:"channel_group_list"`
}

type VPNInterfaceMultilinkNimInterfaceList struct {
	Optional                       types.Bool   `tfsdk:"optional"`
	NimSerialInterfaceType         types.String `tfsdk:"nim_serial_interface_type"`
	NimSerialInterfaceTypeVariable types.String `tfsdk:"nim_serial_interface_type_variable"`
	InterfaceName                  types.String `tfsdk:"interface_name"`
	InterfaceNameVariable          types.String `tfsdk:"interface_name_variable"`
	InterfaceDescription           types.String `tfsdk:"interface_description"`
	InterfaceDescriptionVariable   types.String `tfsdk:"interface_description_variable"`
	Bandwidth                      types.Int64  `tfsdk:"bandwidth"`
	BandwidthVariable              types.String `tfsdk:"bandwidth_variable"`
	ClockRate                      types.Int64  `tfsdk:"clock_rate"`
	ClockRateVariable              types.String `tfsdk:"clock_rate_variable"`
	EncapsulationSerial            types.String `tfsdk:"encapsulation_serial"`
	EncapsulationSerialVariable    types.String `tfsdk:"encapsulation_serial_variable"`
}

type VPNInterfaceMultilinkControllerTxExListChannelGroupList struct {
	Optional             types.Bool   `tfsdk:"optional"`
	ChannelGroup         types.Int64  `tfsdk:"channel_group"`
	ChannelGroupVariable types.String `tfsdk:"channel_group_variable"`
	Timeslots            types.Set    `tfsdk:"timeslots"`
	TimeslotsVariable    types.String `tfsdk:"timeslots_variable"`
}

func (data VPNInterfaceMultilink) getModel() string {
	return "vpn-cedge-interface-multilink-controller"
}

func (data VPNInterfaceMultilink) toBody(ctx context.Context) string {
	body := ""

	var device_types []string
	data.DeviceTypes.ElementsAs(ctx, &device_types, false)
	body, _ = sjson.Set(body, "deviceType", device_types)
	body, _ = sjson.Set(body, "factoryDefault", false)
	body, _ = sjson.Set(body, "templateDescription", data.Description.ValueString())
	body, _ = sjson.Set(body, "templateMinVersion", "15.0.0")
	body, _ = sjson.Set(body, "templateName", data.Name.ValueString())
	body, _ = sjson.Set(body, "templateType", "vpn-cedge-interface-multilink-controller")
	body, _ = sjson.Set(body, "templateDefinition", map[string]interface{}{})

	path := "templateDefinition."

	if !data.InterfaceNameVariable.IsNull() {
		body, _ = sjson.Set(body, path+"if-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"if-name."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"if-name."+"vipVariableName", data.InterfaceNameVariable.ValueString())
	} else if data.InterfaceName.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"if-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"if-name."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"if-name."+"vipValue", data.InterfaceName.ValueString())
	}

	if !data.MultilinkGroupNumberVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.multilink.group."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.multilink.group."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.multilink.group."+"vipVariableName", data.MultilinkGroupNumberVariable.ValueString())
	} else if data.MultilinkGroupNumber.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.multilink", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.multilink.group."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.multilink.group."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.multilink.group."+"vipValue", data.MultilinkGroupNumber.ValueInt64())
	}

	if !data.InterfaceDescriptionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"description."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"description."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"description."+"vipVariableName", data.InterfaceDescriptionVariable.ValueString())
	} else if data.InterfaceDescription.IsNull() {
		body, _ = sjson.Set(body, path+"description."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"description."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"description."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"description."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"description."+"vipValue", data.InterfaceDescription.ValueString())
	}

	if !data.Ipv4AddressVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ip.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip.address."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ip.address."+"vipVariableName", data.Ipv4AddressVariable.ValueString())
	} else if data.Ipv4Address.IsNull() {
		body, _ = sjson.Set(body, path+"ip.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip.address."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ip.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip.address."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ip.address."+"vipValue", data.Ipv4Address.ValueString())
	}

	if !data.Ipv6AddressVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipVariableName", data.Ipv6AddressVariable.ValueString())
	} else if data.Ipv6Address.IsNull() {
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipValue", data.Ipv6Address.ValueString())
	}
	if len(data.Ipv6AccessLists) > 0 {
		body, _ = sjson.Set(body, path+"access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"access-list."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"access-list."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"access-list."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"access-list."+"vipValue", []interface{}{})
	}
	for _, item := range data.Ipv6AccessLists {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "direction")
		if item.Direction.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipValue", item.Direction.ValueString())
		}
		itemAttributes = append(itemAttributes, "acl-name")

		if !item.AclNameVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipVariableName", item.AclNameVariable.ValueString())
		} else if item.AclName.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipValue", item.AclName.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"access-list."+"vipValue.-1", itemBody)
	}
	if data.PppAuthenticationProtocol.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.authentication.method."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.authentication.method."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.authentication.method."+"vipValue", data.PppAuthenticationProtocol.ValueString())
	}

	if !data.PppAuthenticationProtocolPapVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipVariableName", data.PppAuthenticationProtocolPapVariable.ValueString())
	} else if data.PppAuthenticationProtocolPap.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.authentication.pap."+"vipValue", strconv.FormatBool(data.PppAuthenticationProtocolPap.ValueBool()))
	}

	if !data.AuthenticationTypeVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipVariableName", data.AuthenticationTypeVariable.ValueString())
	} else if data.AuthenticationType.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.authentication", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.authentication.callin."+"vipValue", data.AuthenticationType.ValueString())
	}

	if !data.ChapHostnameVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipVariableName", data.ChapHostnameVariable.ValueString())
	} else if data.ChapHostname.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.chap", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.chap.hostname."+"vipValue", data.ChapHostname.ValueString())
	}

	if !data.ChapPppAuthPasswordVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipVariableName", data.ChapPppAuthPasswordVariable.ValueString())
	} else if data.ChapPppAuthPassword.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.chap.password", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.chap.password.ppp-auth-password."+"vipValue", data.ChapPppAuthPassword.ValueString())
	}

	if !data.PapUsernameVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipVariableName", data.PapUsernameVariable.ValueString())
	} else if data.PapUsername.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.username-string."+"vipValue", data.PapUsername.ValueString())
	}
	if data.PapPassword.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.password."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.password."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.password."+"vipValue", strconv.FormatBool(data.PapPassword.ValueBool()))
	}

	if !data.PapPppAuthPasswordVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipVariableName", data.PapPppAuthPasswordVariable.ValueString())
	} else if data.PapPppAuthPassword.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.pap.sent-username.username.ppp-auth-password."+"vipValue", data.PapPppAuthPassword.ValueString())
	}

	if !data.EnableCoreRegionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipVariableName", data.EnableCoreRegionVariable.ValueString())
	} else if data.EnableCoreRegion.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipValue", strconv.FormatBool(data.EnableCoreRegion.ValueBool()))
	}

	if !data.CoreRegionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipVariableName", data.CoreRegionVariable.ValueString())
	} else if data.CoreRegion.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipValue", data.CoreRegion.ValueString())
	}

	if !data.SecondaryRegionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipVariableName", data.SecondaryRegionVariable.ValueString())
	} else if data.SecondaryRegion.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipValue", data.SecondaryRegion.ValueString())
	}
	if len(data.Encapsulation) > 0 {
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipPrimaryKey", []string{"encap"})
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipPrimaryKey", []string{"encap"})
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipValue", []interface{}{})
	}
	for _, item := range data.Encapsulation {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "encap")
		if item.EncapsulationType.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "encap."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "encap."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "encap."+"vipValue", item.EncapsulationType.ValueString())
		}
		itemAttributes = append(itemAttributes, "preference")

		if !item.PreferenceVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipVariableName", item.PreferenceVariable.ValueString())
		} else if item.Preference.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipValue", item.Preference.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "weight")

		if !item.WeightVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipVariableName", item.WeightVariable.ValueString())
		} else if item.Weight.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipValue", item.Weight.ValueInt64())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"tunnel-interface.encapsulation."+"vipValue.-1", itemBody)
	}

	if !data.GroupsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipVariableName", data.GroupsVariable.ValueString())
	} else if data.Groups.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipType", "constant")
		var values []int64
		data.Groups.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipValue", values)
	}

	if !data.BorderVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipVariableName", data.BorderVariable.ValueString())
	} else if data.Border.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipValue", strconv.FormatBool(data.Border.ValueBool()))
	}

	if !data.PerTunnelQosVariable.IsNull() {
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipVariableName", data.PerTunnelQosVariable.ValueString())
	} else if data.PerTunnelQos.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipValue", strconv.FormatBool(data.PerTunnelQos.ValueBool()))
	}

	if !data.PerTunnelQosAggregatorVariable.IsNull() {
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipVariableName", data.PerTunnelQosAggregatorVariable.ValueString())
	} else if data.PerTunnelQosAggregator.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipValue", strconv.FormatBool(data.PerTunnelQosAggregator.ValueBool()))
	}

	if !data.ColorVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipVariableName", data.ColorVariable.ValueString())
	} else if data.Color.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipValue", data.Color.ValueString())
	}

	if !data.LastResortCircuitVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipVariableName", data.LastResortCircuitVariable.ValueString())
	} else if data.LastResortCircuit.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipValue", strconv.FormatBool(data.LastResortCircuit.ValueBool()))
	}

	if !data.LowBandwidthLinkVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipVariableName", data.LowBandwidthLinkVariable.ValueString())
	} else if data.LowBandwidthLink.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipValue", strconv.FormatBool(data.LowBandwidthLink.ValueBool()))
	}

	if !data.TunnelTcpMssVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipVariableName", data.TunnelTcpMssVariable.ValueString())
	} else if data.TunnelTcpMss.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipValue", data.TunnelTcpMss.ValueInt64())
	}

	if !data.EnableClearDontFragmentVariable.IsNull() {
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipVariableName", data.EnableClearDontFragmentVariable.ValueString())
	} else if data.EnableClearDontFragment.IsNull() {
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipValue", strconv.FormatBool(data.EnableClearDontFragment.ValueBool()))
	}

	if !data.NetworkBroadcast1Variable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipVariableName", data.NetworkBroadcast1Variable.ValueString())
	} else if data.NetworkBroadcast1.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipValue", strconv.FormatBool(data.NetworkBroadcast1.ValueBool()))
	}

	if !data.MaxControlConnectionsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipVariableName", data.MaxControlConnectionsVariable.ValueString())
	} else if data.MaxControlConnections.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipValue", data.MaxControlConnections.ValueInt64())
	}

	if !data.ControlConnectionsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipVariableName", data.ControlConnectionsVariable.ValueString())
	} else if data.ControlConnections.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.control-connections."+"vipValue", strconv.FormatBool(data.ControlConnections.ValueBool()))
	}

	if !data.VbondAsStunServerVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipVariableName", data.VbondAsStunServerVariable.ValueString())
	} else if data.VbondAsStunServer.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipValue", strconv.FormatBool(data.VbondAsStunServer.ValueBool()))
	}

	if !data.ExcludeControllerGroupListVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipVariableName", data.ExcludeControllerGroupListVariable.ValueString())
	} else if data.ExcludeControllerGroupList.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipType", "constant")
		var values []int64
		data.ExcludeControllerGroupList.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipValue", values)
	}

	if !data.VmanageConnectionPreferenceVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipVariableName", data.VmanageConnectionPreferenceVariable.ValueString())
	} else if data.VmanageConnectionPreference.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipValue", data.VmanageConnectionPreference.ValueInt64())
	}

	if !data.PortHopVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipVariableName", data.PortHopVariable.ValueString())
	} else if data.PortHop.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipValue", strconv.FormatBool(data.PortHop.ValueBool()))
	}

	if !data.RestrictVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipVariableName", data.RestrictVariable.ValueString())
	} else if data.Restrict.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipValue", strconv.FormatBool(data.Restrict.ValueBool()))
	}

	if !data.CarrierVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipVariableName", data.CarrierVariable.ValueString())
	} else if data.Carrier.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipValue", data.Carrier.ValueString())
	}

	if !data.NatRefreshIntervalVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipVariableName", data.NatRefreshIntervalVariable.ValueString())
	} else if data.NatRefreshInterval.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipValue", data.NatRefreshInterval.ValueInt64())
	}

	if !data.HelloIntervalVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipVariableName", data.HelloIntervalVariable.ValueString())
	} else if data.HelloInterval.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipValue", data.HelloInterval.ValueInt64())
	}

	if !data.HelloToleranceVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipVariableName", data.HelloToleranceVariable.ValueString())
	} else if data.HelloTolerance.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipValue", data.HelloTolerance.ValueInt64())
	}

	if !data.BindLoopbackTunnelVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipVariableName", data.BindLoopbackTunnelVariable.ValueString())
	} else if data.BindLoopbackTunnel.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipValue", data.BindLoopbackTunnel.ValueString())
	}

	if !data.AllVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipVariableName", data.AllVariable.ValueString())
	} else if data.All.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipValue", strconv.FormatBool(data.All.ValueBool()))
	}

	if !data.NetworkBroadcast2Variable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipVariableName", data.NetworkBroadcast2Variable.ValueString())
	} else if data.NetworkBroadcast2.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipValue", strconv.FormatBool(data.NetworkBroadcast2.ValueBool()))
	}

	if !data.BgpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipVariableName", data.BgpVariable.ValueString())
	} else if data.Bgp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipValue", strconv.FormatBool(data.Bgp.ValueBool()))
	}

	if !data.DhcpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipVariableName", data.DhcpVariable.ValueString())
	} else if data.Dhcp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipValue", strconv.FormatBool(data.Dhcp.ValueBool()))
	}

	if !data.DnsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipVariableName", data.DnsVariable.ValueString())
	} else if data.Dns.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipValue", strconv.FormatBool(data.Dns.ValueBool()))
	}

	if !data.IcmpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipVariableName", data.IcmpVariable.ValueString())
	} else if data.Icmp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipValue", strconv.FormatBool(data.Icmp.ValueBool()))
	}

	if !data.SshVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipVariableName", data.SshVariable.ValueString())
	} else if data.Ssh.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipValue", strconv.FormatBool(data.Ssh.ValueBool()))
	}

	if !data.NetconfVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipVariableName", data.NetconfVariable.ValueString())
	} else if data.Netconf.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipValue", strconv.FormatBool(data.Netconf.ValueBool()))
	}

	if !data.OspfVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipVariableName", data.OspfVariable.ValueString())
	} else if data.Ospf.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipValue", strconv.FormatBool(data.Ospf.ValueBool()))
	}

	if !data.StunVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipVariableName", data.StunVariable.ValueString())
	} else if data.Stun.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipValue", strconv.FormatBool(data.Stun.ValueBool()))
	}

	if !data.SnmpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipVariableName", data.SnmpVariable.ValueString())
	} else if data.Snmp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipValue", strconv.FormatBool(data.Snmp.ValueBool()))
	}

	if !data.HttpsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipVariableName", data.HttpsVariable.ValueString())
	} else if data.Https.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipValue", strconv.FormatBool(data.Https.ValueBool()))
	}

	if !data.DisableFragmentationVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.disable."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.disable."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.disable."+"vipVariableName", data.DisableFragmentationVariable.ValueString())
	} else if data.DisableFragmentation.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.disable."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.disable."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.disable."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.disable."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.disable."+"vipValue", strconv.FormatBool(data.DisableFragmentation.ValueBool()))
	}

	if !data.FragmentMaxDelayVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.delay.delay-value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.delay.delay-value."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.delay.delay-value."+"vipVariableName", data.FragmentMaxDelayVariable.ValueString())
	} else if data.FragmentMaxDelay.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.delay.delay-value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.delay.delay-value."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.delay.delay-value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.delay.delay-value."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.multilink.fragment.delay.delay-value."+"vipValue", data.FragmentMaxDelay.ValueInt64())
	}

	if !data.InterleavingFragmentVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.multilink.interleave."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.multilink.interleave."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ppp.multilink.interleave."+"vipVariableName", data.InterleavingFragmentVariable.ValueString())
	} else if data.InterleavingFragment.IsNull() {
		body, _ = sjson.Set(body, path+"ppp.multilink.interleave."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.multilink.interleave."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ppp.multilink.interleave."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ppp.multilink.interleave."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ppp.multilink.interleave."+"vipValue", strconv.FormatBool(data.InterleavingFragment.ValueBool()))
	}

	if !data.ClearDontFragmentBitVariable.IsNull() {
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipVariableName", data.ClearDontFragmentBitVariable.ValueString())
	} else if data.ClearDontFragmentBit.IsNull() {
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipValue", strconv.FormatBool(data.ClearDontFragmentBit.ValueBool()))
	}

	if !data.PmtuDiscoveryVariable.IsNull() {
		body, _ = sjson.Set(body, path+"pmtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"pmtu."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"pmtu."+"vipVariableName", data.PmtuDiscoveryVariable.ValueString())
	} else if data.PmtuDiscovery.IsNull() {
		body, _ = sjson.Set(body, path+"pmtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"pmtu."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"pmtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"pmtu."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"pmtu."+"vipValue", strconv.FormatBool(data.PmtuDiscovery.ValueBool()))
	}

	if !data.IpMtuVariable.IsNull() {
		body, _ = sjson.Set(body, path+"mtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"mtu."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"mtu."+"vipVariableName", data.IpMtuVariable.ValueString())
	} else if data.IpMtu.IsNull() {
		body, _ = sjson.Set(body, path+"mtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"mtu."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"mtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"mtu."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"mtu."+"vipValue", data.IpMtu.ValueInt64())
	}

	if !data.StaticIngressQosVariable.IsNull() {
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipVariableName", data.StaticIngressQosVariable.ValueString())
	} else if data.StaticIngressQos.IsNull() {
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipValue", data.StaticIngressQos.ValueInt64())
	}

	if !data.TcpMssVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipVariableName", data.TcpMssVariable.ValueString())
	} else if data.TcpMss.IsNull() {
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipValue", data.TcpMss.ValueInt64())
	}

	if !data.IpDirectedBroadcastVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipVariableName", data.IpDirectedBroadcastVariable.ValueString())
	} else if data.IpDirectedBroadcast.IsNull() {
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ip-directed-broadcast."+"vipValue", strconv.FormatBool(data.IpDirectedBroadcast.ValueBool()))
	}

	if !data.TlocExtensionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipVariableName", data.TlocExtensionVariable.ValueString())
	} else if data.TlocExtension.IsNull() {
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipValue", data.TlocExtension.ValueString())
	}

	if !data.AdministrativeShutdownVariable.IsNull() {
		body, _ = sjson.Set(body, path+"shutdown."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shutdown."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"shutdown."+"vipVariableName", data.AdministrativeShutdownVariable.ValueString())
	} else if data.AdministrativeShutdown.IsNull() {
		body, _ = sjson.Set(body, path+"shutdown."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shutdown."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"shutdown."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shutdown."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"shutdown."+"vipValue", strconv.FormatBool(data.AdministrativeShutdown.ValueBool()))
	}

	if !data.LinkAutonegotiateVariable.IsNull() {
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipVariableName", data.LinkAutonegotiateVariable.ValueString())
	} else if data.LinkAutonegotiate.IsNull() {
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipValue", strconv.FormatBool(data.LinkAutonegotiate.ValueBool()))
	}

	if !data.ShapingRateVariable.IsNull() {
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipVariableName", data.ShapingRateVariable.ValueString())
	} else if data.ShapingRate.IsNull() {
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipValue", data.ShapingRate.ValueInt64())
	}

	if !data.QosMapVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-map."+"vipVariableName", data.QosMapVariable.ValueString())
	} else if data.QosMap.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"qos-map."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-map."+"vipValue", data.QosMap.ValueString())
	}

	if !data.VpnQosMapVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipVariableName", data.VpnQosMapVariable.ValueString())
	} else if data.VpnQosMap.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipValue", data.VpnQosMap.ValueString())
	}

	if !data.BandwidthUpstreamVariable.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipVariableName", data.BandwidthUpstreamVariable.ValueString())
	} else if data.BandwidthUpstream.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"bandwidth-upstream."+"vipValue", data.BandwidthUpstream.ValueInt64())
	}

	if !data.BandwidthDownstreamVariable.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipVariableName", data.BandwidthDownstreamVariable.ValueString())
	} else if data.BandwidthDownstream.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipValue", data.BandwidthDownstream.ValueInt64())
	}

	if !data.WriteRuleVariable.IsNull() {
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipVariableName", data.WriteRuleVariable.ValueString())
	} else if data.WriteRule.IsNull() {
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipValue", data.WriteRule.ValueString())
	}
	if len(data.AccessList) > 0 {
		body, _ = sjson.Set(body, path+"access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"access-list."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"access-list."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"access-list."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"access-list."+"vipValue", []interface{}{})
	}
	for _, item := range data.AccessList {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "direction")
		if item.Direction.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipValue", item.Direction.ValueString())
		}
		itemAttributes = append(itemAttributes, "acl-name")

		if !item.AclNameVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipVariableName", item.AclNameVariable.ValueString())
		} else if item.AclName.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipValue", item.AclName.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"access-list."+"vipValue.-1", itemBody)
	}
	if len(data.ControllerTxExList) > 0 {
		body, _ = sjson.Set(body, path+"controller.controller-tx-ex-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"controller.controller-tx-ex-list."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"controller.controller-tx-ex-list."+"vipPrimaryKey", []string{"name", "number"})
		body, _ = sjson.Set(body, path+"controller.controller-tx-ex-list."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"controller.controller-tx-ex-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"controller.controller-tx-ex-list."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"controller.controller-tx-ex-list."+"vipPrimaryKey", []string{"name", "number"})
		body, _ = sjson.Set(body, path+"controller.controller-tx-ex-list."+"vipValue", []interface{}{})
	}
	for _, item := range data.ControllerTxExList {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "name")
		if item.CardType.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "name."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "name."+"vipValue", item.CardType.ValueString())
		}
		itemAttributes = append(itemAttributes, "number")
		if item.Slot.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "number."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "number."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "number."+"vipValue", item.Slot.ValueString())
		}
		itemAttributes = append(itemAttributes, "framing")

		if !item.FramingVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "framing."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "framing."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "framing."+"vipVariableName", item.FramingVariable.ValueString())
		} else if item.Framing.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "framing."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "framing."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "framing."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "framing."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "framing."+"vipValue", item.Framing.ValueString())
		}
		itemAttributes = append(itemAttributes, "line-mode")

		if !item.LineModeVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "clock.source.line.line-mode."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "clock.source.line.line-mode."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "clock.source.line.line-mode."+"vipVariableName", item.LineModeVariable.ValueString())
		} else if item.LineMode.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "clock.source.line.line-mode."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "clock.source.line.line-mode."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "clock.source.line.line-mode."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "clock.source.line.line-mode."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "clock.source.line.line-mode."+"vipValue", item.LineMode.ValueString())
		}
		itemAttributes = append(itemAttributes, "internal")

		if !item.InternalVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "clock.source.internal."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "clock.source.internal."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "clock.source.internal."+"vipVariableName", item.InternalVariable.ValueString())
		} else if item.Internal.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "clock.source.internal."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "clock.source.internal."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "clock.source.internal."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "clock.source.internal."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "clock.source.internal."+"vipValue", strconv.FormatBool(item.Internal.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "description")

		if !item.DescriptionVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "description."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipVariableName", item.DescriptionVariable.ValueString())
		} else if item.Description.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "description."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "description."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipValue", item.Description.ValueString())
		}
		itemAttributes = append(itemAttributes, "linecode")

		if !item.LinecodeVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "linecode."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "linecode."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "linecode."+"vipVariableName", item.LinecodeVariable.ValueString())
		} else if item.Linecode.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "linecode."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "linecode."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "linecode."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "linecode."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "linecode."+"vipValue", item.Linecode.ValueString())
		}
		itemAttributes = append(itemAttributes, "long")
		if item.SetLengthForLong.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "cablelength.long."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "cablelength.long."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "cablelength.long."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "cablelength.long."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "cablelength.long."+"vipValue", item.SetLengthForLong.ValueString())
		}
		itemAttributes = append(itemAttributes, "short")
		if item.SetLengthForShort.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "cablelength.short."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "cablelength.short."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "cablelength.short."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "cablelength.short."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "cablelength.short."+"vipValue", item.SetLengthForShort.ValueString())
		}
		itemAttributes = append(itemAttributes, "channel-group")
		if len(item.ChannelGroupList) > 0 {
			itemBody, _ = sjson.Set(itemBody, "channel-group."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "channel-group."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "channel-group."+"vipPrimaryKey", []string{"number"})
			itemBody, _ = sjson.Set(itemBody, "channel-group."+"vipValue", []interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "channel-group."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "channel-group."+"vipType", "ignore")
			itemBody, _ = sjson.Set(itemBody, "channel-group."+"vipPrimaryKey", []string{"number"})
			itemBody, _ = sjson.Set(itemBody, "channel-group."+"vipValue", []interface{}{})
		}
		for _, childItem := range item.ChannelGroupList {
			itemChildBody := ""
			itemChildAttributes := make([]string, 0)
			itemChildAttributes = append(itemChildAttributes, "number")

			if !childItem.ChannelGroupVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "number."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "number."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "number."+"vipVariableName", childItem.ChannelGroupVariable.ValueString())
			} else if childItem.ChannelGroup.IsNull() {
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "number."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "number."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "number."+"vipValue", childItem.ChannelGroup.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "timeslots")

			if !childItem.TimeslotsVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "timeslots."+"vipObjectType", "list")
				itemChildBody, _ = sjson.Set(itemChildBody, "timeslots."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "timeslots."+"vipVariableName", childItem.TimeslotsVariable.ValueString())
			} else if childItem.Timeslots.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "timeslots."+"vipObjectType", "list")
				itemChildBody, _ = sjson.Set(itemChildBody, "timeslots."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "timeslots."+"vipObjectType", "list")
				itemChildBody, _ = sjson.Set(itemChildBody, "timeslots."+"vipType", "constant")
				var values []string
				childItem.Timeslots.ElementsAs(ctx, &values, false)
				itemChildBody, _ = sjson.Set(itemChildBody, "timeslots."+"vipValue", values)
			}
			if !childItem.Optional.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "vipOptional", childItem.Optional.ValueBool())
				itemChildBody, _ = sjson.Set(itemChildBody, "priority-order", itemChildAttributes)
			}
			itemBody, _ = sjson.SetRaw(itemBody, "channel-group."+"vipValue.-1", itemChildBody)
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"controller.controller-tx-ex-list."+"vipValue.-1", itemBody)
	}
	if len(data.NimInterfaceList) > 0 {
		body, _ = sjson.Set(body, path+"controller.nim-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"controller.nim-list."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"controller.nim-list."+"vipPrimaryKey", []string{"nim", "if-name"})
		body, _ = sjson.Set(body, path+"controller.nim-list."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"controller.nim-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"controller.nim-list."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"controller.nim-list."+"vipPrimaryKey", []string{"nim", "if-name"})
		body, _ = sjson.Set(body, path+"controller.nim-list."+"vipValue", []interface{}{})
	}
	for _, item := range data.NimInterfaceList {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "nim")

		if !item.NimSerialInterfaceTypeVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "nim."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "nim."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "nim."+"vipVariableName", item.NimSerialInterfaceTypeVariable.ValueString())
		} else if item.NimSerialInterfaceType.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "nim."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "nim."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "nim."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "nim."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "nim."+"vipValue", item.NimSerialInterfaceType.ValueString())
		}
		itemAttributes = append(itemAttributes, "if-name")

		if !item.InterfaceNameVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "if-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "if-name."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "if-name."+"vipVariableName", item.InterfaceNameVariable.ValueString())
		} else if item.InterfaceName.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "if-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "if-name."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "if-name."+"vipValue", item.InterfaceName.ValueString())
		}
		itemAttributes = append(itemAttributes, "description")

		if !item.InterfaceDescriptionVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "description."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipVariableName", item.InterfaceDescriptionVariable.ValueString())
		} else if item.InterfaceDescription.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "description."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "description."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "description."+"vipValue", item.InterfaceDescription.ValueString())
		}
		itemAttributes = append(itemAttributes, "bandwidth")

		if !item.BandwidthVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "bandwidth."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "bandwidth."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "bandwidth."+"vipVariableName", item.BandwidthVariable.ValueString())
		} else if item.Bandwidth.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "bandwidth."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "bandwidth."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "bandwidth."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "bandwidth."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "bandwidth."+"vipValue", item.Bandwidth.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "clock-rate")

		if !item.ClockRateVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "DCE-mode-config.clock-rate."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "DCE-mode-config.clock-rate."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "DCE-mode-config.clock-rate."+"vipVariableName", item.ClockRateVariable.ValueString())
		} else if item.ClockRate.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "DCE-mode-config.clock-rate."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "DCE-mode-config.clock-rate."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "DCE-mode-config.clock-rate."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "DCE-mode-config.clock-rate."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "DCE-mode-config.clock-rate."+"vipValue", item.ClockRate.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "encapsulation-serial")

		if !item.EncapsulationSerialVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "encapsulation-serial."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "encapsulation-serial."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "encapsulation-serial."+"vipVariableName", item.EncapsulationSerialVariable.ValueString())
		} else if item.EncapsulationSerial.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "encapsulation-serial."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "encapsulation-serial."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "encapsulation-serial."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "encapsulation-serial."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "encapsulation-serial."+"vipValue", item.EncapsulationSerial.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"controller.nim-list."+"vipValue.-1", itemBody)
	}
	return body
}

func (data *VPNInterfaceMultilink) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("deviceType"); value.Exists() {
		data.DeviceTypes = helpers.GetStringSet(value.Array())
	} else {
		data.DeviceTypes = types.SetNull(types.StringType)
	}
	if value := res.Get("templateDescription"); value.Exists() && value.String() != "" {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("templateName"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("templateType"); value.Exists() {
		data.TemplateType = types.StringValue(value.String())
	} else {
		data.TemplateType = types.StringNull()
	}

	path := "templateDefinition."
	if value := res.Get(path + "if-name.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.InterfaceName = types.StringNull()

			v := res.Get(path + "if-name.vipVariableName")
			data.InterfaceNameVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.InterfaceName = types.StringNull()
			data.InterfaceNameVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "if-name.vipValue")
			data.InterfaceName = types.StringValue(v.String())
			data.InterfaceNameVariable = types.StringNull()
		}
	} else {
		data.InterfaceName = types.StringNull()
		data.InterfaceNameVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.multilink.group.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.MultilinkGroupNumber = types.Int64Null()

			v := res.Get(path + "ppp.multilink.group.vipVariableName")
			data.MultilinkGroupNumberVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.MultilinkGroupNumber = types.Int64Null()
			data.MultilinkGroupNumberVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.multilink.group.vipValue")
			data.MultilinkGroupNumber = types.Int64Value(v.Int())
			data.MultilinkGroupNumberVariable = types.StringNull()
		}
	} else {
		data.MultilinkGroupNumber = types.Int64Null()
		data.MultilinkGroupNumberVariable = types.StringNull()
	}
	if value := res.Get(path + "description.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.InterfaceDescription = types.StringNull()

			v := res.Get(path + "description.vipVariableName")
			data.InterfaceDescriptionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.InterfaceDescription = types.StringNull()
			data.InterfaceDescriptionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "description.vipValue")
			data.InterfaceDescription = types.StringValue(v.String())
			data.InterfaceDescriptionVariable = types.StringNull()
		}
	} else {
		data.InterfaceDescription = types.StringNull()
		data.InterfaceDescriptionVariable = types.StringNull()
	}
	if value := res.Get(path + "ip.address.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ipv4Address = types.StringNull()

			v := res.Get(path + "ip.address.vipVariableName")
			data.Ipv4AddressVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ipv4Address = types.StringNull()
			data.Ipv4AddressVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ip.address.vipValue")
			data.Ipv4Address = types.StringValue(v.String())
			data.Ipv4AddressVariable = types.StringNull()
		}
	} else {
		data.Ipv4Address = types.StringNull()
		data.Ipv4AddressVariable = types.StringNull()
	}
	if value := res.Get(path + "ipv6.address.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ipv6Address = types.StringNull()

			v := res.Get(path + "ipv6.address.vipVariableName")
			data.Ipv6AddressVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ipv6Address = types.StringNull()
			data.Ipv6AddressVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ipv6.address.vipValue")
			data.Ipv6Address = types.StringValue(v.String())
			data.Ipv6AddressVariable = types.StringNull()
		}
	} else {
		data.Ipv6Address = types.StringNull()
		data.Ipv6AddressVariable = types.StringNull()
	}
	if value := res.Get(path + "access-list.vipValue"); len(value.Array()) > 0 {
		data.Ipv6AccessLists = make([]VPNInterfaceMultilinkIpv6AccessLists, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceMultilinkIpv6AccessLists{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("direction.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("direction.vipValue")
					item.Direction = types.StringValue(cv.String())

				}
			} else {
				item.Direction = types.StringNull()

			}
			if cValue := v.Get("acl-name.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.AclName = types.StringNull()

					cv := v.Get("acl-name.vipVariableName")
					item.AclNameVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.AclName = types.StringNull()
					item.AclNameVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("acl-name.vipValue")
					item.AclName = types.StringValue(cv.String())
					item.AclNameVariable = types.StringNull()
				}
			} else {
				item.AclName = types.StringNull()
				item.AclNameVariable = types.StringNull()
			}
			data.Ipv6AccessLists = append(data.Ipv6AccessLists, item)
			return true
		})
	} else {
		if len(data.Ipv6AccessLists) > 0 {
			data.Ipv6AccessLists = []VPNInterfaceMultilinkIpv6AccessLists{}
		}
	}
	if value := res.Get(path + "ppp.authentication.method.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PppAuthenticationProtocol = types.StringNull()

		} else if value.String() == "ignore" {
			data.PppAuthenticationProtocol = types.StringNull()

		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.authentication.method.vipValue")
			data.PppAuthenticationProtocol = types.StringValue(v.String())

		}
	} else {
		data.PppAuthenticationProtocol = types.StringNull()

	}
	if value := res.Get(path + "ppp.authentication.pap.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PppAuthenticationProtocolPap = types.BoolNull()

			v := res.Get(path + "ppp.authentication.pap.vipVariableName")
			data.PppAuthenticationProtocolPapVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PppAuthenticationProtocolPap = types.BoolNull()
			data.PppAuthenticationProtocolPapVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.authentication.pap.vipValue")
			data.PppAuthenticationProtocolPap = types.BoolValue(v.Bool())
			data.PppAuthenticationProtocolPapVariable = types.StringNull()
		}
	} else {
		data.PppAuthenticationProtocolPap = types.BoolNull()
		data.PppAuthenticationProtocolPapVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.authentication.callin.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.AuthenticationType = types.StringNull()

			v := res.Get(path + "ppp.authentication.callin.vipVariableName")
			data.AuthenticationTypeVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.AuthenticationType = types.StringNull()
			data.AuthenticationTypeVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.authentication.callin.vipValue")
			data.AuthenticationType = types.StringValue(v.String())
			data.AuthenticationTypeVariable = types.StringNull()
		}
	} else {
		data.AuthenticationType = types.StringNull()
		data.AuthenticationTypeVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.chap.hostname.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ChapHostname = types.StringNull()

			v := res.Get(path + "ppp.chap.hostname.vipVariableName")
			data.ChapHostnameVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ChapHostname = types.StringNull()
			data.ChapHostnameVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.chap.hostname.vipValue")
			data.ChapHostname = types.StringValue(v.String())
			data.ChapHostnameVariable = types.StringNull()
		}
	} else {
		data.ChapHostname = types.StringNull()
		data.ChapHostnameVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.chap.password.ppp-auth-password.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ChapPppAuthPassword = types.StringNull()

			v := res.Get(path + "ppp.chap.password.ppp-auth-password.vipVariableName")
			data.ChapPppAuthPasswordVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ChapPppAuthPassword = types.StringNull()
			data.ChapPppAuthPasswordVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.chap.password.ppp-auth-password.vipValue")
			data.ChapPppAuthPassword = types.StringValue(v.String())
			data.ChapPppAuthPasswordVariable = types.StringNull()
		}
	} else {
		data.ChapPppAuthPassword = types.StringNull()
		data.ChapPppAuthPasswordVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.pap.sent-username.username.username-string.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PapUsername = types.StringNull()

			v := res.Get(path + "ppp.pap.sent-username.username.username-string.vipVariableName")
			data.PapUsernameVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PapUsername = types.StringNull()
			data.PapUsernameVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.pap.sent-username.username.username-string.vipValue")
			data.PapUsername = types.StringValue(v.String())
			data.PapUsernameVariable = types.StringNull()
		}
	} else {
		data.PapUsername = types.StringNull()
		data.PapUsernameVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.pap.sent-username.username.password.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PapPassword = types.BoolNull()

		} else if value.String() == "ignore" {
			data.PapPassword = types.BoolNull()

		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.pap.sent-username.username.password.vipValue")
			data.PapPassword = types.BoolValue(v.Bool())

		}
	} else {
		data.PapPassword = types.BoolNull()

	}
	if value := res.Get(path + "ppp.pap.sent-username.username.ppp-auth-password.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PapPppAuthPassword = types.StringNull()

			v := res.Get(path + "ppp.pap.sent-username.username.ppp-auth-password.vipVariableName")
			data.PapPppAuthPasswordVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PapPppAuthPassword = types.StringNull()
			data.PapPppAuthPasswordVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.pap.sent-username.username.ppp-auth-password.vipValue")
			data.PapPppAuthPassword = types.StringValue(v.String())
			data.PapPppAuthPasswordVariable = types.StringNull()
		}
	} else {
		data.PapPppAuthPassword = types.StringNull()
		data.PapPppAuthPasswordVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.enable-core-region.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.EnableCoreRegion = types.BoolNull()

			v := res.Get(path + "tunnel-interface.enable-core-region.vipVariableName")
			data.EnableCoreRegionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.EnableCoreRegion = types.BoolNull()
			data.EnableCoreRegionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.enable-core-region.vipValue")
			data.EnableCoreRegion = types.BoolValue(v.Bool())
			data.EnableCoreRegionVariable = types.StringNull()
		}
	} else {
		data.EnableCoreRegion = types.BoolNull()
		data.EnableCoreRegionVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.core-region.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.CoreRegion = types.StringNull()

			v := res.Get(path + "tunnel-interface.core-region.vipVariableName")
			data.CoreRegionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.CoreRegion = types.StringNull()
			data.CoreRegionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.core-region.vipValue")
			data.CoreRegion = types.StringValue(v.String())
			data.CoreRegionVariable = types.StringNull()
		}
	} else {
		data.CoreRegion = types.StringNull()
		data.CoreRegionVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.secondary-region.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SecondaryRegion = types.StringNull()

			v := res.Get(path + "tunnel-interface.secondary-region.vipVariableName")
			data.SecondaryRegionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SecondaryRegion = types.StringNull()
			data.SecondaryRegionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.secondary-region.vipValue")
			data.SecondaryRegion = types.StringValue(v.String())
			data.SecondaryRegionVariable = types.StringNull()
		}
	} else {
		data.SecondaryRegion = types.StringNull()
		data.SecondaryRegionVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.encapsulation.vipValue"); len(value.Array()) > 0 {
		data.Encapsulation = make([]VPNInterfaceMultilinkEncapsulation, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceMultilinkEncapsulation{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("encap.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.EncapsulationType = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.EncapsulationType = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("encap.vipValue")
					item.EncapsulationType = types.StringValue(cv.String())

				}
			} else {
				item.EncapsulationType = types.StringNull()

			}
			if cValue := v.Get("preference.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Preference = types.Int64Null()

					cv := v.Get("preference.vipVariableName")
					item.PreferenceVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Preference = types.Int64Null()
					item.PreferenceVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("preference.vipValue")
					item.Preference = types.Int64Value(cv.Int())
					item.PreferenceVariable = types.StringNull()
				}
			} else {
				item.Preference = types.Int64Null()
				item.PreferenceVariable = types.StringNull()
			}
			if cValue := v.Get("weight.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Weight = types.Int64Null()

					cv := v.Get("weight.vipVariableName")
					item.WeightVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Weight = types.Int64Null()
					item.WeightVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("weight.vipValue")
					item.Weight = types.Int64Value(cv.Int())
					item.WeightVariable = types.StringNull()
				}
			} else {
				item.Weight = types.Int64Null()
				item.WeightVariable = types.StringNull()
			}
			data.Encapsulation = append(data.Encapsulation, item)
			return true
		})
	} else {
		if len(data.Encapsulation) > 0 {
			data.Encapsulation = []VPNInterfaceMultilinkEncapsulation{}
		}
	}
	if value := res.Get(path + "tunnel-interface.group.vipType"); len(value.Array()) > 0 {
		if value.String() == "variableName" {
			data.Groups = types.SetNull(types.Int64Type)

			v := res.Get(path + "tunnel-interface.group.vipVariableName")
			data.GroupsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Groups = types.SetNull(types.Int64Type)
			data.GroupsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.group.vipValue")
			data.Groups = helpers.GetInt64Set(v.Array())
			data.GroupsVariable = types.StringNull()
		}
	} else {
		data.Groups = types.SetNull(types.Int64Type)
		data.GroupsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.border.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Border = types.BoolNull()

			v := res.Get(path + "tunnel-interface.border.vipVariableName")
			data.BorderVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Border = types.BoolNull()
			data.BorderVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.border.vipValue")
			data.Border = types.BoolValue(v.Bool())
			data.BorderVariable = types.StringNull()
		}
	} else {
		data.Border = types.BoolNull()
		data.BorderVariable = types.StringNull()
	}
	if value := res.Get(path + "per-tunnel-qos.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PerTunnelQos = types.BoolNull()

			v := res.Get(path + "per-tunnel-qos.vipVariableName")
			data.PerTunnelQosVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PerTunnelQos = types.BoolNull()
			data.PerTunnelQosVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "per-tunnel-qos.vipValue")
			data.PerTunnelQos = types.BoolValue(v.Bool())
			data.PerTunnelQosVariable = types.StringNull()
		}
	} else {
		data.PerTunnelQos = types.BoolNull()
		data.PerTunnelQosVariable = types.StringNull()
	}
	if value := res.Get(path + "per-tunnel-qos-aggregator.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PerTunnelQosAggregator = types.BoolNull()

			v := res.Get(path + "per-tunnel-qos-aggregator.vipVariableName")
			data.PerTunnelQosAggregatorVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PerTunnelQosAggregator = types.BoolNull()
			data.PerTunnelQosAggregatorVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "per-tunnel-qos-aggregator.vipValue")
			data.PerTunnelQosAggregator = types.BoolValue(v.Bool())
			data.PerTunnelQosAggregatorVariable = types.StringNull()
		}
	} else {
		data.PerTunnelQosAggregator = types.BoolNull()
		data.PerTunnelQosAggregatorVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.color.value.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Color = types.StringNull()

			v := res.Get(path + "tunnel-interface.color.value.vipVariableName")
			data.ColorVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Color = types.StringNull()
			data.ColorVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.color.value.vipValue")
			data.Color = types.StringValue(v.String())
			data.ColorVariable = types.StringNull()
		}
	} else {
		data.Color = types.StringNull()
		data.ColorVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.last-resort-circuit.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.LastResortCircuit = types.BoolNull()

			v := res.Get(path + "tunnel-interface.last-resort-circuit.vipVariableName")
			data.LastResortCircuitVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.LastResortCircuit = types.BoolNull()
			data.LastResortCircuitVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.last-resort-circuit.vipValue")
			data.LastResortCircuit = types.BoolValue(v.Bool())
			data.LastResortCircuitVariable = types.StringNull()
		}
	} else {
		data.LastResortCircuit = types.BoolNull()
		data.LastResortCircuitVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.low-bandwidth-link.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.LowBandwidthLink = types.BoolNull()

			v := res.Get(path + "tunnel-interface.low-bandwidth-link.vipVariableName")
			data.LowBandwidthLinkVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.LowBandwidthLink = types.BoolNull()
			data.LowBandwidthLinkVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.low-bandwidth-link.vipValue")
			data.LowBandwidthLink = types.BoolValue(v.Bool())
			data.LowBandwidthLinkVariable = types.StringNull()
		}
	} else {
		data.LowBandwidthLink = types.BoolNull()
		data.LowBandwidthLinkVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.tunnel-tcp-mss-adjust.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TunnelTcpMss = types.Int64Null()

			v := res.Get(path + "tunnel-interface.tunnel-tcp-mss-adjust.vipVariableName")
			data.TunnelTcpMssVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TunnelTcpMss = types.Int64Null()
			data.TunnelTcpMssVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.tunnel-tcp-mss-adjust.vipValue")
			data.TunnelTcpMss = types.Int64Value(v.Int())
			data.TunnelTcpMssVariable = types.StringNull()
		}
	} else {
		data.TunnelTcpMss = types.Int64Null()
		data.TunnelTcpMssVariable = types.StringNull()
	}
	if value := res.Get(path + "clear-dont-fragment.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.EnableClearDontFragment = types.BoolNull()

			v := res.Get(path + "clear-dont-fragment.vipVariableName")
			data.EnableClearDontFragmentVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.EnableClearDontFragment = types.BoolNull()
			data.EnableClearDontFragmentVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "clear-dont-fragment.vipValue")
			data.EnableClearDontFragment = types.BoolValue(v.Bool())
			data.EnableClearDontFragmentVariable = types.StringNull()
		}
	} else {
		data.EnableClearDontFragment = types.BoolNull()
		data.EnableClearDontFragmentVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.network-broadcast.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.NetworkBroadcast1 = types.BoolNull()

			v := res.Get(path + "tunnel-interface.network-broadcast.vipVariableName")
			data.NetworkBroadcast1Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.NetworkBroadcast1 = types.BoolNull()
			data.NetworkBroadcast1Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.network-broadcast.vipValue")
			data.NetworkBroadcast1 = types.BoolValue(v.Bool())
			data.NetworkBroadcast1Variable = types.StringNull()
		}
	} else {
		data.NetworkBroadcast1 = types.BoolNull()
		data.NetworkBroadcast1Variable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.max-control-connections.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.MaxControlConnections = types.Int64Null()

			v := res.Get(path + "tunnel-interface.max-control-connections.vipVariableName")
			data.MaxControlConnectionsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.MaxControlConnections = types.Int64Null()
			data.MaxControlConnectionsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.max-control-connections.vipValue")
			data.MaxControlConnections = types.Int64Value(v.Int())
			data.MaxControlConnectionsVariable = types.StringNull()
		}
	} else {
		data.MaxControlConnections = types.Int64Null()
		data.MaxControlConnectionsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.control-connections.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ControlConnections = types.BoolNull()

			v := res.Get(path + "tunnel-interface.control-connections.vipVariableName")
			data.ControlConnectionsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ControlConnections = types.BoolNull()
			data.ControlConnectionsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.control-connections.vipValue")
			data.ControlConnections = types.BoolValue(v.Bool())
			data.ControlConnectionsVariable = types.StringNull()
		}
	} else {
		data.ControlConnections = types.BoolNull()
		data.ControlConnectionsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.vbond-as-stun-server.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.VbondAsStunServer = types.BoolNull()

			v := res.Get(path + "tunnel-interface.vbond-as-stun-server.vipVariableName")
			data.VbondAsStunServerVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.VbondAsStunServer = types.BoolNull()
			data.VbondAsStunServerVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.vbond-as-stun-server.vipValue")
			data.VbondAsStunServer = types.BoolValue(v.Bool())
			data.VbondAsStunServerVariable = types.StringNull()
		}
	} else {
		data.VbondAsStunServer = types.BoolNull()
		data.VbondAsStunServerVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.exclude-controller-group-list.vipType"); len(value.Array()) > 0 {
		if value.String() == "variableName" {
			data.ExcludeControllerGroupList = types.SetNull(types.Int64Type)

			v := res.Get(path + "tunnel-interface.exclude-controller-group-list.vipVariableName")
			data.ExcludeControllerGroupListVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ExcludeControllerGroupList = types.SetNull(types.Int64Type)
			data.ExcludeControllerGroupListVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.exclude-controller-group-list.vipValue")
			data.ExcludeControllerGroupList = helpers.GetInt64Set(v.Array())
			data.ExcludeControllerGroupListVariable = types.StringNull()
		}
	} else {
		data.ExcludeControllerGroupList = types.SetNull(types.Int64Type)
		data.ExcludeControllerGroupListVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.vmanage-connection-preference.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.VmanageConnectionPreference = types.Int64Null()

			v := res.Get(path + "tunnel-interface.vmanage-connection-preference.vipVariableName")
			data.VmanageConnectionPreferenceVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.VmanageConnectionPreference = types.Int64Null()
			data.VmanageConnectionPreferenceVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.vmanage-connection-preference.vipValue")
			data.VmanageConnectionPreference = types.Int64Value(v.Int())
			data.VmanageConnectionPreferenceVariable = types.StringNull()
		}
	} else {
		data.VmanageConnectionPreference = types.Int64Null()
		data.VmanageConnectionPreferenceVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.port-hop.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PortHop = types.BoolNull()

			v := res.Get(path + "tunnel-interface.port-hop.vipVariableName")
			data.PortHopVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PortHop = types.BoolNull()
			data.PortHopVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.port-hop.vipValue")
			data.PortHop = types.BoolValue(v.Bool())
			data.PortHopVariable = types.StringNull()
		}
	} else {
		data.PortHop = types.BoolNull()
		data.PortHopVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.color.restrict.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Restrict = types.BoolNull()

			v := res.Get(path + "tunnel-interface.color.restrict.vipVariableName")
			data.RestrictVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Restrict = types.BoolNull()
			data.RestrictVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.color.restrict.vipValue")
			data.Restrict = types.BoolValue(v.Bool())
			data.RestrictVariable = types.StringNull()
		}
	} else {
		data.Restrict = types.BoolNull()
		data.RestrictVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.carrier.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Carrier = types.StringNull()

			v := res.Get(path + "tunnel-interface.carrier.vipVariableName")
			data.CarrierVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Carrier = types.StringNull()
			data.CarrierVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.carrier.vipValue")
			data.Carrier = types.StringValue(v.String())
			data.CarrierVariable = types.StringNull()
		}
	} else {
		data.Carrier = types.StringNull()
		data.CarrierVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.nat-refresh-interval.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.NatRefreshInterval = types.Int64Null()

			v := res.Get(path + "tunnel-interface.nat-refresh-interval.vipVariableName")
			data.NatRefreshIntervalVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.NatRefreshInterval = types.Int64Null()
			data.NatRefreshIntervalVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.nat-refresh-interval.vipValue")
			data.NatRefreshInterval = types.Int64Value(v.Int())
			data.NatRefreshIntervalVariable = types.StringNull()
		}
	} else {
		data.NatRefreshInterval = types.Int64Null()
		data.NatRefreshIntervalVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.hello-interval.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.HelloInterval = types.Int64Null()

			v := res.Get(path + "tunnel-interface.hello-interval.vipVariableName")
			data.HelloIntervalVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.HelloInterval = types.Int64Null()
			data.HelloIntervalVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.hello-interval.vipValue")
			data.HelloInterval = types.Int64Value(v.Int())
			data.HelloIntervalVariable = types.StringNull()
		}
	} else {
		data.HelloInterval = types.Int64Null()
		data.HelloIntervalVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.hello-tolerance.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.HelloTolerance = types.Int64Null()

			v := res.Get(path + "tunnel-interface.hello-tolerance.vipVariableName")
			data.HelloToleranceVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.HelloTolerance = types.Int64Null()
			data.HelloToleranceVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.hello-tolerance.vipValue")
			data.HelloTolerance = types.Int64Value(v.Int())
			data.HelloToleranceVariable = types.StringNull()
		}
	} else {
		data.HelloTolerance = types.Int64Null()
		data.HelloToleranceVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.bind.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.BindLoopbackTunnel = types.StringNull()

			v := res.Get(path + "tunnel-interface.bind.vipVariableName")
			data.BindLoopbackTunnelVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.BindLoopbackTunnel = types.StringNull()
			data.BindLoopbackTunnelVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.bind.vipValue")
			data.BindLoopbackTunnel = types.StringValue(v.String())
			data.BindLoopbackTunnelVariable = types.StringNull()
		}
	} else {
		data.BindLoopbackTunnel = types.StringNull()
		data.BindLoopbackTunnelVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.all.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.All = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.all.vipVariableName")
			data.AllVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.All = types.BoolNull()
			data.AllVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.all.vipValue")
			data.All = types.BoolValue(v.Bool())
			data.AllVariable = types.StringNull()
		}
	} else {
		data.All = types.BoolNull()
		data.AllVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.network-broadcast.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.NetworkBroadcast2 = types.BoolNull()

			v := res.Get(path + "tunnel-interface.network-broadcast.vipVariableName")
			data.NetworkBroadcast2Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.NetworkBroadcast2 = types.BoolNull()
			data.NetworkBroadcast2Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.network-broadcast.vipValue")
			data.NetworkBroadcast2 = types.BoolValue(v.Bool())
			data.NetworkBroadcast2Variable = types.StringNull()
		}
	} else {
		data.NetworkBroadcast2 = types.BoolNull()
		data.NetworkBroadcast2Variable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.bgp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Bgp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.bgp.vipVariableName")
			data.BgpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Bgp = types.BoolNull()
			data.BgpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.bgp.vipValue")
			data.Bgp = types.BoolValue(v.Bool())
			data.BgpVariable = types.StringNull()
		}
	} else {
		data.Bgp = types.BoolNull()
		data.BgpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.dhcp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Dhcp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.dhcp.vipVariableName")
			data.DhcpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Dhcp = types.BoolNull()
			data.DhcpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.dhcp.vipValue")
			data.Dhcp = types.BoolValue(v.Bool())
			data.DhcpVariable = types.StringNull()
		}
	} else {
		data.Dhcp = types.BoolNull()
		data.DhcpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.dns.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Dns = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.dns.vipVariableName")
			data.DnsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Dns = types.BoolNull()
			data.DnsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.dns.vipValue")
			data.Dns = types.BoolValue(v.Bool())
			data.DnsVariable = types.StringNull()
		}
	} else {
		data.Dns = types.BoolNull()
		data.DnsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.icmp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Icmp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.icmp.vipVariableName")
			data.IcmpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Icmp = types.BoolNull()
			data.IcmpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.icmp.vipValue")
			data.Icmp = types.BoolValue(v.Bool())
			data.IcmpVariable = types.StringNull()
		}
	} else {
		data.Icmp = types.BoolNull()
		data.IcmpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.sshd.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ssh = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.sshd.vipVariableName")
			data.SshVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ssh = types.BoolNull()
			data.SshVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.sshd.vipValue")
			data.Ssh = types.BoolValue(v.Bool())
			data.SshVariable = types.StringNull()
		}
	} else {
		data.Ssh = types.BoolNull()
		data.SshVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.netconf.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Netconf = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.netconf.vipVariableName")
			data.NetconfVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Netconf = types.BoolNull()
			data.NetconfVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.netconf.vipValue")
			data.Netconf = types.BoolValue(v.Bool())
			data.NetconfVariable = types.StringNull()
		}
	} else {
		data.Netconf = types.BoolNull()
		data.NetconfVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.ospf.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ospf = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.ospf.vipVariableName")
			data.OspfVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ospf = types.BoolNull()
			data.OspfVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.ospf.vipValue")
			data.Ospf = types.BoolValue(v.Bool())
			data.OspfVariable = types.StringNull()
		}
	} else {
		data.Ospf = types.BoolNull()
		data.OspfVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.stun.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Stun = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.stun.vipVariableName")
			data.StunVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Stun = types.BoolNull()
			data.StunVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.stun.vipValue")
			data.Stun = types.BoolValue(v.Bool())
			data.StunVariable = types.StringNull()
		}
	} else {
		data.Stun = types.BoolNull()
		data.StunVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.snmp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Snmp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.snmp.vipVariableName")
			data.SnmpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Snmp = types.BoolNull()
			data.SnmpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.snmp.vipValue")
			data.Snmp = types.BoolValue(v.Bool())
			data.SnmpVariable = types.StringNull()
		}
	} else {
		data.Snmp = types.BoolNull()
		data.SnmpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.https.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Https = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.https.vipVariableName")
			data.HttpsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Https = types.BoolNull()
			data.HttpsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.https.vipValue")
			data.Https = types.BoolValue(v.Bool())
			data.HttpsVariable = types.StringNull()
		}
	} else {
		data.Https = types.BoolNull()
		data.HttpsVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.multilink.fragment.disable.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DisableFragmentation = types.BoolNull()

			v := res.Get(path + "ppp.multilink.fragment.disable.vipVariableName")
			data.DisableFragmentationVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DisableFragmentation = types.BoolNull()
			data.DisableFragmentationVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.multilink.fragment.disable.vipValue")
			data.DisableFragmentation = types.BoolValue(v.Bool())
			data.DisableFragmentationVariable = types.StringNull()
		}
	} else {
		data.DisableFragmentation = types.BoolNull()
		data.DisableFragmentationVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.multilink.fragment.delay.delay-value.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.FragmentMaxDelay = types.Int64Null()

			v := res.Get(path + "ppp.multilink.fragment.delay.delay-value.vipVariableName")
			data.FragmentMaxDelayVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.FragmentMaxDelay = types.Int64Null()
			data.FragmentMaxDelayVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.multilink.fragment.delay.delay-value.vipValue")
			data.FragmentMaxDelay = types.Int64Value(v.Int())
			data.FragmentMaxDelayVariable = types.StringNull()
		}
	} else {
		data.FragmentMaxDelay = types.Int64Null()
		data.FragmentMaxDelayVariable = types.StringNull()
	}
	if value := res.Get(path + "ppp.multilink.interleave.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.InterleavingFragment = types.BoolNull()

			v := res.Get(path + "ppp.multilink.interleave.vipVariableName")
			data.InterleavingFragmentVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.InterleavingFragment = types.BoolNull()
			data.InterleavingFragmentVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ppp.multilink.interleave.vipValue")
			data.InterleavingFragment = types.BoolValue(v.Bool())
			data.InterleavingFragmentVariable = types.StringNull()
		}
	} else {
		data.InterleavingFragment = types.BoolNull()
		data.InterleavingFragmentVariable = types.StringNull()
	}
	if value := res.Get(path + "clear-dont-fragment.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ClearDontFragmentBit = types.BoolNull()

			v := res.Get(path + "clear-dont-fragment.vipVariableName")
			data.ClearDontFragmentBitVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ClearDontFragmentBit = types.BoolNull()
			data.ClearDontFragmentBitVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "clear-dont-fragment.vipValue")
			data.ClearDontFragmentBit = types.BoolValue(v.Bool())
			data.ClearDontFragmentBitVariable = types.StringNull()
		}
	} else {
		data.ClearDontFragmentBit = types.BoolNull()
		data.ClearDontFragmentBitVariable = types.StringNull()
	}
	if value := res.Get(path + "pmtu.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PmtuDiscovery = types.BoolNull()

			v := res.Get(path + "pmtu.vipVariableName")
			data.PmtuDiscoveryVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PmtuDiscovery = types.BoolNull()
			data.PmtuDiscoveryVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "pmtu.vipValue")
			data.PmtuDiscovery = types.BoolValue(v.Bool())
			data.PmtuDiscoveryVariable = types.StringNull()
		}
	} else {
		data.PmtuDiscovery = types.BoolNull()
		data.PmtuDiscoveryVariable = types.StringNull()
	}
	if value := res.Get(path + "mtu.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.IpMtu = types.Int64Null()

			v := res.Get(path + "mtu.vipVariableName")
			data.IpMtuVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.IpMtu = types.Int64Null()
			data.IpMtuVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "mtu.vipValue")
			data.IpMtu = types.Int64Value(v.Int())
			data.IpMtuVariable = types.StringNull()
		}
	} else {
		data.IpMtu = types.Int64Null()
		data.IpMtuVariable = types.StringNull()
	}
	if value := res.Get(path + "static-ingress-qos.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.StaticIngressQos = types.Int64Null()

			v := res.Get(path + "static-ingress-qos.vipVariableName")
			data.StaticIngressQosVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.StaticIngressQos = types.Int64Null()
			data.StaticIngressQosVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "static-ingress-qos.vipValue")
			data.StaticIngressQos = types.Int64Value(v.Int())
			data.StaticIngressQosVariable = types.StringNull()
		}
	} else {
		data.StaticIngressQos = types.Int64Null()
		data.StaticIngressQosVariable = types.StringNull()
	}
	if value := res.Get(path + "tcp-mss-adjust.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TcpMss = types.Int64Null()

			v := res.Get(path + "tcp-mss-adjust.vipVariableName")
			data.TcpMssVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TcpMss = types.Int64Null()
			data.TcpMssVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tcp-mss-adjust.vipValue")
			data.TcpMss = types.Int64Value(v.Int())
			data.TcpMssVariable = types.StringNull()
		}
	} else {
		data.TcpMss = types.Int64Null()
		data.TcpMssVariable = types.StringNull()
	}
	if value := res.Get(path + "ip-directed-broadcast.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.IpDirectedBroadcast = types.BoolNull()

			v := res.Get(path + "ip-directed-broadcast.vipVariableName")
			data.IpDirectedBroadcastVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.IpDirectedBroadcast = types.BoolNull()
			data.IpDirectedBroadcastVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ip-directed-broadcast.vipValue")
			data.IpDirectedBroadcast = types.BoolValue(v.Bool())
			data.IpDirectedBroadcastVariable = types.StringNull()
		}
	} else {
		data.IpDirectedBroadcast = types.BoolNull()
		data.IpDirectedBroadcastVariable = types.StringNull()
	}
	if value := res.Get(path + "tloc-extension.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TlocExtension = types.StringNull()

			v := res.Get(path + "tloc-extension.vipVariableName")
			data.TlocExtensionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TlocExtension = types.StringNull()
			data.TlocExtensionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tloc-extension.vipValue")
			data.TlocExtension = types.StringValue(v.String())
			data.TlocExtensionVariable = types.StringNull()
		}
	} else {
		data.TlocExtension = types.StringNull()
		data.TlocExtensionVariable = types.StringNull()
	}
	if value := res.Get(path + "shutdown.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.AdministrativeShutdown = types.BoolNull()

			v := res.Get(path + "shutdown.vipVariableName")
			data.AdministrativeShutdownVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.AdministrativeShutdown = types.BoolNull()
			data.AdministrativeShutdownVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "shutdown.vipValue")
			data.AdministrativeShutdown = types.BoolValue(v.Bool())
			data.AdministrativeShutdownVariable = types.StringNull()
		}
	} else {
		data.AdministrativeShutdown = types.BoolNull()
		data.AdministrativeShutdownVariable = types.StringNull()
	}
	if value := res.Get(path + "autonegotiate.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.LinkAutonegotiate = types.BoolNull()

			v := res.Get(path + "autonegotiate.vipVariableName")
			data.LinkAutonegotiateVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.LinkAutonegotiate = types.BoolNull()
			data.LinkAutonegotiateVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "autonegotiate.vipValue")
			data.LinkAutonegotiate = types.BoolValue(v.Bool())
			data.LinkAutonegotiateVariable = types.StringNull()
		}
	} else {
		data.LinkAutonegotiate = types.BoolNull()
		data.LinkAutonegotiateVariable = types.StringNull()
	}
	if value := res.Get(path + "shaping-rate.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ShapingRate = types.Int64Null()

			v := res.Get(path + "shaping-rate.vipVariableName")
			data.ShapingRateVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ShapingRate = types.Int64Null()
			data.ShapingRateVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "shaping-rate.vipValue")
			data.ShapingRate = types.Int64Value(v.Int())
			data.ShapingRateVariable = types.StringNull()
		}
	} else {
		data.ShapingRate = types.Int64Null()
		data.ShapingRateVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-map.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.QosMap = types.StringNull()

			v := res.Get(path + "qos-map.vipVariableName")
			data.QosMapVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.QosMap = types.StringNull()
			data.QosMapVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-map.vipValue")
			data.QosMap = types.StringValue(v.String())
			data.QosMapVariable = types.StringNull()
		}
	} else {
		data.QosMap = types.StringNull()
		data.QosMapVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-map-vpn.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.VpnQosMap = types.StringNull()

			v := res.Get(path + "qos-map-vpn.vipVariableName")
			data.VpnQosMapVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.VpnQosMap = types.StringNull()
			data.VpnQosMapVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-map-vpn.vipValue")
			data.VpnQosMap = types.StringValue(v.String())
			data.VpnQosMapVariable = types.StringNull()
		}
	} else {
		data.VpnQosMap = types.StringNull()
		data.VpnQosMapVariable = types.StringNull()
	}
	if value := res.Get(path + "bandwidth-upstream.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.BandwidthUpstream = types.Int64Null()

			v := res.Get(path + "bandwidth-upstream.vipVariableName")
			data.BandwidthUpstreamVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.BandwidthUpstream = types.Int64Null()
			data.BandwidthUpstreamVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "bandwidth-upstream.vipValue")
			data.BandwidthUpstream = types.Int64Value(v.Int())
			data.BandwidthUpstreamVariable = types.StringNull()
		}
	} else {
		data.BandwidthUpstream = types.Int64Null()
		data.BandwidthUpstreamVariable = types.StringNull()
	}
	if value := res.Get(path + "bandwidth-downstream.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.BandwidthDownstream = types.Int64Null()

			v := res.Get(path + "bandwidth-downstream.vipVariableName")
			data.BandwidthDownstreamVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.BandwidthDownstream = types.Int64Null()
			data.BandwidthDownstreamVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "bandwidth-downstream.vipValue")
			data.BandwidthDownstream = types.Int64Value(v.Int())
			data.BandwidthDownstreamVariable = types.StringNull()
		}
	} else {
		data.BandwidthDownstream = types.Int64Null()
		data.BandwidthDownstreamVariable = types.StringNull()
	}
	if value := res.Get(path + "rewrite-rule.rule-name.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.WriteRule = types.StringNull()

			v := res.Get(path + "rewrite-rule.rule-name.vipVariableName")
			data.WriteRuleVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.WriteRule = types.StringNull()
			data.WriteRuleVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "rewrite-rule.rule-name.vipValue")
			data.WriteRule = types.StringValue(v.String())
			data.WriteRuleVariable = types.StringNull()
		}
	} else {
		data.WriteRule = types.StringNull()
		data.WriteRuleVariable = types.StringNull()
	}
	if value := res.Get(path + "access-list.vipValue"); len(value.Array()) > 0 {
		data.AccessList = make([]VPNInterfaceMultilinkAccessList, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceMultilinkAccessList{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("direction.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("direction.vipValue")
					item.Direction = types.StringValue(cv.String())

				}
			} else {
				item.Direction = types.StringNull()

			}
			if cValue := v.Get("acl-name.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.AclName = types.StringNull()

					cv := v.Get("acl-name.vipVariableName")
					item.AclNameVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.AclName = types.StringNull()
					item.AclNameVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("acl-name.vipValue")
					item.AclName = types.StringValue(cv.String())
					item.AclNameVariable = types.StringNull()
				}
			} else {
				item.AclName = types.StringNull()
				item.AclNameVariable = types.StringNull()
			}
			data.AccessList = append(data.AccessList, item)
			return true
		})
	} else {
		if len(data.AccessList) > 0 {
			data.AccessList = []VPNInterfaceMultilinkAccessList{}
		}
	}
	if value := res.Get(path + "controller.controller-tx-ex-list.vipValue"); len(value.Array()) > 0 {
		data.ControllerTxExList = make([]VPNInterfaceMultilinkControllerTxExList, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceMultilinkControllerTxExList{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("name.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.CardType = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.CardType = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("name.vipValue")
					item.CardType = types.StringValue(cv.String())

				}
			} else {
				item.CardType = types.StringNull()

			}
			if cValue := v.Get("number.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Slot = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.Slot = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("number.vipValue")
					item.Slot = types.StringValue(cv.String())

				}
			} else {
				item.Slot = types.StringNull()

			}
			if cValue := v.Get("framing.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Framing = types.StringNull()

					cv := v.Get("framing.vipVariableName")
					item.FramingVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Framing = types.StringNull()
					item.FramingVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("framing.vipValue")
					item.Framing = types.StringValue(cv.String())
					item.FramingVariable = types.StringNull()
				}
			} else {
				item.Framing = types.StringNull()
				item.FramingVariable = types.StringNull()
			}
			if cValue := v.Get("clock.source.line.line-mode.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.LineMode = types.StringNull()

					cv := v.Get("clock.source.line.line-mode.vipVariableName")
					item.LineModeVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.LineMode = types.StringNull()
					item.LineModeVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("clock.source.line.line-mode.vipValue")
					item.LineMode = types.StringValue(cv.String())
					item.LineModeVariable = types.StringNull()
				}
			} else {
				item.LineMode = types.StringNull()
				item.LineModeVariable = types.StringNull()
			}
			if cValue := v.Get("clock.source.internal.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Internal = types.BoolNull()

					cv := v.Get("clock.source.internal.vipVariableName")
					item.InternalVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Internal = types.BoolNull()
					item.InternalVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("clock.source.internal.vipValue")
					item.Internal = types.BoolValue(cv.Bool())
					item.InternalVariable = types.StringNull()
				}
			} else {
				item.Internal = types.BoolNull()
				item.InternalVariable = types.StringNull()
			}
			if cValue := v.Get("description.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Description = types.StringNull()

					cv := v.Get("description.vipVariableName")
					item.DescriptionVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Description = types.StringNull()
					item.DescriptionVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("description.vipValue")
					item.Description = types.StringValue(cv.String())
					item.DescriptionVariable = types.StringNull()
				}
			} else {
				item.Description = types.StringNull()
				item.DescriptionVariable = types.StringNull()
			}
			if cValue := v.Get("linecode.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Linecode = types.StringNull()

					cv := v.Get("linecode.vipVariableName")
					item.LinecodeVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Linecode = types.StringNull()
					item.LinecodeVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("linecode.vipValue")
					item.Linecode = types.StringValue(cv.String())
					item.LinecodeVariable = types.StringNull()
				}
			} else {
				item.Linecode = types.StringNull()
				item.LinecodeVariable = types.StringNull()
			}
			if cValue := v.Get("cablelength.long.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.SetLengthForLong = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.SetLengthForLong = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("cablelength.long.vipValue")
					item.SetLengthForLong = types.StringValue(cv.String())

				}
			} else {
				item.SetLengthForLong = types.StringNull()

			}
			if cValue := v.Get("cablelength.short.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.SetLengthForShort = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.SetLengthForShort = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("cablelength.short.vipValue")
					item.SetLengthForShort = types.StringValue(cv.String())

				}
			} else {
				item.SetLengthForShort = types.StringNull()

			}
			if cValue := v.Get("channel-group.vipValue"); len(cValue.Array()) > 0 {
				item.ChannelGroupList = make([]VPNInterfaceMultilinkControllerTxExListChannelGroupList, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := VPNInterfaceMultilinkControllerTxExListChannelGroupList{}
					if ccValue := cv.Get("vipOptional"); ccValue.Exists() {
						cItem.Optional = types.BoolValue(ccValue.Bool())
					} else {
						cItem.Optional = types.BoolNull()
					}
					if ccValue := cv.Get("number.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.ChannelGroup = types.Int64Null()

							ccv := cv.Get("number.vipVariableName")
							cItem.ChannelGroupVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.ChannelGroup = types.Int64Null()
							cItem.ChannelGroupVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("number.vipValue")
							cItem.ChannelGroup = types.Int64Value(ccv.Int())
							cItem.ChannelGroupVariable = types.StringNull()
						}
					} else {
						cItem.ChannelGroup = types.Int64Null()
						cItem.ChannelGroupVariable = types.StringNull()
					}
					if ccValue := cv.Get("timeslots.vipType"); len(ccValue.Array()) > 0 {
						if ccValue.String() == "variableName" {
							cItem.Timeslots = types.SetNull(types.StringType)

							ccv := cv.Get("timeslots.vipVariableName")
							cItem.TimeslotsVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Timeslots = types.SetNull(types.StringType)
							cItem.TimeslotsVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("timeslots.vipValue")
							cItem.Timeslots = helpers.GetStringSet(ccv.Array())
							cItem.TimeslotsVariable = types.StringNull()
						}
					} else {
						cItem.Timeslots = types.SetNull(types.StringType)
						cItem.TimeslotsVariable = types.StringNull()
					}
					item.ChannelGroupList = append(item.ChannelGroupList, cItem)
					return true
				})
			} else {
				if len(item.ChannelGroupList) > 0 {
					item.ChannelGroupList = []VPNInterfaceMultilinkControllerTxExListChannelGroupList{}
				}
			}
			data.ControllerTxExList = append(data.ControllerTxExList, item)
			return true
		})
	} else {
		if len(data.ControllerTxExList) > 0 {
			data.ControllerTxExList = []VPNInterfaceMultilinkControllerTxExList{}
		}
	}
	if value := res.Get(path + "controller.nim-list.vipValue"); len(value.Array()) > 0 {
		data.NimInterfaceList = make([]VPNInterfaceMultilinkNimInterfaceList, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceMultilinkNimInterfaceList{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("nim.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.NimSerialInterfaceType = types.StringNull()

					cv := v.Get("nim.vipVariableName")
					item.NimSerialInterfaceTypeVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.NimSerialInterfaceType = types.StringNull()
					item.NimSerialInterfaceTypeVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("nim.vipValue")
					item.NimSerialInterfaceType = types.StringValue(cv.String())
					item.NimSerialInterfaceTypeVariable = types.StringNull()
				}
			} else {
				item.NimSerialInterfaceType = types.StringNull()
				item.NimSerialInterfaceTypeVariable = types.StringNull()
			}
			if cValue := v.Get("if-name.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.InterfaceName = types.StringNull()

					cv := v.Get("if-name.vipVariableName")
					item.InterfaceNameVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.InterfaceName = types.StringNull()
					item.InterfaceNameVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("if-name.vipValue")
					item.InterfaceName = types.StringValue(cv.String())
					item.InterfaceNameVariable = types.StringNull()
				}
			} else {
				item.InterfaceName = types.StringNull()
				item.InterfaceNameVariable = types.StringNull()
			}
			if cValue := v.Get("description.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.InterfaceDescription = types.StringNull()

					cv := v.Get("description.vipVariableName")
					item.InterfaceDescriptionVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.InterfaceDescription = types.StringNull()
					item.InterfaceDescriptionVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("description.vipValue")
					item.InterfaceDescription = types.StringValue(cv.String())
					item.InterfaceDescriptionVariable = types.StringNull()
				}
			} else {
				item.InterfaceDescription = types.StringNull()
				item.InterfaceDescriptionVariable = types.StringNull()
			}
			if cValue := v.Get("bandwidth.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Bandwidth = types.Int64Null()

					cv := v.Get("bandwidth.vipVariableName")
					item.BandwidthVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Bandwidth = types.Int64Null()
					item.BandwidthVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("bandwidth.vipValue")
					item.Bandwidth = types.Int64Value(cv.Int())
					item.BandwidthVariable = types.StringNull()
				}
			} else {
				item.Bandwidth = types.Int64Null()
				item.BandwidthVariable = types.StringNull()
			}
			if cValue := v.Get("DCE-mode-config.clock-rate.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ClockRate = types.Int64Null()

					cv := v.Get("DCE-mode-config.clock-rate.vipVariableName")
					item.ClockRateVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ClockRate = types.Int64Null()
					item.ClockRateVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("DCE-mode-config.clock-rate.vipValue")
					item.ClockRate = types.Int64Value(cv.Int())
					item.ClockRateVariable = types.StringNull()
				}
			} else {
				item.ClockRate = types.Int64Null()
				item.ClockRateVariable = types.StringNull()
			}
			if cValue := v.Get("encapsulation-serial.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.EncapsulationSerial = types.StringNull()

					cv := v.Get("encapsulation-serial.vipVariableName")
					item.EncapsulationSerialVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.EncapsulationSerial = types.StringNull()
					item.EncapsulationSerialVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("encapsulation-serial.vipValue")
					item.EncapsulationSerial = types.StringValue(cv.String())
					item.EncapsulationSerialVariable = types.StringNull()
				}
			} else {
				item.EncapsulationSerial = types.StringNull()
				item.EncapsulationSerialVariable = types.StringNull()
			}
			data.NimInterfaceList = append(data.NimInterfaceList, item)
			return true
		})
	} else {
		if len(data.NimInterfaceList) > 0 {
			data.NimInterfaceList = []VPNInterfaceMultilinkNimInterfaceList{}
		}
	}
}

func (data *VPNInterfaceMultilink) hasChanges(ctx context.Context, state *VPNInterfaceMultilink) bool {
	hasChanges := false
	if !data.InterfaceName.Equal(state.InterfaceName) {
		hasChanges = true
	}
	if !data.MultilinkGroupNumber.Equal(state.MultilinkGroupNumber) {
		hasChanges = true
	}
	if !data.InterfaceDescription.Equal(state.InterfaceDescription) {
		hasChanges = true
	}
	if !data.Ipv4Address.Equal(state.Ipv4Address) {
		hasChanges = true
	}
	if !data.Ipv6Address.Equal(state.Ipv6Address) {
		hasChanges = true
	}
	if len(data.Ipv6AccessLists) != len(state.Ipv6AccessLists) {
		hasChanges = true
	} else {
		for i := range data.Ipv6AccessLists {
			if !data.Ipv6AccessLists[i].Direction.Equal(state.Ipv6AccessLists[i].Direction) {
				hasChanges = true
			}
			if !data.Ipv6AccessLists[i].AclName.Equal(state.Ipv6AccessLists[i].AclName) {
				hasChanges = true
			}
		}
	}
	if !data.PppAuthenticationProtocol.Equal(state.PppAuthenticationProtocol) {
		hasChanges = true
	}
	if !data.PppAuthenticationProtocolPap.Equal(state.PppAuthenticationProtocolPap) {
		hasChanges = true
	}
	if !data.AuthenticationType.Equal(state.AuthenticationType) {
		hasChanges = true
	}
	if !data.ChapHostname.Equal(state.ChapHostname) {
		hasChanges = true
	}
	if !data.ChapPppAuthPassword.Equal(state.ChapPppAuthPassword) {
		hasChanges = true
	}
	if !data.PapUsername.Equal(state.PapUsername) {
		hasChanges = true
	}
	if !data.PapPassword.Equal(state.PapPassword) {
		hasChanges = true
	}
	if !data.PapPppAuthPassword.Equal(state.PapPppAuthPassword) {
		hasChanges = true
	}
	if !data.EnableCoreRegion.Equal(state.EnableCoreRegion) {
		hasChanges = true
	}
	if !data.CoreRegion.Equal(state.CoreRegion) {
		hasChanges = true
	}
	if !data.SecondaryRegion.Equal(state.SecondaryRegion) {
		hasChanges = true
	}
	if len(data.Encapsulation) != len(state.Encapsulation) {
		hasChanges = true
	} else {
		for i := range data.Encapsulation {
			if !data.Encapsulation[i].EncapsulationType.Equal(state.Encapsulation[i].EncapsulationType) {
				hasChanges = true
			}
			if !data.Encapsulation[i].Preference.Equal(state.Encapsulation[i].Preference) {
				hasChanges = true
			}
			if !data.Encapsulation[i].Weight.Equal(state.Encapsulation[i].Weight) {
				hasChanges = true
			}
		}
	}
	if !data.Groups.Equal(state.Groups) {
		hasChanges = true
	}
	if !data.Border.Equal(state.Border) {
		hasChanges = true
	}
	if !data.PerTunnelQos.Equal(state.PerTunnelQos) {
		hasChanges = true
	}
	if !data.PerTunnelQosAggregator.Equal(state.PerTunnelQosAggregator) {
		hasChanges = true
	}
	if !data.Color.Equal(state.Color) {
		hasChanges = true
	}
	if !data.LastResortCircuit.Equal(state.LastResortCircuit) {
		hasChanges = true
	}
	if !data.LowBandwidthLink.Equal(state.LowBandwidthLink) {
		hasChanges = true
	}
	if !data.TunnelTcpMss.Equal(state.TunnelTcpMss) {
		hasChanges = true
	}
	if !data.EnableClearDontFragment.Equal(state.EnableClearDontFragment) {
		hasChanges = true
	}
	if !data.NetworkBroadcast1.Equal(state.NetworkBroadcast1) {
		hasChanges = true
	}
	if !data.MaxControlConnections.Equal(state.MaxControlConnections) {
		hasChanges = true
	}
	if !data.ControlConnections.Equal(state.ControlConnections) {
		hasChanges = true
	}
	if !data.VbondAsStunServer.Equal(state.VbondAsStunServer) {
		hasChanges = true
	}
	if !data.ExcludeControllerGroupList.Equal(state.ExcludeControllerGroupList) {
		hasChanges = true
	}
	if !data.VmanageConnectionPreference.Equal(state.VmanageConnectionPreference) {
		hasChanges = true
	}
	if !data.PortHop.Equal(state.PortHop) {
		hasChanges = true
	}
	if !data.Restrict.Equal(state.Restrict) {
		hasChanges = true
	}
	if !data.Carrier.Equal(state.Carrier) {
		hasChanges = true
	}
	if !data.NatRefreshInterval.Equal(state.NatRefreshInterval) {
		hasChanges = true
	}
	if !data.HelloInterval.Equal(state.HelloInterval) {
		hasChanges = true
	}
	if !data.HelloTolerance.Equal(state.HelloTolerance) {
		hasChanges = true
	}
	if !data.BindLoopbackTunnel.Equal(state.BindLoopbackTunnel) {
		hasChanges = true
	}
	if !data.All.Equal(state.All) {
		hasChanges = true
	}
	if !data.NetworkBroadcast2.Equal(state.NetworkBroadcast2) {
		hasChanges = true
	}
	if !data.Bgp.Equal(state.Bgp) {
		hasChanges = true
	}
	if !data.Dhcp.Equal(state.Dhcp) {
		hasChanges = true
	}
	if !data.Dns.Equal(state.Dns) {
		hasChanges = true
	}
	if !data.Icmp.Equal(state.Icmp) {
		hasChanges = true
	}
	if !data.Ssh.Equal(state.Ssh) {
		hasChanges = true
	}
	if !data.Netconf.Equal(state.Netconf) {
		hasChanges = true
	}
	if !data.Ospf.Equal(state.Ospf) {
		hasChanges = true
	}
	if !data.Stun.Equal(state.Stun) {
		hasChanges = true
	}
	if !data.Snmp.Equal(state.Snmp) {
		hasChanges = true
	}
	if !data.Https.Equal(state.Https) {
		hasChanges = true
	}
	if !data.DisableFragmentation.Equal(state.DisableFragmentation) {
		hasChanges = true
	}
	if !data.FragmentMaxDelay.Equal(state.FragmentMaxDelay) {
		hasChanges = true
	}
	if !data.InterleavingFragment.Equal(state.InterleavingFragment) {
		hasChanges = true
	}
	if !data.ClearDontFragmentBit.Equal(state.ClearDontFragmentBit) {
		hasChanges = true
	}
	if !data.PmtuDiscovery.Equal(state.PmtuDiscovery) {
		hasChanges = true
	}
	if !data.IpMtu.Equal(state.IpMtu) {
		hasChanges = true
	}
	if !data.StaticIngressQos.Equal(state.StaticIngressQos) {
		hasChanges = true
	}
	if !data.TcpMss.Equal(state.TcpMss) {
		hasChanges = true
	}
	if !data.IpDirectedBroadcast.Equal(state.IpDirectedBroadcast) {
		hasChanges = true
	}
	if !data.TlocExtension.Equal(state.TlocExtension) {
		hasChanges = true
	}
	if !data.AdministrativeShutdown.Equal(state.AdministrativeShutdown) {
		hasChanges = true
	}
	if !data.LinkAutonegotiate.Equal(state.LinkAutonegotiate) {
		hasChanges = true
	}
	if !data.ShapingRate.Equal(state.ShapingRate) {
		hasChanges = true
	}
	if !data.QosMap.Equal(state.QosMap) {
		hasChanges = true
	}
	if !data.VpnQosMap.Equal(state.VpnQosMap) {
		hasChanges = true
	}
	if !data.BandwidthUpstream.Equal(state.BandwidthUpstream) {
		hasChanges = true
	}
	if !data.BandwidthDownstream.Equal(state.BandwidthDownstream) {
		hasChanges = true
	}
	if !data.WriteRule.Equal(state.WriteRule) {
		hasChanges = true
	}
	if len(data.AccessList) != len(state.AccessList) {
		hasChanges = true
	} else {
		for i := range data.AccessList {
			if !data.AccessList[i].Direction.Equal(state.AccessList[i].Direction) {
				hasChanges = true
			}
			if !data.AccessList[i].AclName.Equal(state.AccessList[i].AclName) {
				hasChanges = true
			}
		}
	}
	if len(data.ControllerTxExList) != len(state.ControllerTxExList) {
		hasChanges = true
	} else {
		for i := range data.ControllerTxExList {
			if !data.ControllerTxExList[i].CardType.Equal(state.ControllerTxExList[i].CardType) {
				hasChanges = true
			}
			if !data.ControllerTxExList[i].Slot.Equal(state.ControllerTxExList[i].Slot) {
				hasChanges = true
			}
			if !data.ControllerTxExList[i].Framing.Equal(state.ControllerTxExList[i].Framing) {
				hasChanges = true
			}
			if !data.ControllerTxExList[i].LineMode.Equal(state.ControllerTxExList[i].LineMode) {
				hasChanges = true
			}
			if !data.ControllerTxExList[i].Internal.Equal(state.ControllerTxExList[i].Internal) {
				hasChanges = true
			}
			if !data.ControllerTxExList[i].Description.Equal(state.ControllerTxExList[i].Description) {
				hasChanges = true
			}
			if !data.ControllerTxExList[i].Linecode.Equal(state.ControllerTxExList[i].Linecode) {
				hasChanges = true
			}
			if !data.ControllerTxExList[i].SetLengthForLong.Equal(state.ControllerTxExList[i].SetLengthForLong) {
				hasChanges = true
			}
			if !data.ControllerTxExList[i].SetLengthForShort.Equal(state.ControllerTxExList[i].SetLengthForShort) {
				hasChanges = true
			}
			if len(data.ControllerTxExList[i].ChannelGroupList) != len(state.ControllerTxExList[i].ChannelGroupList) {
				hasChanges = true
			} else {
				for ii := range data.ControllerTxExList[i].ChannelGroupList {
					if !data.ControllerTxExList[i].ChannelGroupList[ii].ChannelGroup.Equal(state.ControllerTxExList[i].ChannelGroupList[ii].ChannelGroup) {
						hasChanges = true
					}
					if !data.ControllerTxExList[i].ChannelGroupList[ii].Timeslots.Equal(state.ControllerTxExList[i].ChannelGroupList[ii].Timeslots) {
						hasChanges = true
					}
				}
			}
		}
	}
	if len(data.NimInterfaceList) != len(state.NimInterfaceList) {
		hasChanges = true
	} else {
		for i := range data.NimInterfaceList {
			if !data.NimInterfaceList[i].NimSerialInterfaceType.Equal(state.NimInterfaceList[i].NimSerialInterfaceType) {
				hasChanges = true
			}
			if !data.NimInterfaceList[i].InterfaceName.Equal(state.NimInterfaceList[i].InterfaceName) {
				hasChanges = true
			}
			if !data.NimInterfaceList[i].InterfaceDescription.Equal(state.NimInterfaceList[i].InterfaceDescription) {
				hasChanges = true
			}
			if !data.NimInterfaceList[i].Bandwidth.Equal(state.NimInterfaceList[i].Bandwidth) {
				hasChanges = true
			}
			if !data.NimInterfaceList[i].ClockRate.Equal(state.NimInterfaceList[i].ClockRate) {
				hasChanges = true
			}
			if !data.NimInterfaceList[i].EncapsulationSerial.Equal(state.NimInterfaceList[i].EncapsulationSerial) {
				hasChanges = true
			}
		}
	}
	return hasChanges
}
