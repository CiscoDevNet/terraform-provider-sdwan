// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/netascode/go-sdwan"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &VEdgeInventoryDataSource{}
	_ datasource.DataSourceWithConfigure = &VEdgeInventoryDataSource{}
)

func NewVEdgeInventoryDataSource() datasource.DataSource {
	return &VEdgeInventoryDataSource{}
}

type VEdgeInventoryDataSource struct {
	client *sdwan.Client
}

func (d *VEdgeInventoryDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vedge_inventory"
}

func (d *VEdgeInventoryDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the VEdge Inventory .",

		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				MarkdownDescription: "TThe hostname of a device",
				Computed:            true,
			},
			"devices": schema.ListNestedAttribute{
				MarkdownDescription: "List of returned devices",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"chassis_number": schema.StringAttribute{
							MarkdownDescription: "Chassis Number",
							Computed:            true,
						},
						"site_id": schema.StringAttribute{
							MarkdownDescription: "Site id for respective device",
							Computed:            true,
						},
						"serial_number": schema.StringAttribute{
							MarkdownDescription: "Serial number for device. Could be board or virtual identifier",
							Computed:            true,
						},
						"hostname": schema.StringAttribute{
							MarkdownDescription: "Hostname for respective device",
							Computed:            true,
						},
						"validity": schema.StringAttribute{
							MarkdownDescription: "Validity of device",
							Computed:            true,
						},
						"device_type": schema.StringAttribute{
							MarkdownDescription: "Type of device",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *VEdgeInventoryDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*SdwanProviderData).Client
}

func (d *VEdgeInventoryDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config VEdgeInventory

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var params = "?"

	res, err := d.client.Get("/device/vedgeinventory/detail" + params)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	config.fromBody(ctx, res)

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
