// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"

	"github.com/CiscoDevNet/terraform-provider-sdwan/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type AdvancedMalwareProtectionPolicyDefinition struct {
	Id                        types.String `tfsdk:"id"`
	Version                   types.Int64  `tfsdk:"version"`
	Name                      types.String `tfsdk:"name"`
	Description               types.String `tfsdk:"description"`
	Mode                      types.String `tfsdk:"mode"`
	MatchAllVpn               types.Bool   `tfsdk:"match_all_vpn"`
	TargetVpns                types.List   `tfsdk:"target_vpns"`
	AlertLogLevel             types.String `tfsdk:"alert_log_level"`
	AmpCloudRegion            types.String `tfsdk:"amp_cloud_region"`
	AmpCloudRegionEstServer   types.String `tfsdk:"amp_cloud_region_est_server"`
	FileAnalysis              types.Bool   `tfsdk:"file_analysis"`
	FileAnalysisCloudRegion   types.String `tfsdk:"file_analysis_cloud_region"`
	FileAnalysisAlertLogLevel types.String `tfsdk:"file_analysis_alert_log_level"`
	FileAnalysisFileTypes     types.List   `tfsdk:"file_analysis_file_types"`
}

func (data AdvancedMalwareProtectionPolicyDefinition) toBody(ctx context.Context) string {
	body := ""
	body, _ = sjson.Set(body, "type", "advancedMalwareProtection")
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "name", data.Name.ValueString())
	}
	if !data.Description.IsNull() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.Mode.IsNull() {
		body, _ = sjson.Set(body, "mode", data.Mode.ValueString())
	}
	if !data.MatchAllVpn.IsNull() {
		if false && data.MatchAllVpn.ValueBool() {
			body, _ = sjson.Set(body, "definition.matchAllVpn", "")
		} else {
			body, _ = sjson.Set(body, "definition.matchAllVpn", data.MatchAllVpn.ValueBool())
		}
	}
	if !data.TargetVpns.IsNull() {
		var values []string
		data.TargetVpns.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "definition.targetVpns", values)
	}
	if !data.AlertLogLevel.IsNull() {
		body, _ = sjson.Set(body, "definition.fileReputationAlert", data.AlertLogLevel.ValueString())
	}
	if !data.AmpCloudRegion.IsNull() {
		body, _ = sjson.Set(body, "definition.fileReputationCloudServer", data.AmpCloudRegion.ValueString())
	}
	if !data.AmpCloudRegionEstServer.IsNull() {
		body, _ = sjson.Set(body, "definition.fileReputationEstServer", data.AmpCloudRegionEstServer.ValueString())
	}
	if !data.FileAnalysis.IsNull() {
		if false && data.FileAnalysis.ValueBool() {
			body, _ = sjson.Set(body, "definition.fileAnalysisEnabled", "")
		} else {
			body, _ = sjson.Set(body, "definition.fileAnalysisEnabled", data.FileAnalysis.ValueBool())
		}
	}
	if !data.FileAnalysisCloudRegion.IsNull() {
		body, _ = sjson.Set(body, "definition.fileAnalysisCloudServer", data.FileAnalysisCloudRegion.ValueString())
	}
	if !data.FileAnalysisAlertLogLevel.IsNull() {
		body, _ = sjson.Set(body, "definition.fileAnalysisAlert", data.FileAnalysisAlertLogLevel.ValueString())
	}
	if !data.FileAnalysisFileTypes.IsNull() {
		var values []string
		data.FileAnalysisFileTypes.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "definition.fileAnalysisFileTypes", values)
	}
	return body
}

func (data *AdvancedMalwareProtectionPolicyDefinition) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("mode"); value.Exists() {
		data.Mode = types.StringValue(value.String())
	} else {
		data.Mode = types.StringNull()
	}
	if value := res.Get("definition.matchAllVpn"); value.Exists() {
		if false && value.String() == "" {
			data.MatchAllVpn = types.BoolValue(true)
		} else {
			data.MatchAllVpn = types.BoolValue(value.Bool())
		}
	} else {
		data.MatchAllVpn = types.BoolNull()
	}
	if value := res.Get("definition.targetVpns"); value.Exists() {
		data.TargetVpns = helpers.GetStringList(value.Array())
	} else {
		data.TargetVpns = types.ListNull(types.StringType)
	}
	if value := res.Get("definition.fileReputationAlert"); value.Exists() {
		data.AlertLogLevel = types.StringValue(value.String())
	} else {
		data.AlertLogLevel = types.StringNull()
	}
	if value := res.Get("definition.fileReputationCloudServer"); value.Exists() {
		data.AmpCloudRegion = types.StringValue(value.String())
	} else {
		data.AmpCloudRegion = types.StringNull()
	}
	if value := res.Get("definition.fileReputationEstServer"); value.Exists() {
		data.AmpCloudRegionEstServer = types.StringValue(value.String())
	} else {
		data.AmpCloudRegionEstServer = types.StringNull()
	}
	if value := res.Get("definition.fileAnalysisEnabled"); value.Exists() {
		if false && value.String() == "" {
			data.FileAnalysis = types.BoolValue(true)
		} else {
			data.FileAnalysis = types.BoolValue(value.Bool())
		}
	} else {
		data.FileAnalysis = types.BoolNull()
	}
	if value := res.Get("definition.fileAnalysisCloudServer"); value.Exists() {
		data.FileAnalysisCloudRegion = types.StringValue(value.String())
	} else {
		data.FileAnalysisCloudRegion = types.StringNull()
	}
	if value := res.Get("definition.fileAnalysisAlert"); value.Exists() {
		data.FileAnalysisAlertLogLevel = types.StringValue(value.String())
	} else {
		data.FileAnalysisAlertLogLevel = types.StringNull()
	}
	if value := res.Get("definition.fileAnalysisFileTypes"); value.Exists() {
		data.FileAnalysisFileTypes = helpers.GetStringList(value.Array())
	} else {
		data.FileAnalysisFileTypes = types.ListNull(types.StringType)
	}
}

func (data *AdvancedMalwareProtectionPolicyDefinition) hasChanges(ctx context.Context, state *AdvancedMalwareProtectionPolicyDefinition) bool {
	hasChanges := false
	if !data.Name.Equal(state.Name) {
		hasChanges = true
	}
	if !data.Description.Equal(state.Description) {
		hasChanges = true
	}
	if !data.Mode.Equal(state.Mode) {
		hasChanges = true
	}
	if !data.MatchAllVpn.Equal(state.MatchAllVpn) {
		hasChanges = true
	}
	if !data.TargetVpns.Equal(state.TargetVpns) {
		hasChanges = true
	}
	if !data.AlertLogLevel.Equal(state.AlertLogLevel) {
		hasChanges = true
	}
	if !data.AmpCloudRegion.Equal(state.AmpCloudRegion) {
		hasChanges = true
	}
	if !data.AmpCloudRegionEstServer.Equal(state.AmpCloudRegionEstServer) {
		hasChanges = true
	}
	if !data.FileAnalysis.Equal(state.FileAnalysis) {
		hasChanges = true
	}
	if !data.FileAnalysisCloudRegion.Equal(state.FileAnalysisCloudRegion) {
		hasChanges = true
	}
	if !data.FileAnalysisAlertLogLevel.Equal(state.FileAnalysisAlertLogLevel) {
		hasChanges = true
	}
	if !data.FileAnalysisFileTypes.Equal(state.FileAnalysisFileTypes) {
		hasChanges = true
	}
	return hasChanges
}
