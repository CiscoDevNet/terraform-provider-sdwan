// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-sdwan/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type CiscoOSPFv3 struct {
	Id                                                types.String                        `tfsdk:"id"`
	Version                                           types.Int64                         `tfsdk:"version"`
	TemplateType                                      types.String                        `tfsdk:"template_type"`
	Name                                              types.String                        `tfsdk:"name"`
	Description                                       types.String                        `tfsdk:"description"`
	DeviceTypes                                       types.Set                           `tfsdk:"device_types"`
	RouterIdIpv4                                      types.String                        `tfsdk:"router_id_ipv4"`
	RouterIdIpv4Variable                              types.String                        `tfsdk:"router_id_ipv4_variable"`
	AutoCostReferenceBandwidthIpv4                    types.Int64                         `tfsdk:"auto_cost_reference_bandwidth_ipv4"`
	AutoCostReferenceBandwidthIpv4Variable            types.String                        `tfsdk:"auto_cost_reference_bandwidth_ipv4_variable"`
	CompatibleRfc1583Ipv4                             types.Bool                          `tfsdk:"compatible_rfc1583_ipv4"`
	CompatibleRfc1583Ipv4Variable                     types.String                        `tfsdk:"compatible_rfc1583_ipv4_variable"`
	DefaultInformationOriginateIpv4                   types.Bool                          `tfsdk:"default_information_originate_ipv4"`
	DefaultInformationOriginateAlwaysIpv4             types.Bool                          `tfsdk:"default_information_originate_always_ipv4"`
	DefaultInformationOriginateAlwaysIpv4Variable     types.String                        `tfsdk:"default_information_originate_always_ipv4_variable"`
	DefaultInformationOriginateMetricIpv4             types.Int64                         `tfsdk:"default_information_originate_metric_ipv4"`
	DefaultInformationOriginateMetricIpv4Variable     types.String                        `tfsdk:"default_information_originate_metric_ipv4_variable"`
	DefaultInformationOriginateMetricTypeIpv4         types.String                        `tfsdk:"default_information_originate_metric_type_ipv4"`
	DefaultInformationOriginateMetricTypeIpv4Variable types.String                        `tfsdk:"default_information_originate_metric_type_ipv4_variable"`
	DistanceExternalIpv4                              types.Int64                         `tfsdk:"distance_external_ipv4"`
	DistanceExternalIpv4Variable                      types.String                        `tfsdk:"distance_external_ipv4_variable"`
	DistanceInterAreaIpv4                             types.Int64                         `tfsdk:"distance_inter_area_ipv4"`
	DistanceInterAreaIpv4Variable                     types.String                        `tfsdk:"distance_inter_area_ipv4_variable"`
	DistanceIntraAreaIpv4                             types.Int64                         `tfsdk:"distance_intra_area_ipv4"`
	DistanceIntraAreaIpv4Variable                     types.String                        `tfsdk:"distance_intra_area_ipv4_variable"`
	TimersSpfDelayIpv4                                types.Int64                         `tfsdk:"timers_spf_delay_ipv4"`
	TimersSpfDelayIpv4Variable                        types.String                        `tfsdk:"timers_spf_delay_ipv4_variable"`
	TimersSpfInitialHoldIpv4                          types.Int64                         `tfsdk:"timers_spf_initial_hold_ipv4"`
	TimersSpfInitialHoldIpv4Variable                  types.String                        `tfsdk:"timers_spf_initial_hold_ipv4_variable"`
	TimersSpfMaxHoldIpv4                              types.Int64                         `tfsdk:"timers_spf_max_hold_ipv4"`
	TimersSpfMaxHoldIpv4Variable                      types.String                        `tfsdk:"timers_spf_max_hold_ipv4_variable"`
	DistanceIpv4                                      types.Int64                         `tfsdk:"distance_ipv4"`
	DistanceIpv4Variable                              types.String                        `tfsdk:"distance_ipv4_variable"`
	PolicyNameIpv4                                    types.String                        `tfsdk:"policy_name_ipv4"`
	PolicyNameIpv4Variable                            types.String                        `tfsdk:"policy_name_ipv4_variable"`
	FilterIpv4                                        types.Bool                          `tfsdk:"filter_ipv4"`
	FilterIpv4Variable                                types.String                        `tfsdk:"filter_ipv4_variable"`
	RedistributeIpv4                                  []CiscoOSPFv3RedistributeIpv4       `tfsdk:"redistribute_ipv4"`
	MaxMetricRouterLsaIpv4                            []CiscoOSPFv3MaxMetricRouterLsaIpv4 `tfsdk:"max_metric_router_lsa_ipv4"`
	AreasIpv4                                         []CiscoOSPFv3AreasIpv4              `tfsdk:"areas_ipv4"`
	RouterIdIpv6                                      types.String                        `tfsdk:"router_id_ipv6"`
	RouterIdIpv6Variable                              types.String                        `tfsdk:"router_id_ipv6_variable"`
	AutoCostReferenceBandwidthIpv6                    types.Int64                         `tfsdk:"auto_cost_reference_bandwidth_ipv6"`
	AutoCostReferenceBandwidthIpv6Variable            types.String                        `tfsdk:"auto_cost_reference_bandwidth_ipv6_variable"`
	CompatibleRfc1583Ipv6                             types.Bool                          `tfsdk:"compatible_rfc1583_ipv6"`
	CompatibleRfc1583Ipv6Variable                     types.String                        `tfsdk:"compatible_rfc1583_ipv6_variable"`
	DefaultInformationOriginateIpv6                   types.Bool                          `tfsdk:"default_information_originate_ipv6"`
	DefaultInformationOriginateAlwaysIpv6             types.Bool                          `tfsdk:"default_information_originate_always_ipv6"`
	DefaultInformationOriginateAlwaysIpv6Variable     types.String                        `tfsdk:"default_information_originate_always_ipv6_variable"`
	DefaultInformationOriginateMetricIpv6             types.Int64                         `tfsdk:"default_information_originate_metric_ipv6"`
	DefaultInformationOriginateMetricIpv6Variable     types.String                        `tfsdk:"default_information_originate_metric_ipv6_variable"`
	DefaultInformationOriginateMetricTypeIpv6         types.String                        `tfsdk:"default_information_originate_metric_type_ipv6"`
	DefaultInformationOriginateMetricTypeIpv6Variable types.String                        `tfsdk:"default_information_originate_metric_type_ipv6_variable"`
	DistanceExternalIpv6                              types.Int64                         `tfsdk:"distance_external_ipv6"`
	DistanceExternalIpv6Variable                      types.String                        `tfsdk:"distance_external_ipv6_variable"`
	DistanceInterAreaIpv6                             types.Int64                         `tfsdk:"distance_inter_area_ipv6"`
	DistanceInterAreaIpv6Variable                     types.String                        `tfsdk:"distance_inter_area_ipv6_variable"`
	DistanceIntraAreaIpv6                             types.Int64                         `tfsdk:"distance_intra_area_ipv6"`
	DistanceIntraAreaIpv6Variable                     types.String                        `tfsdk:"distance_intra_area_ipv6_variable"`
	TimersSpfDelayIpv6                                types.Int64                         `tfsdk:"timers_spf_delay_ipv6"`
	TimersSpfDelayIpv6Variable                        types.String                        `tfsdk:"timers_spf_delay_ipv6_variable"`
	TimersSpfInitialHoldIpv6                          types.Int64                         `tfsdk:"timers_spf_initial_hold_ipv6"`
	TimersSpfInitialHoldIpv6Variable                  types.String                        `tfsdk:"timers_spf_initial_hold_ipv6_variable"`
	TimersSpfMaxHoldIpv6                              types.Int64                         `tfsdk:"timers_spf_max_hold_ipv6"`
	TimersSpfMaxHoldIpv6Variable                      types.String                        `tfsdk:"timers_spf_max_hold_ipv6_variable"`
	DistanceIpv6                                      types.Int64                         `tfsdk:"distance_ipv6"`
	DistanceIpv6Variable                              types.String                        `tfsdk:"distance_ipv6_variable"`
	PolicyNameIpv6                                    types.String                        `tfsdk:"policy_name_ipv6"`
	PolicyNameIpv6Variable                            types.String                        `tfsdk:"policy_name_ipv6_variable"`
	FilterIpv6                                        types.Bool                          `tfsdk:"filter_ipv6"`
	FilterIpv6Variable                                types.String                        `tfsdk:"filter_ipv6_variable"`
	RedistributeIpv6                                  []CiscoOSPFv3RedistributeIpv6       `tfsdk:"redistribute_ipv6"`
	MaxMetricRouterLsaIpv6                            []CiscoOSPFv3MaxMetricRouterLsaIpv6 `tfsdk:"max_metric_router_lsa_ipv6"`
	AreasIpv6                                         []CiscoOSPFv3AreasIpv6              `tfsdk:"areas_ipv6"`
}

type CiscoOSPFv3RedistributeIpv4 struct {
	Optional            types.Bool   `tfsdk:"optional"`
	Protocol            types.String `tfsdk:"protocol"`
	ProtocolVariable    types.String `tfsdk:"protocol_variable"`
	RoutePolicy         types.String `tfsdk:"route_policy"`
	RoutePolicyVariable types.String `tfsdk:"route_policy_variable"`
	NatDia              types.Bool   `tfsdk:"nat_dia"`
	NatDiaVariable      types.String `tfsdk:"nat_dia_variable"`
}

type CiscoOSPFv3MaxMetricRouterLsaIpv4 struct {
	Optional     types.Bool   `tfsdk:"optional"`
	AdType       types.String `tfsdk:"ad_type"`
	Time         types.Int64  `tfsdk:"time"`
	TimeVariable types.String `tfsdk:"time_variable"`
}

type CiscoOSPFv3AreasIpv4 struct {
	Optional              types.Bool                       `tfsdk:"optional"`
	AreaNumber            types.Int64                      `tfsdk:"area_number"`
	AreaNumberVariable    types.String                     `tfsdk:"area_number_variable"`
	Stub                  types.Bool                       `tfsdk:"stub"`
	StubNoSummary         types.Bool                       `tfsdk:"stub_no_summary"`
	StubNoSummaryVariable types.String                     `tfsdk:"stub_no_summary_variable"`
	Nssa                  types.Bool                       `tfsdk:"nssa"`
	NssaNoSummary         types.Bool                       `tfsdk:"nssa_no_summary"`
	NssaNoSummaryVariable types.String                     `tfsdk:"nssa_no_summary_variable"`
	Translate             types.String                     `tfsdk:"translate"`
	TranslateVariable     types.String                     `tfsdk:"translate_variable"`
	Normal                types.Bool                       `tfsdk:"normal"`
	NormalVariable        types.String                     `tfsdk:"normal_variable"`
	Interfaces            []CiscoOSPFv3AreasIpv4Interfaces `tfsdk:"interfaces"`
	Ranges                []CiscoOSPFv3AreasIpv4Ranges     `tfsdk:"ranges"`
}

type CiscoOSPFv3RedistributeIpv6 struct {
	Optional            types.Bool   `tfsdk:"optional"`
	Protocol            types.String `tfsdk:"protocol"`
	ProtocolVariable    types.String `tfsdk:"protocol_variable"`
	RoutePolicy         types.String `tfsdk:"route_policy"`
	RoutePolicyVariable types.String `tfsdk:"route_policy_variable"`
}

type CiscoOSPFv3MaxMetricRouterLsaIpv6 struct {
	Optional     types.Bool   `tfsdk:"optional"`
	AdType       types.String `tfsdk:"ad_type"`
	Time         types.Int64  `tfsdk:"time"`
	TimeVariable types.String `tfsdk:"time_variable"`
}

type CiscoOSPFv3AreasIpv6 struct {
	Optional              types.Bool                       `tfsdk:"optional"`
	AreaNumber            types.Int64                      `tfsdk:"area_number"`
	AreaNumberVariable    types.String                     `tfsdk:"area_number_variable"`
	Stub                  types.Bool                       `tfsdk:"stub"`
	StubNoSummary         types.Bool                       `tfsdk:"stub_no_summary"`
	StubNoSummaryVariable types.String                     `tfsdk:"stub_no_summary_variable"`
	Nssa                  types.Bool                       `tfsdk:"nssa"`
	NssaNoSummary         types.Bool                       `tfsdk:"nssa_no_summary"`
	NssaNoSummaryVariable types.String                     `tfsdk:"nssa_no_summary_variable"`
	Translate             types.String                     `tfsdk:"translate"`
	TranslateVariable     types.String                     `tfsdk:"translate_variable"`
	Normal                types.Bool                       `tfsdk:"normal"`
	NormalVariable        types.String                     `tfsdk:"normal_variable"`
	Interfaces            []CiscoOSPFv3AreasIpv6Interfaces `tfsdk:"interfaces"`
	Ranges                []CiscoOSPFv3AreasIpv6Ranges     `tfsdk:"ranges"`
}

type CiscoOSPFv3AreasIpv4Interfaces struct {
	Optional                   types.Bool   `tfsdk:"optional"`
	Name                       types.String `tfsdk:"name"`
	NameVariable               types.String `tfsdk:"name_variable"`
	HelloInterval              types.Int64  `tfsdk:"hello_interval"`
	HelloIntervalVariable      types.String `tfsdk:"hello_interval_variable"`
	DeadInterval               types.Int64  `tfsdk:"dead_interval"`
	DeadIntervalVariable       types.String `tfsdk:"dead_interval_variable"`
	RetransmitInterval         types.Int64  `tfsdk:"retransmit_interval"`
	RetransmitIntervalVariable types.String `tfsdk:"retransmit_interval_variable"`
	Cost                       types.Int64  `tfsdk:"cost"`
	CostVariable               types.String `tfsdk:"cost_variable"`
	Network                    types.String `tfsdk:"network"`
	NetworkVariable            types.String `tfsdk:"network_variable"`
	PassiveInterface           types.Bool   `tfsdk:"passive_interface"`
	PassiveInterfaceVariable   types.String `tfsdk:"passive_interface_variable"`
	AuthenticationType         types.String `tfsdk:"authentication_type"`
	AuthenticationTypeVariable types.String `tfsdk:"authentication_type_variable"`
	AuthenticationKey          types.String `tfsdk:"authentication_key"`
	AuthenticationKeyVariable  types.String `tfsdk:"authentication_key_variable"`
	IpsecSpi                   types.Int64  `tfsdk:"ipsec_spi"`
	IpsecSpiVariable           types.String `tfsdk:"ipsec_spi_variable"`
}
type CiscoOSPFv3AreasIpv4Ranges struct {
	Optional            types.Bool   `tfsdk:"optional"`
	Address             types.String `tfsdk:"address"`
	AddressVariable     types.String `tfsdk:"address_variable"`
	Cost                types.Int64  `tfsdk:"cost"`
	CostVariable        types.String `tfsdk:"cost_variable"`
	NoAdvertise         types.Bool   `tfsdk:"no_advertise"`
	NoAdvertiseVariable types.String `tfsdk:"no_advertise_variable"`
}

type CiscoOSPFv3AreasIpv6Interfaces struct {
	Optional                   types.Bool   `tfsdk:"optional"`
	Name                       types.String `tfsdk:"name"`
	NameVariable               types.String `tfsdk:"name_variable"`
	HelloInterval              types.Int64  `tfsdk:"hello_interval"`
	HelloIntervalVariable      types.String `tfsdk:"hello_interval_variable"`
	DeadInterval               types.Int64  `tfsdk:"dead_interval"`
	DeadIntervalVariable       types.String `tfsdk:"dead_interval_variable"`
	RetransmitInterval         types.Int64  `tfsdk:"retransmit_interval"`
	RetransmitIntervalVariable types.String `tfsdk:"retransmit_interval_variable"`
	Cost                       types.Int64  `tfsdk:"cost"`
	CostVariable               types.String `tfsdk:"cost_variable"`
	Network                    types.String `tfsdk:"network"`
	NetworkVariable            types.String `tfsdk:"network_variable"`
	PassiveInterface           types.Bool   `tfsdk:"passive_interface"`
	PassiveInterfaceVariable   types.String `tfsdk:"passive_interface_variable"`
	AuthenticationType         types.String `tfsdk:"authentication_type"`
	AuthenticationTypeVariable types.String `tfsdk:"authentication_type_variable"`
	AuthenticationKey          types.String `tfsdk:"authentication_key"`
	AuthenticationKeyVariable  types.String `tfsdk:"authentication_key_variable"`
	IpsecSpi                   types.Int64  `tfsdk:"ipsec_spi"`
	IpsecSpiVariable           types.String `tfsdk:"ipsec_spi_variable"`
}
type CiscoOSPFv3AreasIpv6Ranges struct {
	Optional            types.Bool   `tfsdk:"optional"`
	Address             types.String `tfsdk:"address"`
	AddressVariable     types.String `tfsdk:"address_variable"`
	Cost                types.Int64  `tfsdk:"cost"`
	CostVariable        types.String `tfsdk:"cost_variable"`
	NoAdvertise         types.Bool   `tfsdk:"no_advertise"`
	NoAdvertiseVariable types.String `tfsdk:"no_advertise_variable"`
}

func (data CiscoOSPFv3) getModel() string {
	return "cisco_ospfv3"
}

func (data CiscoOSPFv3) toBody(ctx context.Context) string {
	body := ""

	var device_types []string
	data.DeviceTypes.ElementsAs(ctx, &device_types, false)
	body, _ = sjson.Set(body, "deviceType", device_types)
	body, _ = sjson.Set(body, "factoryDefault", false)
	body, _ = sjson.Set(body, "templateDescription", data.Description.ValueString())
	body, _ = sjson.Set(body, "templateMinVersion", "15.0.0")
	body, _ = sjson.Set(body, "templateName", data.Name.ValueString())
	body, _ = sjson.Set(body, "templateType", "cisco_ospfv3")
	body, _ = sjson.Set(body, "templateDefinition", map[string]interface{}{})

	path := "templateDefinition."

	if !data.RouterIdIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.router-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.router-id."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.router-id."+"vipVariableName", data.RouterIdIpv4Variable.ValueString())
	} else if data.RouterIdIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.router-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.router-id."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.router-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.router-id."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.router-id."+"vipValue", data.RouterIdIpv4.ValueString())
	}

	if !data.AutoCostReferenceBandwidthIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.auto-cost.reference-bandwidth."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.auto-cost.reference-bandwidth."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.auto-cost.reference-bandwidth."+"vipVariableName", data.AutoCostReferenceBandwidthIpv4Variable.ValueString())
	} else if data.AutoCostReferenceBandwidthIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.auto-cost.reference-bandwidth."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.auto-cost.reference-bandwidth."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.auto-cost.reference-bandwidth."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.auto-cost.reference-bandwidth."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.auto-cost.reference-bandwidth."+"vipValue", data.AutoCostReferenceBandwidthIpv4.ValueInt64())
	}

	if !data.CompatibleRfc1583Ipv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.compatible.rfc1583."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.compatible.rfc1583."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.compatible.rfc1583."+"vipVariableName", data.CompatibleRfc1583Ipv4Variable.ValueString())
	} else if data.CompatibleRfc1583Ipv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.compatible.rfc1583."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.compatible.rfc1583."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.compatible.rfc1583."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.compatible.rfc1583."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.compatible.rfc1583."+"vipValue", strconv.FormatBool(data.CompatibleRfc1583Ipv4.ValueBool()))
	}
	if !data.DefaultInformationOriginateIpv4.IsNull() {
		if data.DefaultInformationOriginateIpv4.ValueBool() {
			body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate", map[string]interface{}{})
		} else {
			body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate."+"vipObjectType", "node-only")
			body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate."+"vipType", "ignore")
		}
	}

	if !data.DefaultInformationOriginateAlwaysIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.always."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.always."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.always."+"vipVariableName", data.DefaultInformationOriginateAlwaysIpv4Variable.ValueString())
	} else if data.DefaultInformationOriginateAlwaysIpv4.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.always."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.always."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.always."+"vipValue", strconv.FormatBool(data.DefaultInformationOriginateAlwaysIpv4.ValueBool()))
	}

	if !data.DefaultInformationOriginateMetricIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric."+"vipVariableName", data.DefaultInformationOriginateMetricIpv4Variable.ValueString())
	} else if data.DefaultInformationOriginateMetricIpv4.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric."+"vipValue", data.DefaultInformationOriginateMetricIpv4.ValueInt64())
	}

	if !data.DefaultInformationOriginateMetricTypeIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric-type."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric-type."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric-type."+"vipVariableName", data.DefaultInformationOriginateMetricTypeIpv4Variable.ValueString())
	} else if data.DefaultInformationOriginateMetricTypeIpv4.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric-type."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric-type."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.default-information.originate.metric-type."+"vipValue", data.DefaultInformationOriginateMetricTypeIpv4.ValueString())
	}

	if !data.DistanceExternalIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.external."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.external."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.external."+"vipVariableName", data.DistanceExternalIpv4Variable.ValueString())
	} else if data.DistanceExternalIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.external."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.external."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.external."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.external."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.external."+"vipValue", data.DistanceExternalIpv4.ValueInt64())
	}

	if !data.DistanceInterAreaIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area."+"vipVariableName", data.DistanceInterAreaIpv4Variable.ValueString())
	} else if data.DistanceInterAreaIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area."+"vipValue", data.DistanceInterAreaIpv4.ValueInt64())
	}

	if !data.DistanceIntraAreaIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area."+"vipVariableName", data.DistanceIntraAreaIpv4Variable.ValueString())
	} else if data.DistanceIntraAreaIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area."+"vipValue", data.DistanceIntraAreaIpv4.ValueInt64())
	}

	if !data.TimersSpfDelayIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.delay."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.delay."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.delay."+"vipVariableName", data.TimersSpfDelayIpv4Variable.ValueString())
	} else if data.TimersSpfDelayIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.delay."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.delay."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.delay."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.delay."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.delay."+"vipValue", data.TimersSpfDelayIpv4.ValueInt64())
	}

	if !data.TimersSpfInitialHoldIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold."+"vipVariableName", data.TimersSpfInitialHoldIpv4Variable.ValueString())
	} else if data.TimersSpfInitialHoldIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold."+"vipValue", data.TimersSpfInitialHoldIpv4.ValueInt64())
	}

	if !data.TimersSpfMaxHoldIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.max-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.max-hold."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.max-hold."+"vipVariableName", data.TimersSpfMaxHoldIpv4Variable.ValueString())
	} else if data.TimersSpfMaxHoldIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.max-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.max-hold."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.max-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.max-hold."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.timers.throttle.spf.max-hold."+"vipValue", data.TimersSpfMaxHoldIpv4.ValueInt64())
	}

	if !data.DistanceIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.distance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.distance."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.distance."+"vipVariableName", data.DistanceIpv4Variable.ValueString())
	} else if data.DistanceIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.distance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.distance."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.distance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.distance."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.distance-ipv4.distance."+"vipValue", data.DistanceIpv4.ValueInt64())
	}

	if !data.PolicyNameIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.name."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.name."+"vipVariableName", data.PolicyNameIpv4Variable.ValueString())
	} else if data.PolicyNameIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.name."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.name."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.name."+"vipValue", data.PolicyNameIpv4.ValueString())
	}

	if !data.FilterIpv4Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.filter."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.filter."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.filter."+"vipVariableName", data.FilterIpv4Variable.ValueString())
	} else if data.FilterIpv4.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.filter."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.filter."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.filter."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.filter."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.table-map.filter."+"vipValue", strconv.FormatBool(data.FilterIpv4.ValueBool()))
	}
	if len(data.RedistributeIpv4) > 0 {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.redistribute."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.redistribute."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.redistribute."+"vipPrimaryKey", []string{"protocol"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.redistribute."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.redistribute."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.redistribute."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.redistribute."+"vipPrimaryKey", []string{"protocol"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.redistribute."+"vipValue", []interface{}{})
	}
	for _, item := range data.RedistributeIpv4 {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "protocol")

		if !item.ProtocolVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipVariableName", item.ProtocolVariable.ValueString())
		} else if item.Protocol.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipValue", item.Protocol.ValueString())
		}
		itemAttributes = append(itemAttributes, "route-policy")

		if !item.RoutePolicyVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipVariableName", item.RoutePolicyVariable.ValueString())
		} else if item.RoutePolicy.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipValue", item.RoutePolicy.ValueString())
		}
		itemAttributes = append(itemAttributes, "dia")

		if !item.NatDiaVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "dia."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "dia."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "dia."+"vipVariableName", item.NatDiaVariable.ValueString())
		} else if item.NatDia.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "dia."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "dia."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "dia."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "dia."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "dia."+"vipValue", strconv.FormatBool(item.NatDia.ValueBool()))
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"ospfv3.address-family.ipv4.redistribute."+"vipValue.-1", itemBody)
	}
	if len(data.MaxMetricRouterLsaIpv4) > 0 {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.max-metric.router-lsa."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.max-metric.router-lsa."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.max-metric.router-lsa."+"vipPrimaryKey", []string{"ad-type"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.max-metric.router-lsa."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.max-metric.router-lsa."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.max-metric.router-lsa."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.max-metric.router-lsa."+"vipPrimaryKey", []string{"ad-type"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.max-metric.router-lsa."+"vipValue", []interface{}{})
	}
	for _, item := range data.MaxMetricRouterLsaIpv4 {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "ad-type")
		if item.AdType.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "ad-type."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "ad-type."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "ad-type."+"vipValue", item.AdType.ValueString())
		}
		itemAttributes = append(itemAttributes, "time")

		if !item.TimeVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "time."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "time."+"vipVariableName", item.TimeVariable.ValueString())
		} else if item.Time.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "time."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "time."+"vipValue", item.Time.ValueInt64())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"ospfv3.address-family.ipv4.max-metric.router-lsa."+"vipValue.-1", itemBody)
	}
	if len(data.AreasIpv4) > 0 {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.area."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.area."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.area."+"vipPrimaryKey", []string{"a-num"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.area."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.area."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.area."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.area."+"vipPrimaryKey", []string{"a-num"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv4.area."+"vipValue", []interface{}{})
	}
	for _, item := range data.AreasIpv4 {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "a-num")

		if !item.AreaNumberVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipVariableName", item.AreaNumberVariable.ValueString())
		} else if item.AreaNumber.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipValue", item.AreaNumber.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "stub")
		if !item.Stub.IsNull() {
			if item.Stub.ValueBool() {
				itemBody, _ = sjson.Set(itemBody, "stub", map[string]interface{}{})
			} else {
				itemBody, _ = sjson.Set(itemBody, "stub."+"vipObjectType", "")
				itemBody, _ = sjson.Set(itemBody, "stub."+"vipType", "ignore")
			}
		}
		itemAttributes = append(itemAttributes, "no-summary")

		if !item.StubNoSummaryVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipVariableName", item.StubNoSummaryVariable.ValueString())
		} else if item.StubNoSummary.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipValue", strconv.FormatBool(item.StubNoSummary.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "nssa")
		if !item.Nssa.IsNull() {
			if item.Nssa.ValueBool() {
				itemBody, _ = sjson.Set(itemBody, "nssa", map[string]interface{}{})
			} else {
				itemBody, _ = sjson.Set(itemBody, "nssa."+"vipObjectType", "")
				itemBody, _ = sjson.Set(itemBody, "nssa."+"vipType", "ignore")
			}
		}
		itemAttributes = append(itemAttributes, "no-summary")

		if !item.NssaNoSummaryVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipVariableName", item.NssaNoSummaryVariable.ValueString())
		} else if item.NssaNoSummary.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipValue", strconv.FormatBool(item.NssaNoSummary.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "translate")

		if !item.TranslateVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipVariableName", item.TranslateVariable.ValueString())
		} else if item.Translate.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipValue", item.Translate.ValueString())
		}
		itemAttributes = append(itemAttributes, "normal")

		if !item.NormalVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipVariableName", item.NormalVariable.ValueString())
		} else if item.Normal.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipValue", strconv.FormatBool(item.Normal.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "interface")
		if len(item.Interfaces) > 0 {
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipPrimaryKey", []string{"name"})
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipValue", []interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipType", "ignore")
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipPrimaryKey", []string{"name"})
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipValue", []interface{}{})
		}
		for _, childItem := range item.Interfaces {
			itemChildBody := ""
			itemChildAttributes := make([]string, 0)
			itemChildAttributes = append(itemChildAttributes, "name")

			if !childItem.NameVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipVariableName", childItem.NameVariable.ValueString())
			} else if childItem.Name.IsNull() {
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipValue", childItem.Name.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "hello-interval")

			if !childItem.HelloIntervalVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipVariableName", childItem.HelloIntervalVariable.ValueString())
			} else if childItem.HelloInterval.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipValue", childItem.HelloInterval.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "dead-interval")

			if !childItem.DeadIntervalVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipVariableName", childItem.DeadIntervalVariable.ValueString())
			} else if childItem.DeadInterval.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipValue", childItem.DeadInterval.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "retransmit-interval")

			if !childItem.RetransmitIntervalVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipVariableName", childItem.RetransmitIntervalVariable.ValueString())
			} else if childItem.RetransmitInterval.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipValue", childItem.RetransmitInterval.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "cost")

			if !childItem.CostVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipVariableName", childItem.CostVariable.ValueString())
			} else if childItem.Cost.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipValue", childItem.Cost.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "network")

			if !childItem.NetworkVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipVariableName", childItem.NetworkVariable.ValueString())
			} else if childItem.Network.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipValue", childItem.Network.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "passive-interface")

			if !childItem.PassiveInterfaceVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipVariableName", childItem.PassiveInterfaceVariable.ValueString())
			} else if childItem.PassiveInterface.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipValue", strconv.FormatBool(childItem.PassiveInterface.ValueBool()))
			}
			itemChildAttributes = append(itemChildAttributes, "type")

			if !childItem.AuthenticationTypeVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipVariableName", childItem.AuthenticationTypeVariable.ValueString())
			} else if childItem.AuthenticationType.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication", map[string]interface{}{})
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipValue", childItem.AuthenticationType.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "authentication-key")

			if !childItem.AuthenticationKeyVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipVariableName", childItem.AuthenticationKeyVariable.ValueString())
			} else if childItem.AuthenticationKey.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication", map[string]interface{}{})
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipValue", childItem.AuthenticationKey.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "spi")

			if !childItem.IpsecSpiVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipVariableName", childItem.IpsecSpiVariable.ValueString())
			} else if childItem.IpsecSpi.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipValue", childItem.IpsecSpi.ValueInt64())
			}
			if !childItem.Optional.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "vipOptional", childItem.Optional.ValueBool())
				itemChildBody, _ = sjson.Set(itemChildBody, "priority-order", itemChildAttributes)
			}
			itemBody, _ = sjson.SetRaw(itemBody, "interface."+"vipValue.-1", itemChildBody)
		}
		itemAttributes = append(itemAttributes, "range")
		if len(item.Ranges) > 0 {
			itemBody, _ = sjson.Set(itemBody, "range."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "range."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "range."+"vipPrimaryKey", []string{"address"})
			itemBody, _ = sjson.Set(itemBody, "range."+"vipValue", []interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "range."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "range."+"vipType", "ignore")
			itemBody, _ = sjson.Set(itemBody, "range."+"vipPrimaryKey", []string{"address"})
			itemBody, _ = sjson.Set(itemBody, "range."+"vipValue", []interface{}{})
		}
		for _, childItem := range item.Ranges {
			itemChildBody := ""
			itemChildAttributes := make([]string, 0)
			itemChildAttributes = append(itemChildAttributes, "address")

			if !childItem.AddressVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipVariableName", childItem.AddressVariable.ValueString())
			} else if childItem.Address.IsNull() {
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipValue", childItem.Address.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "cost")

			if !childItem.CostVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipVariableName", childItem.CostVariable.ValueString())
			} else if childItem.Cost.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipValue", childItem.Cost.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "no-advertise")

			if !childItem.NoAdvertiseVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipVariableName", childItem.NoAdvertiseVariable.ValueString())
			} else if childItem.NoAdvertise.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipValue", strconv.FormatBool(childItem.NoAdvertise.ValueBool()))
			}
			if !childItem.Optional.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "vipOptional", childItem.Optional.ValueBool())
				itemChildBody, _ = sjson.Set(itemChildBody, "priority-order", itemChildAttributes)
			}
			itemBody, _ = sjson.SetRaw(itemBody, "range."+"vipValue.-1", itemChildBody)
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"ospfv3.address-family.ipv4.area."+"vipValue.-1", itemBody)
	}

	if !data.RouterIdIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.router-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.router-id."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.router-id."+"vipVariableName", data.RouterIdIpv6Variable.ValueString())
	} else if data.RouterIdIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.router-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.router-id."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.router-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.router-id."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.router-id."+"vipValue", data.RouterIdIpv6.ValueString())
	}

	if !data.AutoCostReferenceBandwidthIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.auto-cost.reference-bandwidth."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.auto-cost.reference-bandwidth."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.auto-cost.reference-bandwidth."+"vipVariableName", data.AutoCostReferenceBandwidthIpv6Variable.ValueString())
	} else if data.AutoCostReferenceBandwidthIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.auto-cost.reference-bandwidth."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.auto-cost.reference-bandwidth."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.auto-cost.reference-bandwidth."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.auto-cost.reference-bandwidth."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.auto-cost.reference-bandwidth."+"vipValue", data.AutoCostReferenceBandwidthIpv6.ValueInt64())
	}

	if !data.CompatibleRfc1583Ipv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.compatible.rfc1583."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.compatible.rfc1583."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.compatible.rfc1583."+"vipVariableName", data.CompatibleRfc1583Ipv6Variable.ValueString())
	} else if data.CompatibleRfc1583Ipv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.compatible.rfc1583."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.compatible.rfc1583."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.compatible.rfc1583."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.compatible.rfc1583."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.compatible.rfc1583."+"vipValue", strconv.FormatBool(data.CompatibleRfc1583Ipv6.ValueBool()))
	}
	if !data.DefaultInformationOriginateIpv6.IsNull() {
		if data.DefaultInformationOriginateIpv6.ValueBool() {
			body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate", map[string]interface{}{})
		} else {
			body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate."+"vipObjectType", "node-only")
			body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate."+"vipType", "ignore")
		}
	}

	if !data.DefaultInformationOriginateAlwaysIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.always."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.always."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.always."+"vipVariableName", data.DefaultInformationOriginateAlwaysIpv6Variable.ValueString())
	} else if data.DefaultInformationOriginateAlwaysIpv6.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.always."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.always."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.always."+"vipValue", strconv.FormatBool(data.DefaultInformationOriginateAlwaysIpv6.ValueBool()))
	}

	if !data.DefaultInformationOriginateMetricIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric."+"vipVariableName", data.DefaultInformationOriginateMetricIpv6Variable.ValueString())
	} else if data.DefaultInformationOriginateMetricIpv6.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric."+"vipValue", data.DefaultInformationOriginateMetricIpv6.ValueInt64())
	}

	if !data.DefaultInformationOriginateMetricTypeIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric-type."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric-type."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric-type."+"vipVariableName", data.DefaultInformationOriginateMetricTypeIpv6Variable.ValueString())
	} else if data.DefaultInformationOriginateMetricTypeIpv6.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric-type."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric-type."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.default-information.originate.metric-type."+"vipValue", data.DefaultInformationOriginateMetricTypeIpv6.ValueString())
	}

	if !data.DistanceExternalIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.external."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.external."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.external."+"vipVariableName", data.DistanceExternalIpv6Variable.ValueString())
	} else if data.DistanceExternalIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.external."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.external."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.external."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.external."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.external."+"vipValue", data.DistanceExternalIpv6.ValueInt64())
	}

	if !data.DistanceInterAreaIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area."+"vipVariableName", data.DistanceInterAreaIpv6Variable.ValueString())
	} else if data.DistanceInterAreaIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area."+"vipValue", data.DistanceInterAreaIpv6.ValueInt64())
	}

	if !data.DistanceIntraAreaIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area."+"vipVariableName", data.DistanceIntraAreaIpv6Variable.ValueString())
	} else if data.DistanceIntraAreaIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area."+"vipValue", data.DistanceIntraAreaIpv6.ValueInt64())
	}

	if !data.TimersSpfDelayIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.delay."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.delay."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.delay."+"vipVariableName", data.TimersSpfDelayIpv6Variable.ValueString())
	} else if data.TimersSpfDelayIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.delay."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.delay."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.delay."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.delay."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.delay."+"vipValue", data.TimersSpfDelayIpv6.ValueInt64())
	}

	if !data.TimersSpfInitialHoldIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold."+"vipVariableName", data.TimersSpfInitialHoldIpv6Variable.ValueString())
	} else if data.TimersSpfInitialHoldIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold."+"vipValue", data.TimersSpfInitialHoldIpv6.ValueInt64())
	}

	if !data.TimersSpfMaxHoldIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.max-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.max-hold."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.max-hold."+"vipVariableName", data.TimersSpfMaxHoldIpv6Variable.ValueString())
	} else if data.TimersSpfMaxHoldIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.max-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.max-hold."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.max-hold."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.max-hold."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.timers.throttle.spf.max-hold."+"vipValue", data.TimersSpfMaxHoldIpv6.ValueInt64())
	}

	if !data.DistanceIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.distance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.distance."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.distance."+"vipVariableName", data.DistanceIpv6Variable.ValueString())
	} else if data.DistanceIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.distance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.distance."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.distance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.distance."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.distance-ipv6.distance."+"vipValue", data.DistanceIpv6.ValueInt64())
	}

	if !data.PolicyNameIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.name."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.name."+"vipVariableName", data.PolicyNameIpv6Variable.ValueString())
	} else if data.PolicyNameIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.name."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.name."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.name."+"vipValue", data.PolicyNameIpv6.ValueString())
	}

	if !data.FilterIpv6Variable.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.filter."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.filter."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.filter."+"vipVariableName", data.FilterIpv6Variable.ValueString())
	} else if data.FilterIpv6.IsNull() {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.filter."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.filter."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.filter."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.filter."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.table-map.filter."+"vipValue", strconv.FormatBool(data.FilterIpv6.ValueBool()))
	}
	if len(data.RedistributeIpv6) > 0 {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.redistribute."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.redistribute."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.redistribute."+"vipPrimaryKey", []string{"protocol"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.redistribute."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.redistribute."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.redistribute."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.redistribute."+"vipPrimaryKey", []string{"protocol"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.redistribute."+"vipValue", []interface{}{})
	}
	for _, item := range data.RedistributeIpv6 {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "protocol")

		if !item.ProtocolVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipVariableName", item.ProtocolVariable.ValueString())
		} else if item.Protocol.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "protocol."+"vipValue", item.Protocol.ValueString())
		}
		itemAttributes = append(itemAttributes, "route-policy")

		if !item.RoutePolicyVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipVariableName", item.RoutePolicyVariable.ValueString())
		} else if item.RoutePolicy.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "route-policy."+"vipValue", item.RoutePolicy.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"ospfv3.address-family.ipv6.redistribute."+"vipValue.-1", itemBody)
	}
	if len(data.MaxMetricRouterLsaIpv6) > 0 {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.max-metric.router-lsa."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.max-metric.router-lsa."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.max-metric.router-lsa."+"vipPrimaryKey", []string{"ad-type"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.max-metric.router-lsa."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.max-metric.router-lsa."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.max-metric.router-lsa."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.max-metric.router-lsa."+"vipPrimaryKey", []string{"ad-type"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.max-metric.router-lsa."+"vipValue", []interface{}{})
	}
	for _, item := range data.MaxMetricRouterLsaIpv6 {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "ad-type")
		if item.AdType.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "ad-type."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "ad-type."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "ad-type."+"vipValue", item.AdType.ValueString())
		}
		itemAttributes = append(itemAttributes, "time")

		if !item.TimeVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "time."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "time."+"vipVariableName", item.TimeVariable.ValueString())
		} else if item.Time.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "time."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "time."+"vipValue", item.Time.ValueInt64())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"ospfv3.address-family.ipv6.max-metric.router-lsa."+"vipValue.-1", itemBody)
	}
	if len(data.AreasIpv6) > 0 {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.area."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.area."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.area."+"vipPrimaryKey", []string{"a-num"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.area."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.area."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.area."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.area."+"vipPrimaryKey", []string{"a-num"})
		body, _ = sjson.Set(body, path+"ospfv3.address-family.ipv6.area."+"vipValue", []interface{}{})
	}
	for _, item := range data.AreasIpv6 {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "a-num")

		if !item.AreaNumberVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipVariableName", item.AreaNumberVariable.ValueString())
		} else if item.AreaNumber.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "a-num."+"vipValue", item.AreaNumber.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "stub")
		if !item.Stub.IsNull() {
			if item.Stub.ValueBool() {
				itemBody, _ = sjson.Set(itemBody, "stub", map[string]interface{}{})
			} else {
				itemBody, _ = sjson.Set(itemBody, "stub."+"vipObjectType", "")
				itemBody, _ = sjson.Set(itemBody, "stub."+"vipType", "ignore")
			}
		}
		itemAttributes = append(itemAttributes, "no-summary")

		if !item.StubNoSummaryVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipVariableName", item.StubNoSummaryVariable.ValueString())
		} else if item.StubNoSummary.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "stub.no-summary."+"vipValue", strconv.FormatBool(item.StubNoSummary.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "nssa")
		if !item.Nssa.IsNull() {
			if item.Nssa.ValueBool() {
				itemBody, _ = sjson.Set(itemBody, "nssa", map[string]interface{}{})
			} else {
				itemBody, _ = sjson.Set(itemBody, "nssa."+"vipObjectType", "")
				itemBody, _ = sjson.Set(itemBody, "nssa."+"vipType", "ignore")
			}
		}
		itemAttributes = append(itemAttributes, "no-summary")

		if !item.NssaNoSummaryVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipVariableName", item.NssaNoSummaryVariable.ValueString())
		} else if item.NssaNoSummary.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "nssa.no-summary."+"vipValue", strconv.FormatBool(item.NssaNoSummary.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "translate")

		if !item.TranslateVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipVariableName", item.TranslateVariable.ValueString())
		} else if item.Translate.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "nssa.translate."+"vipValue", item.Translate.ValueString())
		}
		itemAttributes = append(itemAttributes, "normal")

		if !item.NormalVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipVariableName", item.NormalVariable.ValueString())
		} else if item.Normal.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipObjectType", "node-only")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "normal."+"vipValue", strconv.FormatBool(item.Normal.ValueBool()))
		}
		itemAttributes = append(itemAttributes, "interface")
		if len(item.Interfaces) > 0 {
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipPrimaryKey", []string{"name"})
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipValue", []interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipType", "ignore")
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipPrimaryKey", []string{"name"})
			itemBody, _ = sjson.Set(itemBody, "interface."+"vipValue", []interface{}{})
		}
		for _, childItem := range item.Interfaces {
			itemChildBody := ""
			itemChildAttributes := make([]string, 0)
			itemChildAttributes = append(itemChildAttributes, "name")

			if !childItem.NameVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipVariableName", childItem.NameVariable.ValueString())
			} else if childItem.Name.IsNull() {
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "name."+"vipValue", childItem.Name.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "hello-interval")

			if !childItem.HelloIntervalVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipVariableName", childItem.HelloIntervalVariable.ValueString())
			} else if childItem.HelloInterval.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "hello-interval."+"vipValue", childItem.HelloInterval.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "dead-interval")

			if !childItem.DeadIntervalVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipVariableName", childItem.DeadIntervalVariable.ValueString())
			} else if childItem.DeadInterval.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "dead-interval."+"vipValue", childItem.DeadInterval.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "retransmit-interval")

			if !childItem.RetransmitIntervalVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipVariableName", childItem.RetransmitIntervalVariable.ValueString())
			} else if childItem.RetransmitInterval.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "retransmit-interval."+"vipValue", childItem.RetransmitInterval.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "cost")

			if !childItem.CostVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipVariableName", childItem.CostVariable.ValueString())
			} else if childItem.Cost.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipValue", childItem.Cost.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "network")

			if !childItem.NetworkVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipVariableName", childItem.NetworkVariable.ValueString())
			} else if childItem.Network.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "network."+"vipValue", childItem.Network.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "passive-interface")

			if !childItem.PassiveInterfaceVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipVariableName", childItem.PassiveInterfaceVariable.ValueString())
			} else if childItem.PassiveInterface.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "passive-interface."+"vipValue", strconv.FormatBool(childItem.PassiveInterface.ValueBool()))
			}
			itemChildAttributes = append(itemChildAttributes, "type")

			if !childItem.AuthenticationTypeVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipVariableName", childItem.AuthenticationTypeVariable.ValueString())
			} else if childItem.AuthenticationType.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication", map[string]interface{}{})
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.type."+"vipValue", childItem.AuthenticationType.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "authentication-key")

			if !childItem.AuthenticationKeyVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipVariableName", childItem.AuthenticationKeyVariable.ValueString())
			} else if childItem.AuthenticationKey.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication", map[string]interface{}{})
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.authentication-key."+"vipValue", childItem.AuthenticationKey.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "spi")

			if !childItem.IpsecSpiVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipVariableName", childItem.IpsecSpiVariable.ValueString())
			} else if childItem.IpsecSpi.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "authentication.ipsec.spi."+"vipValue", childItem.IpsecSpi.ValueInt64())
			}
			if !childItem.Optional.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "vipOptional", childItem.Optional.ValueBool())
				itemChildBody, _ = sjson.Set(itemChildBody, "priority-order", itemChildAttributes)
			}
			itemBody, _ = sjson.SetRaw(itemBody, "interface."+"vipValue.-1", itemChildBody)
		}
		itemAttributes = append(itemAttributes, "range")
		if len(item.Ranges) > 0 {
			itemBody, _ = sjson.Set(itemBody, "range."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "range."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "range."+"vipPrimaryKey", []string{"address"})
			itemBody, _ = sjson.Set(itemBody, "range."+"vipValue", []interface{}{})
		} else {
			itemBody, _ = sjson.Set(itemBody, "range."+"vipObjectType", "tree")
			itemBody, _ = sjson.Set(itemBody, "range."+"vipType", "ignore")
			itemBody, _ = sjson.Set(itemBody, "range."+"vipPrimaryKey", []string{"address"})
			itemBody, _ = sjson.Set(itemBody, "range."+"vipValue", []interface{}{})
		}
		for _, childItem := range item.Ranges {
			itemChildBody := ""
			itemChildAttributes := make([]string, 0)
			itemChildAttributes = append(itemChildAttributes, "address")

			if !childItem.AddressVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipVariableName", childItem.AddressVariable.ValueString())
			} else if childItem.Address.IsNull() {
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "address."+"vipValue", childItem.Address.ValueString())
			}
			itemChildAttributes = append(itemChildAttributes, "cost")

			if !childItem.CostVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipVariableName", childItem.CostVariable.ValueString())
			} else if childItem.Cost.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipObjectType", "object")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "cost."+"vipValue", childItem.Cost.ValueInt64())
			}
			itemChildAttributes = append(itemChildAttributes, "no-advertise")

			if !childItem.NoAdvertiseVariable.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipType", "variableName")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipVariableName", childItem.NoAdvertiseVariable.ValueString())
			} else if childItem.NoAdvertise.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipType", "ignore")
			} else {
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipObjectType", "node-only")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipType", "constant")
				itemChildBody, _ = sjson.Set(itemChildBody, "no-advertise."+"vipValue", strconv.FormatBool(childItem.NoAdvertise.ValueBool()))
			}
			if !childItem.Optional.IsNull() {
				itemChildBody, _ = sjson.Set(itemChildBody, "vipOptional", childItem.Optional.ValueBool())
				itemChildBody, _ = sjson.Set(itemChildBody, "priority-order", itemChildAttributes)
			}
			itemBody, _ = sjson.SetRaw(itemBody, "range."+"vipValue.-1", itemChildBody)
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"ospfv3.address-family.ipv6.area."+"vipValue.-1", itemBody)
	}
	return body
}

func (data *CiscoOSPFv3) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("deviceType"); value.Exists() {
		data.DeviceTypes = helpers.GetStringSet(value.Array())
	} else {
		data.DeviceTypes = types.SetNull(types.StringType)
	}
	if value := res.Get("templateDescription"); value.Exists() && value.String() != "" {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("templateName"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("templateType"); value.Exists() {
		data.TemplateType = types.StringValue(value.String())
	} else {
		data.TemplateType = types.StringNull()
	}

	path := "templateDefinition."
	if value := res.Get(path + "ospfv3.address-family.ipv4.router-id.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.RouterIdIpv4 = types.StringNull()

			v := res.Get(path + "ospfv3.address-family.ipv4.router-id.vipVariableName")
			data.RouterIdIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.RouterIdIpv4 = types.StringNull()
			data.RouterIdIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.router-id.vipValue")
			data.RouterIdIpv4 = types.StringValue(v.String())
			data.RouterIdIpv4Variable = types.StringNull()
		}
	} else {
		data.RouterIdIpv4 = types.StringNull()
		data.RouterIdIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.auto-cost.reference-bandwidth.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.AutoCostReferenceBandwidthIpv4 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv4.auto-cost.reference-bandwidth.vipVariableName")
			data.AutoCostReferenceBandwidthIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.AutoCostReferenceBandwidthIpv4 = types.Int64Null()
			data.AutoCostReferenceBandwidthIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.auto-cost.reference-bandwidth.vipValue")
			data.AutoCostReferenceBandwidthIpv4 = types.Int64Value(v.Int())
			data.AutoCostReferenceBandwidthIpv4Variable = types.StringNull()
		}
	} else {
		data.AutoCostReferenceBandwidthIpv4 = types.Int64Null()
		data.AutoCostReferenceBandwidthIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.compatible.rfc1583.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.CompatibleRfc1583Ipv4 = types.BoolNull()

			v := res.Get(path + "ospfv3.address-family.ipv4.compatible.rfc1583.vipVariableName")
			data.CompatibleRfc1583Ipv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.CompatibleRfc1583Ipv4 = types.BoolNull()
			data.CompatibleRfc1583Ipv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.compatible.rfc1583.vipValue")
			data.CompatibleRfc1583Ipv4 = types.BoolValue(v.Bool())
			data.CompatibleRfc1583Ipv4Variable = types.StringNull()
		}
	} else {
		data.CompatibleRfc1583Ipv4 = types.BoolNull()
		data.CompatibleRfc1583Ipv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DefaultInformationOriginateIpv4 = types.BoolNull()

		} else if value.String() == "ignore" {
			data.DefaultInformationOriginateIpv4 = types.BoolValue(false)

		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.vipValue")
			data.DefaultInformationOriginateIpv4 = types.BoolValue(v.Bool())

		}
	} else if value := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate"); value.Exists() {
		data.DefaultInformationOriginateIpv4 = types.BoolValue(true)

	} else {
		data.DefaultInformationOriginateIpv4 = types.BoolNull()

	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.always.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DefaultInformationOriginateAlwaysIpv4 = types.BoolNull()

			v := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.always.vipVariableName")
			data.DefaultInformationOriginateAlwaysIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DefaultInformationOriginateAlwaysIpv4 = types.BoolNull()
			data.DefaultInformationOriginateAlwaysIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.always.vipValue")
			data.DefaultInformationOriginateAlwaysIpv4 = types.BoolValue(v.Bool())
			data.DefaultInformationOriginateAlwaysIpv4Variable = types.StringNull()
		}
	} else {
		data.DefaultInformationOriginateAlwaysIpv4 = types.BoolNull()
		data.DefaultInformationOriginateAlwaysIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.metric.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DefaultInformationOriginateMetricIpv4 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.metric.vipVariableName")
			data.DefaultInformationOriginateMetricIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DefaultInformationOriginateMetricIpv4 = types.Int64Null()
			data.DefaultInformationOriginateMetricIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.metric.vipValue")
			data.DefaultInformationOriginateMetricIpv4 = types.Int64Value(v.Int())
			data.DefaultInformationOriginateMetricIpv4Variable = types.StringNull()
		}
	} else {
		data.DefaultInformationOriginateMetricIpv4 = types.Int64Null()
		data.DefaultInformationOriginateMetricIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.metric-type.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DefaultInformationOriginateMetricTypeIpv4 = types.StringNull()

			v := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.metric-type.vipVariableName")
			data.DefaultInformationOriginateMetricTypeIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DefaultInformationOriginateMetricTypeIpv4 = types.StringNull()
			data.DefaultInformationOriginateMetricTypeIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.default-information.originate.metric-type.vipValue")
			data.DefaultInformationOriginateMetricTypeIpv4 = types.StringValue(v.String())
			data.DefaultInformationOriginateMetricTypeIpv4Variable = types.StringNull()
		}
	} else {
		data.DefaultInformationOriginateMetricTypeIpv4 = types.StringNull()
		data.DefaultInformationOriginateMetricTypeIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.ospf.external.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DistanceExternalIpv4 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.ospf.external.vipVariableName")
			data.DistanceExternalIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DistanceExternalIpv4 = types.Int64Null()
			data.DistanceExternalIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.ospf.external.vipValue")
			data.DistanceExternalIpv4 = types.Int64Value(v.Int())
			data.DistanceExternalIpv4Variable = types.StringNull()
		}
	} else {
		data.DistanceExternalIpv4 = types.Int64Null()
		data.DistanceExternalIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DistanceInterAreaIpv4 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area.vipVariableName")
			data.DistanceInterAreaIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DistanceInterAreaIpv4 = types.Int64Null()
			data.DistanceInterAreaIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.ospf.inter-area.vipValue")
			data.DistanceInterAreaIpv4 = types.Int64Value(v.Int())
			data.DistanceInterAreaIpv4Variable = types.StringNull()
		}
	} else {
		data.DistanceInterAreaIpv4 = types.Int64Null()
		data.DistanceInterAreaIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DistanceIntraAreaIpv4 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area.vipVariableName")
			data.DistanceIntraAreaIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DistanceIntraAreaIpv4 = types.Int64Null()
			data.DistanceIntraAreaIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.ospf.intra-area.vipValue")
			data.DistanceIntraAreaIpv4 = types.Int64Value(v.Int())
			data.DistanceIntraAreaIpv4Variable = types.StringNull()
		}
	} else {
		data.DistanceIntraAreaIpv4 = types.Int64Null()
		data.DistanceIntraAreaIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.timers.throttle.spf.delay.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TimersSpfDelayIpv4 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv4.timers.throttle.spf.delay.vipVariableName")
			data.TimersSpfDelayIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TimersSpfDelayIpv4 = types.Int64Null()
			data.TimersSpfDelayIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.timers.throttle.spf.delay.vipValue")
			data.TimersSpfDelayIpv4 = types.Int64Value(v.Int())
			data.TimersSpfDelayIpv4Variable = types.StringNull()
		}
	} else {
		data.TimersSpfDelayIpv4 = types.Int64Null()
		data.TimersSpfDelayIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TimersSpfInitialHoldIpv4 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold.vipVariableName")
			data.TimersSpfInitialHoldIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TimersSpfInitialHoldIpv4 = types.Int64Null()
			data.TimersSpfInitialHoldIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.timers.throttle.spf.initial-hold.vipValue")
			data.TimersSpfInitialHoldIpv4 = types.Int64Value(v.Int())
			data.TimersSpfInitialHoldIpv4Variable = types.StringNull()
		}
	} else {
		data.TimersSpfInitialHoldIpv4 = types.Int64Null()
		data.TimersSpfInitialHoldIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.timers.throttle.spf.max-hold.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TimersSpfMaxHoldIpv4 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv4.timers.throttle.spf.max-hold.vipVariableName")
			data.TimersSpfMaxHoldIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TimersSpfMaxHoldIpv4 = types.Int64Null()
			data.TimersSpfMaxHoldIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.timers.throttle.spf.max-hold.vipValue")
			data.TimersSpfMaxHoldIpv4 = types.Int64Value(v.Int())
			data.TimersSpfMaxHoldIpv4Variable = types.StringNull()
		}
	} else {
		data.TimersSpfMaxHoldIpv4 = types.Int64Null()
		data.TimersSpfMaxHoldIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.distance.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DistanceIpv4 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.distance.vipVariableName")
			data.DistanceIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DistanceIpv4 = types.Int64Null()
			data.DistanceIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.distance-ipv4.distance.vipValue")
			data.DistanceIpv4 = types.Int64Value(v.Int())
			data.DistanceIpv4Variable = types.StringNull()
		}
	} else {
		data.DistanceIpv4 = types.Int64Null()
		data.DistanceIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.table-map.name.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PolicyNameIpv4 = types.StringNull()

			v := res.Get(path + "ospfv3.address-family.ipv4.table-map.name.vipVariableName")
			data.PolicyNameIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PolicyNameIpv4 = types.StringNull()
			data.PolicyNameIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.table-map.name.vipValue")
			data.PolicyNameIpv4 = types.StringValue(v.String())
			data.PolicyNameIpv4Variable = types.StringNull()
		}
	} else {
		data.PolicyNameIpv4 = types.StringNull()
		data.PolicyNameIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.table-map.filter.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.FilterIpv4 = types.BoolNull()

			v := res.Get(path + "ospfv3.address-family.ipv4.table-map.filter.vipVariableName")
			data.FilterIpv4Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.FilterIpv4 = types.BoolNull()
			data.FilterIpv4Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv4.table-map.filter.vipValue")
			data.FilterIpv4 = types.BoolValue(v.Bool())
			data.FilterIpv4Variable = types.StringNull()
		}
	} else {
		data.FilterIpv4 = types.BoolNull()
		data.FilterIpv4Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.redistribute.vipValue"); len(value.Array()) > 0 {
		data.RedistributeIpv4 = make([]CiscoOSPFv3RedistributeIpv4, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CiscoOSPFv3RedistributeIpv4{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("protocol.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Protocol = types.StringNull()

					cv := v.Get("protocol.vipVariableName")
					item.ProtocolVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Protocol = types.StringNull()
					item.ProtocolVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("protocol.vipValue")
					item.Protocol = types.StringValue(cv.String())
					item.ProtocolVariable = types.StringNull()
				}
			} else {
				item.Protocol = types.StringNull()
				item.ProtocolVariable = types.StringNull()
			}
			if cValue := v.Get("route-policy.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.RoutePolicy = types.StringNull()

					cv := v.Get("route-policy.vipVariableName")
					item.RoutePolicyVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.RoutePolicy = types.StringNull()
					item.RoutePolicyVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("route-policy.vipValue")
					item.RoutePolicy = types.StringValue(cv.String())
					item.RoutePolicyVariable = types.StringNull()
				}
			} else {
				item.RoutePolicy = types.StringNull()
				item.RoutePolicyVariable = types.StringNull()
			}
			if cValue := v.Get("dia.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.NatDia = types.BoolNull()

					cv := v.Get("dia.vipVariableName")
					item.NatDiaVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.NatDia = types.BoolNull()
					item.NatDiaVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("dia.vipValue")
					item.NatDia = types.BoolValue(cv.Bool())
					item.NatDiaVariable = types.StringNull()
				}
			} else {
				item.NatDia = types.BoolNull()
				item.NatDiaVariable = types.StringNull()
			}
			data.RedistributeIpv4 = append(data.RedistributeIpv4, item)
			return true
		})
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.max-metric.router-lsa.vipValue"); len(value.Array()) > 0 {
		data.MaxMetricRouterLsaIpv4 = make([]CiscoOSPFv3MaxMetricRouterLsaIpv4, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CiscoOSPFv3MaxMetricRouterLsaIpv4{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("ad-type.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.AdType = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.AdType = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("ad-type.vipValue")
					item.AdType = types.StringValue(cv.String())

				}
			} else {
				item.AdType = types.StringNull()

			}
			if cValue := v.Get("time.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Time = types.Int64Null()

					cv := v.Get("time.vipVariableName")
					item.TimeVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Time = types.Int64Null()
					item.TimeVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("time.vipValue")
					item.Time = types.Int64Value(cv.Int())
					item.TimeVariable = types.StringNull()
				}
			} else {
				item.Time = types.Int64Null()
				item.TimeVariable = types.StringNull()
			}
			data.MaxMetricRouterLsaIpv4 = append(data.MaxMetricRouterLsaIpv4, item)
			return true
		})
	}
	if value := res.Get(path + "ospfv3.address-family.ipv4.area.vipValue"); len(value.Array()) > 0 {
		data.AreasIpv4 = make([]CiscoOSPFv3AreasIpv4, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CiscoOSPFv3AreasIpv4{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("a-num.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.AreaNumber = types.Int64Null()

					cv := v.Get("a-num.vipVariableName")
					item.AreaNumberVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.AreaNumber = types.Int64Null()
					item.AreaNumberVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("a-num.vipValue")
					item.AreaNumber = types.Int64Value(cv.Int())
					item.AreaNumberVariable = types.StringNull()
				}
			} else {
				item.AreaNumber = types.Int64Null()
				item.AreaNumberVariable = types.StringNull()
			}
			if cValue := v.Get("stub.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Stub = types.BoolNull()

				} else if cValue.String() == "ignore" {
					item.Stub = types.BoolValue(false)

				} else if cValue.String() == "constant" {
					cv := v.Get("stub.vipValue")
					item.Stub = types.BoolValue(cv.Bool())

				}
			} else if cValue := v.Get("stub"); cValue.Exists() {
				item.Stub = types.BoolValue(true)

			} else {
				item.Stub = types.BoolNull()

			}
			if cValue := v.Get("stub.no-summary.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.StubNoSummary = types.BoolNull()

					cv := v.Get("stub.no-summary.vipVariableName")
					item.StubNoSummaryVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.StubNoSummary = types.BoolNull()
					item.StubNoSummaryVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("stub.no-summary.vipValue")
					item.StubNoSummary = types.BoolValue(cv.Bool())
					item.StubNoSummaryVariable = types.StringNull()
				}
			} else {
				item.StubNoSummary = types.BoolNull()
				item.StubNoSummaryVariable = types.StringNull()
			}
			if cValue := v.Get("nssa.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Nssa = types.BoolNull()

				} else if cValue.String() == "ignore" {
					item.Nssa = types.BoolValue(false)

				} else if cValue.String() == "constant" {
					cv := v.Get("nssa.vipValue")
					item.Nssa = types.BoolValue(cv.Bool())

				}
			} else if cValue := v.Get("nssa"); cValue.Exists() {
				item.Nssa = types.BoolValue(true)

			} else {
				item.Nssa = types.BoolNull()

			}
			if cValue := v.Get("nssa.no-summary.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.NssaNoSummary = types.BoolNull()

					cv := v.Get("nssa.no-summary.vipVariableName")
					item.NssaNoSummaryVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.NssaNoSummary = types.BoolNull()
					item.NssaNoSummaryVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("nssa.no-summary.vipValue")
					item.NssaNoSummary = types.BoolValue(cv.Bool())
					item.NssaNoSummaryVariable = types.StringNull()
				}
			} else {
				item.NssaNoSummary = types.BoolNull()
				item.NssaNoSummaryVariable = types.StringNull()
			}
			if cValue := v.Get("nssa.translate.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Translate = types.StringNull()

					cv := v.Get("nssa.translate.vipVariableName")
					item.TranslateVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Translate = types.StringNull()
					item.TranslateVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("nssa.translate.vipValue")
					item.Translate = types.StringValue(cv.String())
					item.TranslateVariable = types.StringNull()
				}
			} else {
				item.Translate = types.StringNull()
				item.TranslateVariable = types.StringNull()
			}
			if cValue := v.Get("normal.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Normal = types.BoolNull()

					cv := v.Get("normal.vipVariableName")
					item.NormalVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Normal = types.BoolNull()
					item.NormalVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("normal.vipValue")
					item.Normal = types.BoolValue(cv.Bool())
					item.NormalVariable = types.StringNull()
				}
			} else {
				item.Normal = types.BoolNull()
				item.NormalVariable = types.StringNull()
			}
			if cValue := v.Get("interface.vipValue"); len(cValue.Array()) > 0 {
				item.Interfaces = make([]CiscoOSPFv3AreasIpv4Interfaces, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := CiscoOSPFv3AreasIpv4Interfaces{}
					if ccValue := cv.Get("vipOptional"); ccValue.Exists() {
						cItem.Optional = types.BoolValue(ccValue.Bool())
					} else {
						cItem.Optional = types.BoolNull()
					}
					if ccValue := cv.Get("name.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Name = types.StringNull()

							ccv := cv.Get("name.vipVariableName")
							cItem.NameVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Name = types.StringNull()
							cItem.NameVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("name.vipValue")
							cItem.Name = types.StringValue(ccv.String())
							cItem.NameVariable = types.StringNull()
						}
					} else {
						cItem.Name = types.StringNull()
						cItem.NameVariable = types.StringNull()
					}
					if ccValue := cv.Get("hello-interval.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.HelloInterval = types.Int64Null()

							ccv := cv.Get("hello-interval.vipVariableName")
							cItem.HelloIntervalVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.HelloInterval = types.Int64Null()
							cItem.HelloIntervalVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("hello-interval.vipValue")
							cItem.HelloInterval = types.Int64Value(ccv.Int())
							cItem.HelloIntervalVariable = types.StringNull()
						}
					} else {
						cItem.HelloInterval = types.Int64Null()
						cItem.HelloIntervalVariable = types.StringNull()
					}
					if ccValue := cv.Get("dead-interval.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.DeadInterval = types.Int64Null()

							ccv := cv.Get("dead-interval.vipVariableName")
							cItem.DeadIntervalVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.DeadInterval = types.Int64Null()
							cItem.DeadIntervalVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("dead-interval.vipValue")
							cItem.DeadInterval = types.Int64Value(ccv.Int())
							cItem.DeadIntervalVariable = types.StringNull()
						}
					} else {
						cItem.DeadInterval = types.Int64Null()
						cItem.DeadIntervalVariable = types.StringNull()
					}
					if ccValue := cv.Get("retransmit-interval.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.RetransmitInterval = types.Int64Null()

							ccv := cv.Get("retransmit-interval.vipVariableName")
							cItem.RetransmitIntervalVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.RetransmitInterval = types.Int64Null()
							cItem.RetransmitIntervalVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("retransmit-interval.vipValue")
							cItem.RetransmitInterval = types.Int64Value(ccv.Int())
							cItem.RetransmitIntervalVariable = types.StringNull()
						}
					} else {
						cItem.RetransmitInterval = types.Int64Null()
						cItem.RetransmitIntervalVariable = types.StringNull()
					}
					if ccValue := cv.Get("cost.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Cost = types.Int64Null()

							ccv := cv.Get("cost.vipVariableName")
							cItem.CostVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Cost = types.Int64Null()
							cItem.CostVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("cost.vipValue")
							cItem.Cost = types.Int64Value(ccv.Int())
							cItem.CostVariable = types.StringNull()
						}
					} else {
						cItem.Cost = types.Int64Null()
						cItem.CostVariable = types.StringNull()
					}
					if ccValue := cv.Get("network.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Network = types.StringNull()

							ccv := cv.Get("network.vipVariableName")
							cItem.NetworkVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Network = types.StringNull()
							cItem.NetworkVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("network.vipValue")
							cItem.Network = types.StringValue(ccv.String())
							cItem.NetworkVariable = types.StringNull()
						}
					} else {
						cItem.Network = types.StringNull()
						cItem.NetworkVariable = types.StringNull()
					}
					if ccValue := cv.Get("passive-interface.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.PassiveInterface = types.BoolNull()

							ccv := cv.Get("passive-interface.vipVariableName")
							cItem.PassiveInterfaceVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.PassiveInterface = types.BoolNull()
							cItem.PassiveInterfaceVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("passive-interface.vipValue")
							cItem.PassiveInterface = types.BoolValue(ccv.Bool())
							cItem.PassiveInterfaceVariable = types.StringNull()
						}
					} else {
						cItem.PassiveInterface = types.BoolNull()
						cItem.PassiveInterfaceVariable = types.StringNull()
					}
					if ccValue := cv.Get("authentication.type.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.AuthenticationType = types.StringNull()

							ccv := cv.Get("authentication.type.vipVariableName")
							cItem.AuthenticationTypeVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.AuthenticationType = types.StringNull()
							cItem.AuthenticationTypeVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("authentication.type.vipValue")
							cItem.AuthenticationType = types.StringValue(ccv.String())
							cItem.AuthenticationTypeVariable = types.StringNull()
						}
					} else {
						cItem.AuthenticationType = types.StringNull()
						cItem.AuthenticationTypeVariable = types.StringNull()
					}
					if ccValue := cv.Get("authentication.authentication-key.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.AuthenticationKey = types.StringNull()

							ccv := cv.Get("authentication.authentication-key.vipVariableName")
							cItem.AuthenticationKeyVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.AuthenticationKey = types.StringNull()
							cItem.AuthenticationKeyVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("authentication.authentication-key.vipValue")
							cItem.AuthenticationKey = types.StringValue(ccv.String())
							cItem.AuthenticationKeyVariable = types.StringNull()
						}
					} else {
						cItem.AuthenticationKey = types.StringNull()
						cItem.AuthenticationKeyVariable = types.StringNull()
					}
					if ccValue := cv.Get("authentication.ipsec.spi.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.IpsecSpi = types.Int64Null()

							ccv := cv.Get("authentication.ipsec.spi.vipVariableName")
							cItem.IpsecSpiVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.IpsecSpi = types.Int64Null()
							cItem.IpsecSpiVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("authentication.ipsec.spi.vipValue")
							cItem.IpsecSpi = types.Int64Value(ccv.Int())
							cItem.IpsecSpiVariable = types.StringNull()
						}
					} else {
						cItem.IpsecSpi = types.Int64Null()
						cItem.IpsecSpiVariable = types.StringNull()
					}
					item.Interfaces = append(item.Interfaces, cItem)
					return true
				})
			}
			if cValue := v.Get("range.vipValue"); len(cValue.Array()) > 0 {
				item.Ranges = make([]CiscoOSPFv3AreasIpv4Ranges, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := CiscoOSPFv3AreasIpv4Ranges{}
					if ccValue := cv.Get("vipOptional"); ccValue.Exists() {
						cItem.Optional = types.BoolValue(ccValue.Bool())
					} else {
						cItem.Optional = types.BoolNull()
					}
					if ccValue := cv.Get("address.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Address = types.StringNull()

							ccv := cv.Get("address.vipVariableName")
							cItem.AddressVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Address = types.StringNull()
							cItem.AddressVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("address.vipValue")
							cItem.Address = types.StringValue(ccv.String())
							cItem.AddressVariable = types.StringNull()
						}
					} else {
						cItem.Address = types.StringNull()
						cItem.AddressVariable = types.StringNull()
					}
					if ccValue := cv.Get("cost.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Cost = types.Int64Null()

							ccv := cv.Get("cost.vipVariableName")
							cItem.CostVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Cost = types.Int64Null()
							cItem.CostVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("cost.vipValue")
							cItem.Cost = types.Int64Value(ccv.Int())
							cItem.CostVariable = types.StringNull()
						}
					} else {
						cItem.Cost = types.Int64Null()
						cItem.CostVariable = types.StringNull()
					}
					if ccValue := cv.Get("no-advertise.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.NoAdvertise = types.BoolNull()

							ccv := cv.Get("no-advertise.vipVariableName")
							cItem.NoAdvertiseVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.NoAdvertise = types.BoolNull()
							cItem.NoAdvertiseVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("no-advertise.vipValue")
							cItem.NoAdvertise = types.BoolValue(ccv.Bool())
							cItem.NoAdvertiseVariable = types.StringNull()
						}
					} else {
						cItem.NoAdvertise = types.BoolNull()
						cItem.NoAdvertiseVariable = types.StringNull()
					}
					item.Ranges = append(item.Ranges, cItem)
					return true
				})
			}
			data.AreasIpv4 = append(data.AreasIpv4, item)
			return true
		})
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.router-id.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.RouterIdIpv6 = types.StringNull()

			v := res.Get(path + "ospfv3.address-family.ipv6.router-id.vipVariableName")
			data.RouterIdIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.RouterIdIpv6 = types.StringNull()
			data.RouterIdIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.router-id.vipValue")
			data.RouterIdIpv6 = types.StringValue(v.String())
			data.RouterIdIpv6Variable = types.StringNull()
		}
	} else {
		data.RouterIdIpv6 = types.StringNull()
		data.RouterIdIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.auto-cost.reference-bandwidth.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.AutoCostReferenceBandwidthIpv6 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv6.auto-cost.reference-bandwidth.vipVariableName")
			data.AutoCostReferenceBandwidthIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.AutoCostReferenceBandwidthIpv6 = types.Int64Null()
			data.AutoCostReferenceBandwidthIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.auto-cost.reference-bandwidth.vipValue")
			data.AutoCostReferenceBandwidthIpv6 = types.Int64Value(v.Int())
			data.AutoCostReferenceBandwidthIpv6Variable = types.StringNull()
		}
	} else {
		data.AutoCostReferenceBandwidthIpv6 = types.Int64Null()
		data.AutoCostReferenceBandwidthIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.compatible.rfc1583.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.CompatibleRfc1583Ipv6 = types.BoolNull()

			v := res.Get(path + "ospfv3.address-family.ipv6.compatible.rfc1583.vipVariableName")
			data.CompatibleRfc1583Ipv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.CompatibleRfc1583Ipv6 = types.BoolNull()
			data.CompatibleRfc1583Ipv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.compatible.rfc1583.vipValue")
			data.CompatibleRfc1583Ipv6 = types.BoolValue(v.Bool())
			data.CompatibleRfc1583Ipv6Variable = types.StringNull()
		}
	} else {
		data.CompatibleRfc1583Ipv6 = types.BoolNull()
		data.CompatibleRfc1583Ipv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DefaultInformationOriginateIpv6 = types.BoolNull()

		} else if value.String() == "ignore" {
			data.DefaultInformationOriginateIpv6 = types.BoolValue(false)

		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.vipValue")
			data.DefaultInformationOriginateIpv6 = types.BoolValue(v.Bool())

		}
	} else if value := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate"); value.Exists() {
		data.DefaultInformationOriginateIpv6 = types.BoolValue(true)

	} else {
		data.DefaultInformationOriginateIpv6 = types.BoolNull()

	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.always.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DefaultInformationOriginateAlwaysIpv6 = types.BoolNull()

			v := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.always.vipVariableName")
			data.DefaultInformationOriginateAlwaysIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DefaultInformationOriginateAlwaysIpv6 = types.BoolNull()
			data.DefaultInformationOriginateAlwaysIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.always.vipValue")
			data.DefaultInformationOriginateAlwaysIpv6 = types.BoolValue(v.Bool())
			data.DefaultInformationOriginateAlwaysIpv6Variable = types.StringNull()
		}
	} else {
		data.DefaultInformationOriginateAlwaysIpv6 = types.BoolNull()
		data.DefaultInformationOriginateAlwaysIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.metric.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DefaultInformationOriginateMetricIpv6 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.metric.vipVariableName")
			data.DefaultInformationOriginateMetricIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DefaultInformationOriginateMetricIpv6 = types.Int64Null()
			data.DefaultInformationOriginateMetricIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.metric.vipValue")
			data.DefaultInformationOriginateMetricIpv6 = types.Int64Value(v.Int())
			data.DefaultInformationOriginateMetricIpv6Variable = types.StringNull()
		}
	} else {
		data.DefaultInformationOriginateMetricIpv6 = types.Int64Null()
		data.DefaultInformationOriginateMetricIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.metric-type.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DefaultInformationOriginateMetricTypeIpv6 = types.StringNull()

			v := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.metric-type.vipVariableName")
			data.DefaultInformationOriginateMetricTypeIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DefaultInformationOriginateMetricTypeIpv6 = types.StringNull()
			data.DefaultInformationOriginateMetricTypeIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.default-information.originate.metric-type.vipValue")
			data.DefaultInformationOriginateMetricTypeIpv6 = types.StringValue(v.String())
			data.DefaultInformationOriginateMetricTypeIpv6Variable = types.StringNull()
		}
	} else {
		data.DefaultInformationOriginateMetricTypeIpv6 = types.StringNull()
		data.DefaultInformationOriginateMetricTypeIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.ospf.external.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DistanceExternalIpv6 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.ospf.external.vipVariableName")
			data.DistanceExternalIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DistanceExternalIpv6 = types.Int64Null()
			data.DistanceExternalIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.ospf.external.vipValue")
			data.DistanceExternalIpv6 = types.Int64Value(v.Int())
			data.DistanceExternalIpv6Variable = types.StringNull()
		}
	} else {
		data.DistanceExternalIpv6 = types.Int64Null()
		data.DistanceExternalIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DistanceInterAreaIpv6 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area.vipVariableName")
			data.DistanceInterAreaIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DistanceInterAreaIpv6 = types.Int64Null()
			data.DistanceInterAreaIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.ospf.inter-area.vipValue")
			data.DistanceInterAreaIpv6 = types.Int64Value(v.Int())
			data.DistanceInterAreaIpv6Variable = types.StringNull()
		}
	} else {
		data.DistanceInterAreaIpv6 = types.Int64Null()
		data.DistanceInterAreaIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DistanceIntraAreaIpv6 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area.vipVariableName")
			data.DistanceIntraAreaIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DistanceIntraAreaIpv6 = types.Int64Null()
			data.DistanceIntraAreaIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.ospf.intra-area.vipValue")
			data.DistanceIntraAreaIpv6 = types.Int64Value(v.Int())
			data.DistanceIntraAreaIpv6Variable = types.StringNull()
		}
	} else {
		data.DistanceIntraAreaIpv6 = types.Int64Null()
		data.DistanceIntraAreaIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.timers.throttle.spf.delay.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TimersSpfDelayIpv6 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv6.timers.throttle.spf.delay.vipVariableName")
			data.TimersSpfDelayIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TimersSpfDelayIpv6 = types.Int64Null()
			data.TimersSpfDelayIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.timers.throttle.spf.delay.vipValue")
			data.TimersSpfDelayIpv6 = types.Int64Value(v.Int())
			data.TimersSpfDelayIpv6Variable = types.StringNull()
		}
	} else {
		data.TimersSpfDelayIpv6 = types.Int64Null()
		data.TimersSpfDelayIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TimersSpfInitialHoldIpv6 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold.vipVariableName")
			data.TimersSpfInitialHoldIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TimersSpfInitialHoldIpv6 = types.Int64Null()
			data.TimersSpfInitialHoldIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.timers.throttle.spf.initial-hold.vipValue")
			data.TimersSpfInitialHoldIpv6 = types.Int64Value(v.Int())
			data.TimersSpfInitialHoldIpv6Variable = types.StringNull()
		}
	} else {
		data.TimersSpfInitialHoldIpv6 = types.Int64Null()
		data.TimersSpfInitialHoldIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.timers.throttle.spf.max-hold.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TimersSpfMaxHoldIpv6 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv6.timers.throttle.spf.max-hold.vipVariableName")
			data.TimersSpfMaxHoldIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TimersSpfMaxHoldIpv6 = types.Int64Null()
			data.TimersSpfMaxHoldIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.timers.throttle.spf.max-hold.vipValue")
			data.TimersSpfMaxHoldIpv6 = types.Int64Value(v.Int())
			data.TimersSpfMaxHoldIpv6Variable = types.StringNull()
		}
	} else {
		data.TimersSpfMaxHoldIpv6 = types.Int64Null()
		data.TimersSpfMaxHoldIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.distance.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DistanceIpv6 = types.Int64Null()

			v := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.distance.vipVariableName")
			data.DistanceIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DistanceIpv6 = types.Int64Null()
			data.DistanceIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.distance-ipv6.distance.vipValue")
			data.DistanceIpv6 = types.Int64Value(v.Int())
			data.DistanceIpv6Variable = types.StringNull()
		}
	} else {
		data.DistanceIpv6 = types.Int64Null()
		data.DistanceIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.table-map.name.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PolicyNameIpv6 = types.StringNull()

			v := res.Get(path + "ospfv3.address-family.ipv6.table-map.name.vipVariableName")
			data.PolicyNameIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PolicyNameIpv6 = types.StringNull()
			data.PolicyNameIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.table-map.name.vipValue")
			data.PolicyNameIpv6 = types.StringValue(v.String())
			data.PolicyNameIpv6Variable = types.StringNull()
		}
	} else {
		data.PolicyNameIpv6 = types.StringNull()
		data.PolicyNameIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.table-map.filter.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.FilterIpv6 = types.BoolNull()

			v := res.Get(path + "ospfv3.address-family.ipv6.table-map.filter.vipVariableName")
			data.FilterIpv6Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.FilterIpv6 = types.BoolNull()
			data.FilterIpv6Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ospfv3.address-family.ipv6.table-map.filter.vipValue")
			data.FilterIpv6 = types.BoolValue(v.Bool())
			data.FilterIpv6Variable = types.StringNull()
		}
	} else {
		data.FilterIpv6 = types.BoolNull()
		data.FilterIpv6Variable = types.StringNull()
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.redistribute.vipValue"); len(value.Array()) > 0 {
		data.RedistributeIpv6 = make([]CiscoOSPFv3RedistributeIpv6, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CiscoOSPFv3RedistributeIpv6{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("protocol.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Protocol = types.StringNull()

					cv := v.Get("protocol.vipVariableName")
					item.ProtocolVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Protocol = types.StringNull()
					item.ProtocolVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("protocol.vipValue")
					item.Protocol = types.StringValue(cv.String())
					item.ProtocolVariable = types.StringNull()
				}
			} else {
				item.Protocol = types.StringNull()
				item.ProtocolVariable = types.StringNull()
			}
			if cValue := v.Get("route-policy.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.RoutePolicy = types.StringNull()

					cv := v.Get("route-policy.vipVariableName")
					item.RoutePolicyVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.RoutePolicy = types.StringNull()
					item.RoutePolicyVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("route-policy.vipValue")
					item.RoutePolicy = types.StringValue(cv.String())
					item.RoutePolicyVariable = types.StringNull()
				}
			} else {
				item.RoutePolicy = types.StringNull()
				item.RoutePolicyVariable = types.StringNull()
			}
			data.RedistributeIpv6 = append(data.RedistributeIpv6, item)
			return true
		})
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.max-metric.router-lsa.vipValue"); len(value.Array()) > 0 {
		data.MaxMetricRouterLsaIpv6 = make([]CiscoOSPFv3MaxMetricRouterLsaIpv6, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CiscoOSPFv3MaxMetricRouterLsaIpv6{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("ad-type.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.AdType = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.AdType = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("ad-type.vipValue")
					item.AdType = types.StringValue(cv.String())

				}
			} else {
				item.AdType = types.StringNull()

			}
			if cValue := v.Get("time.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Time = types.Int64Null()

					cv := v.Get("time.vipVariableName")
					item.TimeVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Time = types.Int64Null()
					item.TimeVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("time.vipValue")
					item.Time = types.Int64Value(cv.Int())
					item.TimeVariable = types.StringNull()
				}
			} else {
				item.Time = types.Int64Null()
				item.TimeVariable = types.StringNull()
			}
			data.MaxMetricRouterLsaIpv6 = append(data.MaxMetricRouterLsaIpv6, item)
			return true
		})
	}
	if value := res.Get(path + "ospfv3.address-family.ipv6.area.vipValue"); len(value.Array()) > 0 {
		data.AreasIpv6 = make([]CiscoOSPFv3AreasIpv6, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CiscoOSPFv3AreasIpv6{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("a-num.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.AreaNumber = types.Int64Null()

					cv := v.Get("a-num.vipVariableName")
					item.AreaNumberVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.AreaNumber = types.Int64Null()
					item.AreaNumberVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("a-num.vipValue")
					item.AreaNumber = types.Int64Value(cv.Int())
					item.AreaNumberVariable = types.StringNull()
				}
			} else {
				item.AreaNumber = types.Int64Null()
				item.AreaNumberVariable = types.StringNull()
			}
			if cValue := v.Get("stub.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Stub = types.BoolNull()

				} else if cValue.String() == "ignore" {
					item.Stub = types.BoolValue(false)

				} else if cValue.String() == "constant" {
					cv := v.Get("stub.vipValue")
					item.Stub = types.BoolValue(cv.Bool())

				}
			} else if cValue := v.Get("stub"); cValue.Exists() {
				item.Stub = types.BoolValue(true)

			} else {
				item.Stub = types.BoolNull()

			}
			if cValue := v.Get("stub.no-summary.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.StubNoSummary = types.BoolNull()

					cv := v.Get("stub.no-summary.vipVariableName")
					item.StubNoSummaryVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.StubNoSummary = types.BoolNull()
					item.StubNoSummaryVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("stub.no-summary.vipValue")
					item.StubNoSummary = types.BoolValue(cv.Bool())
					item.StubNoSummaryVariable = types.StringNull()
				}
			} else {
				item.StubNoSummary = types.BoolNull()
				item.StubNoSummaryVariable = types.StringNull()
			}
			if cValue := v.Get("nssa.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Nssa = types.BoolNull()

				} else if cValue.String() == "ignore" {
					item.Nssa = types.BoolValue(false)

				} else if cValue.String() == "constant" {
					cv := v.Get("nssa.vipValue")
					item.Nssa = types.BoolValue(cv.Bool())

				}
			} else if cValue := v.Get("nssa"); cValue.Exists() {
				item.Nssa = types.BoolValue(true)

			} else {
				item.Nssa = types.BoolNull()

			}
			if cValue := v.Get("nssa.no-summary.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.NssaNoSummary = types.BoolNull()

					cv := v.Get("nssa.no-summary.vipVariableName")
					item.NssaNoSummaryVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.NssaNoSummary = types.BoolNull()
					item.NssaNoSummaryVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("nssa.no-summary.vipValue")
					item.NssaNoSummary = types.BoolValue(cv.Bool())
					item.NssaNoSummaryVariable = types.StringNull()
				}
			} else {
				item.NssaNoSummary = types.BoolNull()
				item.NssaNoSummaryVariable = types.StringNull()
			}
			if cValue := v.Get("nssa.translate.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Translate = types.StringNull()

					cv := v.Get("nssa.translate.vipVariableName")
					item.TranslateVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Translate = types.StringNull()
					item.TranslateVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("nssa.translate.vipValue")
					item.Translate = types.StringValue(cv.String())
					item.TranslateVariable = types.StringNull()
				}
			} else {
				item.Translate = types.StringNull()
				item.TranslateVariable = types.StringNull()
			}
			if cValue := v.Get("normal.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Normal = types.BoolNull()

					cv := v.Get("normal.vipVariableName")
					item.NormalVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Normal = types.BoolNull()
					item.NormalVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("normal.vipValue")
					item.Normal = types.BoolValue(cv.Bool())
					item.NormalVariable = types.StringNull()
				}
			} else {
				item.Normal = types.BoolNull()
				item.NormalVariable = types.StringNull()
			}
			if cValue := v.Get("interface.vipValue"); len(cValue.Array()) > 0 {
				item.Interfaces = make([]CiscoOSPFv3AreasIpv6Interfaces, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := CiscoOSPFv3AreasIpv6Interfaces{}
					if ccValue := cv.Get("vipOptional"); ccValue.Exists() {
						cItem.Optional = types.BoolValue(ccValue.Bool())
					} else {
						cItem.Optional = types.BoolNull()
					}
					if ccValue := cv.Get("name.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Name = types.StringNull()

							ccv := cv.Get("name.vipVariableName")
							cItem.NameVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Name = types.StringNull()
							cItem.NameVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("name.vipValue")
							cItem.Name = types.StringValue(ccv.String())
							cItem.NameVariable = types.StringNull()
						}
					} else {
						cItem.Name = types.StringNull()
						cItem.NameVariable = types.StringNull()
					}
					if ccValue := cv.Get("hello-interval.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.HelloInterval = types.Int64Null()

							ccv := cv.Get("hello-interval.vipVariableName")
							cItem.HelloIntervalVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.HelloInterval = types.Int64Null()
							cItem.HelloIntervalVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("hello-interval.vipValue")
							cItem.HelloInterval = types.Int64Value(ccv.Int())
							cItem.HelloIntervalVariable = types.StringNull()
						}
					} else {
						cItem.HelloInterval = types.Int64Null()
						cItem.HelloIntervalVariable = types.StringNull()
					}
					if ccValue := cv.Get("dead-interval.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.DeadInterval = types.Int64Null()

							ccv := cv.Get("dead-interval.vipVariableName")
							cItem.DeadIntervalVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.DeadInterval = types.Int64Null()
							cItem.DeadIntervalVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("dead-interval.vipValue")
							cItem.DeadInterval = types.Int64Value(ccv.Int())
							cItem.DeadIntervalVariable = types.StringNull()
						}
					} else {
						cItem.DeadInterval = types.Int64Null()
						cItem.DeadIntervalVariable = types.StringNull()
					}
					if ccValue := cv.Get("retransmit-interval.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.RetransmitInterval = types.Int64Null()

							ccv := cv.Get("retransmit-interval.vipVariableName")
							cItem.RetransmitIntervalVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.RetransmitInterval = types.Int64Null()
							cItem.RetransmitIntervalVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("retransmit-interval.vipValue")
							cItem.RetransmitInterval = types.Int64Value(ccv.Int())
							cItem.RetransmitIntervalVariable = types.StringNull()
						}
					} else {
						cItem.RetransmitInterval = types.Int64Null()
						cItem.RetransmitIntervalVariable = types.StringNull()
					}
					if ccValue := cv.Get("cost.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Cost = types.Int64Null()

							ccv := cv.Get("cost.vipVariableName")
							cItem.CostVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Cost = types.Int64Null()
							cItem.CostVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("cost.vipValue")
							cItem.Cost = types.Int64Value(ccv.Int())
							cItem.CostVariable = types.StringNull()
						}
					} else {
						cItem.Cost = types.Int64Null()
						cItem.CostVariable = types.StringNull()
					}
					if ccValue := cv.Get("network.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Network = types.StringNull()

							ccv := cv.Get("network.vipVariableName")
							cItem.NetworkVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Network = types.StringNull()
							cItem.NetworkVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("network.vipValue")
							cItem.Network = types.StringValue(ccv.String())
							cItem.NetworkVariable = types.StringNull()
						}
					} else {
						cItem.Network = types.StringNull()
						cItem.NetworkVariable = types.StringNull()
					}
					if ccValue := cv.Get("passive-interface.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.PassiveInterface = types.BoolNull()

							ccv := cv.Get("passive-interface.vipVariableName")
							cItem.PassiveInterfaceVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.PassiveInterface = types.BoolNull()
							cItem.PassiveInterfaceVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("passive-interface.vipValue")
							cItem.PassiveInterface = types.BoolValue(ccv.Bool())
							cItem.PassiveInterfaceVariable = types.StringNull()
						}
					} else {
						cItem.PassiveInterface = types.BoolNull()
						cItem.PassiveInterfaceVariable = types.StringNull()
					}
					if ccValue := cv.Get("authentication.type.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.AuthenticationType = types.StringNull()

							ccv := cv.Get("authentication.type.vipVariableName")
							cItem.AuthenticationTypeVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.AuthenticationType = types.StringNull()
							cItem.AuthenticationTypeVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("authentication.type.vipValue")
							cItem.AuthenticationType = types.StringValue(ccv.String())
							cItem.AuthenticationTypeVariable = types.StringNull()
						}
					} else {
						cItem.AuthenticationType = types.StringNull()
						cItem.AuthenticationTypeVariable = types.StringNull()
					}
					if ccValue := cv.Get("authentication.authentication-key.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.AuthenticationKey = types.StringNull()

							ccv := cv.Get("authentication.authentication-key.vipVariableName")
							cItem.AuthenticationKeyVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.AuthenticationKey = types.StringNull()
							cItem.AuthenticationKeyVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("authentication.authentication-key.vipValue")
							cItem.AuthenticationKey = types.StringValue(ccv.String())
							cItem.AuthenticationKeyVariable = types.StringNull()
						}
					} else {
						cItem.AuthenticationKey = types.StringNull()
						cItem.AuthenticationKeyVariable = types.StringNull()
					}
					if ccValue := cv.Get("authentication.ipsec.spi.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.IpsecSpi = types.Int64Null()

							ccv := cv.Get("authentication.ipsec.spi.vipVariableName")
							cItem.IpsecSpiVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.IpsecSpi = types.Int64Null()
							cItem.IpsecSpiVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("authentication.ipsec.spi.vipValue")
							cItem.IpsecSpi = types.Int64Value(ccv.Int())
							cItem.IpsecSpiVariable = types.StringNull()
						}
					} else {
						cItem.IpsecSpi = types.Int64Null()
						cItem.IpsecSpiVariable = types.StringNull()
					}
					item.Interfaces = append(item.Interfaces, cItem)
					return true
				})
			}
			if cValue := v.Get("range.vipValue"); len(cValue.Array()) > 0 {
				item.Ranges = make([]CiscoOSPFv3AreasIpv6Ranges, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := CiscoOSPFv3AreasIpv6Ranges{}
					if ccValue := cv.Get("vipOptional"); ccValue.Exists() {
						cItem.Optional = types.BoolValue(ccValue.Bool())
					} else {
						cItem.Optional = types.BoolNull()
					}
					if ccValue := cv.Get("address.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Address = types.StringNull()

							ccv := cv.Get("address.vipVariableName")
							cItem.AddressVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Address = types.StringNull()
							cItem.AddressVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("address.vipValue")
							cItem.Address = types.StringValue(ccv.String())
							cItem.AddressVariable = types.StringNull()
						}
					} else {
						cItem.Address = types.StringNull()
						cItem.AddressVariable = types.StringNull()
					}
					if ccValue := cv.Get("cost.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.Cost = types.Int64Null()

							ccv := cv.Get("cost.vipVariableName")
							cItem.CostVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.Cost = types.Int64Null()
							cItem.CostVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("cost.vipValue")
							cItem.Cost = types.Int64Value(ccv.Int())
							cItem.CostVariable = types.StringNull()
						}
					} else {
						cItem.Cost = types.Int64Null()
						cItem.CostVariable = types.StringNull()
					}
					if ccValue := cv.Get("no-advertise.vipType"); ccValue.Exists() {
						if ccValue.String() == "variableName" {
							cItem.NoAdvertise = types.BoolNull()

							ccv := cv.Get("no-advertise.vipVariableName")
							cItem.NoAdvertiseVariable = types.StringValue(ccv.String())

						} else if ccValue.String() == "ignore" {
							cItem.NoAdvertise = types.BoolNull()
							cItem.NoAdvertiseVariable = types.StringNull()
						} else if ccValue.String() == "constant" {
							ccv := cv.Get("no-advertise.vipValue")
							cItem.NoAdvertise = types.BoolValue(ccv.Bool())
							cItem.NoAdvertiseVariable = types.StringNull()
						}
					} else {
						cItem.NoAdvertise = types.BoolNull()
						cItem.NoAdvertiseVariable = types.StringNull()
					}
					item.Ranges = append(item.Ranges, cItem)
					return true
				})
			}
			data.AreasIpv6 = append(data.AreasIpv6, item)
			return true
		})
	}
}

func (data *CiscoOSPFv3) hasChanges(ctx context.Context, state *CiscoOSPFv3) bool {
	hasChanges := false
	if !data.RouterIdIpv4.Equal(state.RouterIdIpv4) {
		hasChanges = true
	}
	if !data.AutoCostReferenceBandwidthIpv4.Equal(state.AutoCostReferenceBandwidthIpv4) {
		hasChanges = true
	}
	if !data.CompatibleRfc1583Ipv4.Equal(state.CompatibleRfc1583Ipv4) {
		hasChanges = true
	}
	if !data.DefaultInformationOriginateIpv4.Equal(state.DefaultInformationOriginateIpv4) {
		hasChanges = true
	}
	if !data.DefaultInformationOriginateAlwaysIpv4.Equal(state.DefaultInformationOriginateAlwaysIpv4) {
		hasChanges = true
	}
	if !data.DefaultInformationOriginateMetricIpv4.Equal(state.DefaultInformationOriginateMetricIpv4) {
		hasChanges = true
	}
	if !data.DefaultInformationOriginateMetricTypeIpv4.Equal(state.DefaultInformationOriginateMetricTypeIpv4) {
		hasChanges = true
	}
	if !data.DistanceExternalIpv4.Equal(state.DistanceExternalIpv4) {
		hasChanges = true
	}
	if !data.DistanceInterAreaIpv4.Equal(state.DistanceInterAreaIpv4) {
		hasChanges = true
	}
	if !data.DistanceIntraAreaIpv4.Equal(state.DistanceIntraAreaIpv4) {
		hasChanges = true
	}
	if !data.TimersSpfDelayIpv4.Equal(state.TimersSpfDelayIpv4) {
		hasChanges = true
	}
	if !data.TimersSpfInitialHoldIpv4.Equal(state.TimersSpfInitialHoldIpv4) {
		hasChanges = true
	}
	if !data.TimersSpfMaxHoldIpv4.Equal(state.TimersSpfMaxHoldIpv4) {
		hasChanges = true
	}
	if !data.DistanceIpv4.Equal(state.DistanceIpv4) {
		hasChanges = true
	}
	if !data.PolicyNameIpv4.Equal(state.PolicyNameIpv4) {
		hasChanges = true
	}
	if !data.FilterIpv4.Equal(state.FilterIpv4) {
		hasChanges = true
	}
	if len(data.RedistributeIpv4) != len(state.RedistributeIpv4) {
		hasChanges = true
	} else {
		for i := range data.RedistributeIpv4 {
			if !data.RedistributeIpv4[i].Protocol.Equal(state.RedistributeIpv4[i].Protocol) {
				hasChanges = true
			}
			if !data.RedistributeIpv4[i].RoutePolicy.Equal(state.RedistributeIpv4[i].RoutePolicy) {
				hasChanges = true
			}
			if !data.RedistributeIpv4[i].NatDia.Equal(state.RedistributeIpv4[i].NatDia) {
				hasChanges = true
			}
		}
	}
	if len(data.MaxMetricRouterLsaIpv4) != len(state.MaxMetricRouterLsaIpv4) {
		hasChanges = true
	} else {
		for i := range data.MaxMetricRouterLsaIpv4 {
			if !data.MaxMetricRouterLsaIpv4[i].AdType.Equal(state.MaxMetricRouterLsaIpv4[i].AdType) {
				hasChanges = true
			}
			if !data.MaxMetricRouterLsaIpv4[i].Time.Equal(state.MaxMetricRouterLsaIpv4[i].Time) {
				hasChanges = true
			}
		}
	}
	if len(data.AreasIpv4) != len(state.AreasIpv4) {
		hasChanges = true
	} else {
		for i := range data.AreasIpv4 {
			if !data.AreasIpv4[i].AreaNumber.Equal(state.AreasIpv4[i].AreaNumber) {
				hasChanges = true
			}
			if !data.AreasIpv4[i].Stub.Equal(state.AreasIpv4[i].Stub) {
				hasChanges = true
			}
			if !data.AreasIpv4[i].StubNoSummary.Equal(state.AreasIpv4[i].StubNoSummary) {
				hasChanges = true
			}
			if !data.AreasIpv4[i].Nssa.Equal(state.AreasIpv4[i].Nssa) {
				hasChanges = true
			}
			if !data.AreasIpv4[i].NssaNoSummary.Equal(state.AreasIpv4[i].NssaNoSummary) {
				hasChanges = true
			}
			if !data.AreasIpv4[i].Translate.Equal(state.AreasIpv4[i].Translate) {
				hasChanges = true
			}
			if !data.AreasIpv4[i].Normal.Equal(state.AreasIpv4[i].Normal) {
				hasChanges = true
			}
			if len(data.AreasIpv4[i].Interfaces) != len(state.AreasIpv4[i].Interfaces) {
				hasChanges = true
			} else {
				for ii := range data.AreasIpv4[i].Interfaces {
					if !data.AreasIpv4[i].Interfaces[ii].Name.Equal(state.AreasIpv4[i].Interfaces[ii].Name) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Interfaces[ii].HelloInterval.Equal(state.AreasIpv4[i].Interfaces[ii].HelloInterval) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Interfaces[ii].DeadInterval.Equal(state.AreasIpv4[i].Interfaces[ii].DeadInterval) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Interfaces[ii].RetransmitInterval.Equal(state.AreasIpv4[i].Interfaces[ii].RetransmitInterval) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Interfaces[ii].Cost.Equal(state.AreasIpv4[i].Interfaces[ii].Cost) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Interfaces[ii].Network.Equal(state.AreasIpv4[i].Interfaces[ii].Network) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Interfaces[ii].PassiveInterface.Equal(state.AreasIpv4[i].Interfaces[ii].PassiveInterface) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Interfaces[ii].AuthenticationType.Equal(state.AreasIpv4[i].Interfaces[ii].AuthenticationType) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Interfaces[ii].AuthenticationKey.Equal(state.AreasIpv4[i].Interfaces[ii].AuthenticationKey) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Interfaces[ii].IpsecSpi.Equal(state.AreasIpv4[i].Interfaces[ii].IpsecSpi) {
						hasChanges = true
					}
				}
			}
			if len(data.AreasIpv4[i].Ranges) != len(state.AreasIpv4[i].Ranges) {
				hasChanges = true
			} else {
				for ii := range data.AreasIpv4[i].Ranges {
					if !data.AreasIpv4[i].Ranges[ii].Address.Equal(state.AreasIpv4[i].Ranges[ii].Address) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Ranges[ii].Cost.Equal(state.AreasIpv4[i].Ranges[ii].Cost) {
						hasChanges = true
					}
					if !data.AreasIpv4[i].Ranges[ii].NoAdvertise.Equal(state.AreasIpv4[i].Ranges[ii].NoAdvertise) {
						hasChanges = true
					}
				}
			}
		}
	}
	if !data.RouterIdIpv6.Equal(state.RouterIdIpv6) {
		hasChanges = true
	}
	if !data.AutoCostReferenceBandwidthIpv6.Equal(state.AutoCostReferenceBandwidthIpv6) {
		hasChanges = true
	}
	if !data.CompatibleRfc1583Ipv6.Equal(state.CompatibleRfc1583Ipv6) {
		hasChanges = true
	}
	if !data.DefaultInformationOriginateIpv6.Equal(state.DefaultInformationOriginateIpv6) {
		hasChanges = true
	}
	if !data.DefaultInformationOriginateAlwaysIpv6.Equal(state.DefaultInformationOriginateAlwaysIpv6) {
		hasChanges = true
	}
	if !data.DefaultInformationOriginateMetricIpv6.Equal(state.DefaultInformationOriginateMetricIpv6) {
		hasChanges = true
	}
	if !data.DefaultInformationOriginateMetricTypeIpv6.Equal(state.DefaultInformationOriginateMetricTypeIpv6) {
		hasChanges = true
	}
	if !data.DistanceExternalIpv6.Equal(state.DistanceExternalIpv6) {
		hasChanges = true
	}
	if !data.DistanceInterAreaIpv6.Equal(state.DistanceInterAreaIpv6) {
		hasChanges = true
	}
	if !data.DistanceIntraAreaIpv6.Equal(state.DistanceIntraAreaIpv6) {
		hasChanges = true
	}
	if !data.TimersSpfDelayIpv6.Equal(state.TimersSpfDelayIpv6) {
		hasChanges = true
	}
	if !data.TimersSpfInitialHoldIpv6.Equal(state.TimersSpfInitialHoldIpv6) {
		hasChanges = true
	}
	if !data.TimersSpfMaxHoldIpv6.Equal(state.TimersSpfMaxHoldIpv6) {
		hasChanges = true
	}
	if !data.DistanceIpv6.Equal(state.DistanceIpv6) {
		hasChanges = true
	}
	if !data.PolicyNameIpv6.Equal(state.PolicyNameIpv6) {
		hasChanges = true
	}
	if !data.FilterIpv6.Equal(state.FilterIpv6) {
		hasChanges = true
	}
	if len(data.RedistributeIpv6) != len(state.RedistributeIpv6) {
		hasChanges = true
	} else {
		for i := range data.RedistributeIpv6 {
			if !data.RedistributeIpv6[i].Protocol.Equal(state.RedistributeIpv6[i].Protocol) {
				hasChanges = true
			}
			if !data.RedistributeIpv6[i].RoutePolicy.Equal(state.RedistributeIpv6[i].RoutePolicy) {
				hasChanges = true
			}
		}
	}
	if len(data.MaxMetricRouterLsaIpv6) != len(state.MaxMetricRouterLsaIpv6) {
		hasChanges = true
	} else {
		for i := range data.MaxMetricRouterLsaIpv6 {
			if !data.MaxMetricRouterLsaIpv6[i].AdType.Equal(state.MaxMetricRouterLsaIpv6[i].AdType) {
				hasChanges = true
			}
			if !data.MaxMetricRouterLsaIpv6[i].Time.Equal(state.MaxMetricRouterLsaIpv6[i].Time) {
				hasChanges = true
			}
		}
	}
	if len(data.AreasIpv6) != len(state.AreasIpv6) {
		hasChanges = true
	} else {
		for i := range data.AreasIpv6 {
			if !data.AreasIpv6[i].AreaNumber.Equal(state.AreasIpv6[i].AreaNumber) {
				hasChanges = true
			}
			if !data.AreasIpv6[i].Stub.Equal(state.AreasIpv6[i].Stub) {
				hasChanges = true
			}
			if !data.AreasIpv6[i].StubNoSummary.Equal(state.AreasIpv6[i].StubNoSummary) {
				hasChanges = true
			}
			if !data.AreasIpv6[i].Nssa.Equal(state.AreasIpv6[i].Nssa) {
				hasChanges = true
			}
			if !data.AreasIpv6[i].NssaNoSummary.Equal(state.AreasIpv6[i].NssaNoSummary) {
				hasChanges = true
			}
			if !data.AreasIpv6[i].Translate.Equal(state.AreasIpv6[i].Translate) {
				hasChanges = true
			}
			if !data.AreasIpv6[i].Normal.Equal(state.AreasIpv6[i].Normal) {
				hasChanges = true
			}
			if len(data.AreasIpv6[i].Interfaces) != len(state.AreasIpv6[i].Interfaces) {
				hasChanges = true
			} else {
				for ii := range data.AreasIpv6[i].Interfaces {
					if !data.AreasIpv6[i].Interfaces[ii].Name.Equal(state.AreasIpv6[i].Interfaces[ii].Name) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Interfaces[ii].HelloInterval.Equal(state.AreasIpv6[i].Interfaces[ii].HelloInterval) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Interfaces[ii].DeadInterval.Equal(state.AreasIpv6[i].Interfaces[ii].DeadInterval) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Interfaces[ii].RetransmitInterval.Equal(state.AreasIpv6[i].Interfaces[ii].RetransmitInterval) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Interfaces[ii].Cost.Equal(state.AreasIpv6[i].Interfaces[ii].Cost) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Interfaces[ii].Network.Equal(state.AreasIpv6[i].Interfaces[ii].Network) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Interfaces[ii].PassiveInterface.Equal(state.AreasIpv6[i].Interfaces[ii].PassiveInterface) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Interfaces[ii].AuthenticationType.Equal(state.AreasIpv6[i].Interfaces[ii].AuthenticationType) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Interfaces[ii].AuthenticationKey.Equal(state.AreasIpv6[i].Interfaces[ii].AuthenticationKey) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Interfaces[ii].IpsecSpi.Equal(state.AreasIpv6[i].Interfaces[ii].IpsecSpi) {
						hasChanges = true
					}
				}
			}
			if len(data.AreasIpv6[i].Ranges) != len(state.AreasIpv6[i].Ranges) {
				hasChanges = true
			} else {
				for ii := range data.AreasIpv6[i].Ranges {
					if !data.AreasIpv6[i].Ranges[ii].Address.Equal(state.AreasIpv6[i].Ranges[ii].Address) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Ranges[ii].Cost.Equal(state.AreasIpv6[i].Ranges[ii].Cost) {
						hasChanges = true
					}
					if !data.AreasIpv6[i].Ranges[ii].NoAdvertise.Equal(state.AreasIpv6[i].Ranges[ii].NoAdvertise) {
						hasChanges = true
					}
				}
			}
		}
	}
	return hasChanges
}
