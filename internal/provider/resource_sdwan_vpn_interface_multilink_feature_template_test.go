// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccSdwanVPNInterfaceMultilinkFeatureTemplate(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccSdwanVPNInterfaceMultilinkFeatureTemplateConfig_minimum(),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "interface_name", "Example"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "multilink_group_number", "2147483"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ppp_authentication_protocol", "chap"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "authentication_type", "callin"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "chap_hostname", "chap-example"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "chap_ppp_auth_password", "myPassword"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "pap_username", "pap-username"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "pap_password", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "pap_ppp_auth_password", "myPassword"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "per_tunnel_qos", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "per_tunnel_qos_aggregator", "false"),
				),
			},
			{
				Config: testAccSdwanVPNInterfaceMultilinkFeatureTemplateConfig_all(),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "interface_name", "Example"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "multilink_group_number", "2147483"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "interface_description", "My Description"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ipv4_address", "1.2.3.4"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ipv6_address", "2001:0:0:1::/64"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ipv6_access_lists.0.direction", "in"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ipv6_access_lists.0.acl_name", "Egress ACL - IPv4"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ppp_authentication_protocol", "chap"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ppp_authentication_protocol_pap", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "authentication_type", "callin"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "chap_hostname", "chap-example"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "chap_ppp_auth_password", "myPassword"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "pap_username", "pap-username"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "pap_password", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "pap_ppp_auth_password", "myPassword"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "enable_core_region", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "core_region", "core"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "secondary_region", "off"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "encapsulation.0.encapsulation_type", "gre"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "encapsulation.0.preference", "4294967"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "encapsulation.0.weight", "250"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "border", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "per_tunnel_qos", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "per_tunnel_qos_aggregator", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "color", "custom1"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "last_resort_circuit", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "low_bandwidth_link", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "tunnel_tcp_mss", "1460"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "enable_clear_dont_fragment", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "network_broadcast_1", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "max_control_connections", "8"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "control_connections", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "vbond_as_stun_server", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "vmanage_connection_preference", "5"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "port_hop", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "restrict", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "carrier", "carrier1"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "nat_refresh_interval", "15"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "hello_interval", "1000"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "hello_tolerance", "12"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "bind_loopback_tunnel", "12"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "all", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "network_broadcast_2", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "bgp", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "dhcp", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "dns", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "icmp", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ssh", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "netconf", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ospf", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "stun", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "snmp", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "https", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "disable_fragmentation", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "fragment_max_delay", "1"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "interleaving_fragment", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "clear_dont_fragment_bit", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "pmtu_discovery", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ip_mtu", "1500"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "static_ingress_qos", "6"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "tcp_mss", "720"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "ip_directed_broadcast", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "tloc_extension", "tloc"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "administrative_shutdown", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "link_autonegotiate", "true"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "shaping_rate", "10000000"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "qos_map", "test"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "vpn_qos_map", "test"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "bandwidth_upstream", "214748300"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "bandwidth_downstream", "214748300"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "write_rule", "test_rule"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "access_list.0.direction", "in"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "access_list.0.acl_name", "Egress ACL - IPv4"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.card_type", "E1"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.slot", "interface-t1"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.framing", "example-framing"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.line_mode", "primary"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.internal", "false"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.description", "example-interface"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.linecode", "ami"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.set_length_for_long", "100"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.set_length_for_short", "100"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "controller_tx_ex_list.0.channel_group_list.0.channel_group", "30"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "nim_interface_list.0.nim_serial_interface_type", "2t"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "nim_interface_list.0.interface_name", "nim-interface"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "nim_interface_list.0.interface_description", "interface description"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "nim_interface_list.0.bandwidth", "21474836"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "nim_interface_list.0.clock_rate", "120000"),
					resource.TestCheckResourceAttr("sdwan_vpn_interface_multilink_feature_template.test", "nim_interface_list.0.encapsulation_serial", "hdlc"),
				),
			},
		},
	})
}

func testAccSdwanVPNInterfaceMultilinkFeatureTemplateConfig_minimum() string {
	return `
	resource "sdwan_vpn_interface_multilink_feature_template" "test" {
		name = "TF_TEST_MIN"
		description = "Terraform integration test"
		device_types = ["vedge-C8000V"]
		interface_name = "Example"
		multilink_group_number = 2147483
		ppp_authentication_protocol = "chap"
		authentication_type = "callin"
		chap_hostname = "chap-example"
		chap_ppp_auth_password = "myPassword"
		pap_username = "pap-username"
		pap_password = true
		pap_ppp_auth_password = "myPassword"
		per_tunnel_qos = true
		per_tunnel_qos_aggregator = false
	}
	`
}

func testAccSdwanVPNInterfaceMultilinkFeatureTemplateConfig_all() string {
	return `
	resource "sdwan_vpn_interface_multilink_feature_template" "test" {
		name = "TF_TEST_ALL"
		description = "Terraform integration test"
		device_types = ["vedge-C8000V"]
		interface_name = "Example"
		multilink_group_number = 2147483
		interface_description = "My Description"
		ipv4_address = "1.2.3.4"
		ipv6_address = "2001:0:0:1::/64"
		ipv6_access_lists = [{
			direction = "in"
			acl_name = "Egress ACL - IPv4"
		}]
		ppp_authentication_protocol = "chap"
		ppp_authentication_protocol_pap = false
		authentication_type = "callin"
		chap_hostname = "chap-example"
		chap_ppp_auth_password = "myPassword"
		pap_username = "pap-username"
		pap_password = true
		pap_ppp_auth_password = "myPassword"
		enable_core_region = true
		core_region = "core"
		secondary_region = "off"
		encapsulation = [{
			encapsulation_type = "gre"
			preference = 4294967
			weight = 250
		}]
		groups = [42949672]
		border = true
		per_tunnel_qos = true
		per_tunnel_qos_aggregator = false
		color = "custom1"
		last_resort_circuit = false
		low_bandwidth_link = false
		tunnel_tcp_mss = 1460
		enable_clear_dont_fragment = false
		network_broadcast_1 = false
		max_control_connections = 8
		control_connections = true
		vbond_as_stun_server = false
		exclude_controller_group_list = [100]
		vmanage_connection_preference = 5
		port_hop = false
		restrict = false
		carrier = "carrier1"
		nat_refresh_interval = 15
		hello_interval = 1000
		hello_tolerance = 12
		bind_loopback_tunnel = "12"
		all = false
		network_broadcast_2 = false
		bgp = false
		dhcp = true
		dns = true
		icmp = true
		ssh = false
		netconf = false
		ospf = false
		stun = false
		snmp = false
		https = true
		disable_fragmentation = true
		fragment_max_delay = 1
		interleaving_fragment = false
		clear_dont_fragment_bit = false
		pmtu_discovery = false
		ip_mtu = 1500
		static_ingress_qos = 6
		tcp_mss = 720
		ip_directed_broadcast = true
		tloc_extension = "tloc"
		administrative_shutdown = true
		link_autonegotiate = true
		shaping_rate = 10000000
		qos_map = "test"
		vpn_qos_map = "test"
		bandwidth_upstream = 214748300
		bandwidth_downstream = 214748300
		write_rule = "test_rule"
		access_list = [{
			direction = "in"
			acl_name = "Egress ACL - IPv4"
		}]
		controller_tx_ex_list = [{
			card_type = "E1"
			slot = "interface-t1"
			framing = "example-framing"
			line_mode = "primary"
			internal = false
			description = "example-interface"
			linecode = "ami"
			set_length_for_long = "100"
			set_length_for_short = "100"
			channel_group_list = [{
				channel_group = 30
				timeslots = ["example"]
			}]
		}]
		nim_interface_list = [{
			nim_serial_interface_type = "2t"
			interface_name = "nim-interface"
			interface_description = "interface description"
			bandwidth = 21474836
			clock_rate = 120000
			encapsulation_serial = "hdlc"
		}]
	}
	`
}
