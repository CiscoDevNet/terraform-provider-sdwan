// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccSdwanCflowdPolicyDefinition(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccSdwanCflowdPolicyDefinitionConfig_all(),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "name", "Example"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "description", "My description"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "active_flow_timeout", "100"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "inactive_flow_timeout", "10"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "sampling_interval", "10"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "flow_refresh", "120"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "protocol", "ipv4"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "tos", "true"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "remarked_dscp", "true"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "collectors.0.vpn_id", "1"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "collectors.0.ip_address", "10.0.0.1"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "collectors.0.port", "12345"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "collectors.0.transport", "transport_tcp"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "collectors.0.source_interface", "Ethernet1"),
					resource.TestCheckResourceAttr("sdwan_cflowd_policy_definition.test", "collectors.0.export_spreading", "enable"),
				),
			},
		},
	})
}

func testAccSdwanCflowdPolicyDefinitionConfig_all() string {
	return `
	resource "sdwan_cflowd_policy_definition" "test" {
		name = "Example"
		description = "My description"
		active_flow_timeout = 100
		inactive_flow_timeout = 10
		sampling_interval = 10
		flow_refresh = 120
		protocol = "ipv4"
		tos = true
		remarked_dscp = true
		collectors = [{
			vpn_id = 1
			ip_address = "10.0.0.1"
			port = 12345
			transport = "transport_tcp"
			source_interface = "Ethernet1"
			export_spreading = "enable"
		}]
	}
	`
}
