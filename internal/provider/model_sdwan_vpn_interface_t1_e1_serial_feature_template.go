// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-sdwan/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VPNInterfaceT1E1Serial struct {
	Id                                           types.String                                 `tfsdk:"id"`
	Version                                      types.Int64                                  `tfsdk:"version"`
	TemplateType                                 types.String                                 `tfsdk:"template_type"`
	Name                                         types.String                                 `tfsdk:"name"`
	Description                                  types.String                                 `tfsdk:"description"`
	DeviceTypes                                  types.Set                                    `tfsdk:"device_types"`
	SerialInterfaceName                          types.String                                 `tfsdk:"serial_interface_name"`
	SerialInterfaceNameVariable                  types.String                                 `tfsdk:"serial_interface_name_variable"`
	InterfaceDescription                         types.String                                 `tfsdk:"interface_description"`
	InterfaceDescriptionVariable                 types.String                                 `tfsdk:"interface_description_variable"`
	Ipv4Address                                  types.String                                 `tfsdk:"ipv4_address"`
	Ipv4AddressVariable                          types.String                                 `tfsdk:"ipv4_address_variable"`
	Ipv6Address                                  types.String                                 `tfsdk:"ipv6_address"`
	Ipv6AddressVariable                          types.String                                 `tfsdk:"ipv6_address_variable"`
	Ipv6AccessLists                              []VPNInterfaceT1E1SerialIpv6AccessLists      `tfsdk:"ipv6_access_lists"`
	EnableCoreRegion                             types.Bool                                   `tfsdk:"enable_core_region"`
	EnableCoreRegionVariable                     types.String                                 `tfsdk:"enable_core_region_variable"`
	CoreRegion                                   types.String                                 `tfsdk:"core_region"`
	CoreRegionVariable                           types.String                                 `tfsdk:"core_region_variable"`
	SecondaryRegion                              types.String                                 `tfsdk:"secondary_region"`
	SecondaryRegionVariable                      types.String                                 `tfsdk:"secondary_region_variable"`
	EncapsulationForTloc                         []VPNInterfaceT1E1SerialEncapsulationForTloc `tfsdk:"encapsulation_for_tloc"`
	Groups                                       types.Set                                    `tfsdk:"groups"`
	GroupsVariable                               types.String                                 `tfsdk:"groups_variable"`
	Border                                       types.Bool                                   `tfsdk:"border"`
	BorderVariable                               types.String                                 `tfsdk:"border_variable"`
	PerTunnelQos                                 types.Bool                                   `tfsdk:"per_tunnel_qos"`
	PerTunnelQosVariable                         types.String                                 `tfsdk:"per_tunnel_qos_variable"`
	PerTunnelQosAggregator                       types.Bool                                   `tfsdk:"per_tunnel_qos_aggregator"`
	PerTunnelQosAggregatorVariable               types.String                                 `tfsdk:"per_tunnel_qos_aggregator_variable"`
	Color                                        types.String                                 `tfsdk:"color"`
	ColorVariable                                types.String                                 `tfsdk:"color_variable"`
	LastResortCircuit                            types.Bool                                   `tfsdk:"last_resort_circuit"`
	LastResortCircuitVariable                    types.String                                 `tfsdk:"last_resort_circuit_variable"`
	LowBandwidthLink                             types.Bool                                   `tfsdk:"low_bandwidth_link"`
	LowBandwidthLinkVariable                     types.String                                 `tfsdk:"low_bandwidth_link_variable"`
	TunnelTcpMss                                 types.Int64                                  `tfsdk:"tunnel_tcp_mss"`
	TunnelTcpMssVariable                         types.String                                 `tfsdk:"tunnel_tcp_mss_variable"`
	EnableClearDon                               types.Bool                                   `tfsdk:"enable_clear_don"`
	EnableClearDonVariable                       types.String                                 `tfsdk:"enable_clear_don_variable"`
	NetworkBroadcast1                            types.Bool                                   `tfsdk:"network_broadcast_1"`
	NetworkBroadcast1Variable                    types.String                                 `tfsdk:"network_broadcast_1_variable"`
	MaxControlConnections                        types.Int64                                  `tfsdk:"max_control_connections"`
	MaxControlConnectionsVariable                types.String                                 `tfsdk:"max_control_connections_variable"`
	VbondAsStunServer                            types.Bool                                   `tfsdk:"vbond_as_stun_server"`
	VbondAsStunServerVariable                    types.String                                 `tfsdk:"vbond_as_stun_server_variable"`
	ExcludeControllerGroupList                   types.Set                                    `tfsdk:"exclude_controller_group_list"`
	ExcludeControllerGroupListVariable           types.String                                 `tfsdk:"exclude_controller_group_list_variable"`
	VmanageConnectionPreference                  types.Int64                                  `tfsdk:"vmanage_connection_preference"`
	VmanageConnectionPreferenceVariable          types.String                                 `tfsdk:"vmanage_connection_preference_variable"`
	PortHop                                      types.Bool                                   `tfsdk:"port_hop"`
	PortHopVariable                              types.String                                 `tfsdk:"port_hop_variable"`
	Restrict                                     types.Bool                                   `tfsdk:"restrict"`
	RestrictVariable                             types.String                                 `tfsdk:"restrict_variable"`
	Carrier                                      types.String                                 `tfsdk:"carrier"`
	CarrierVariable                              types.String                                 `tfsdk:"carrier_variable"`
	NatRefreshInterval                           types.Int64                                  `tfsdk:"nat_refresh_interval"`
	NatRefreshIntervalVariable                   types.String                                 `tfsdk:"nat_refresh_interval_variable"`
	HelloInterval                                types.Int64                                  `tfsdk:"hello_interval"`
	HelloIntervalVariable                        types.String                                 `tfsdk:"hello_interval_variable"`
	HelloTolerance                               types.Int64                                  `tfsdk:"hello_tolerance"`
	HelloToleranceVariable                       types.String                                 `tfsdk:"hello_tolerance_variable"`
	BindLoopbackTunnel                           types.String                                 `tfsdk:"bind_loopback_tunnel"`
	BindLoopbackTunnelVariable                   types.String                                 `tfsdk:"bind_loopback_tunnel_variable"`
	All                                          types.Bool                                   `tfsdk:"all"`
	AllVariable                                  types.String                                 `tfsdk:"all_variable"`
	NetworkBroadcast2                            types.Bool                                   `tfsdk:"network_broadcast_2"`
	NetworkBroadcast2Variable                    types.String                                 `tfsdk:"network_broadcast_2_variable"`
	Bgp                                          types.Bool                                   `tfsdk:"bgp"`
	BgpVariable                                  types.String                                 `tfsdk:"bgp_variable"`
	Dhcp                                         types.Bool                                   `tfsdk:"dhcp"`
	DhcpVariable                                 types.String                                 `tfsdk:"dhcp_variable"`
	Dns                                          types.Bool                                   `tfsdk:"dns"`
	DnsVariable                                  types.String                                 `tfsdk:"dns_variable"`
	Icmp                                         types.Bool                                   `tfsdk:"icmp"`
	IcmpVariable                                 types.String                                 `tfsdk:"icmp_variable"`
	Ssh                                          types.Bool                                   `tfsdk:"ssh"`
	SshVariable                                  types.String                                 `tfsdk:"ssh_variable"`
	Ntp                                          types.Bool                                   `tfsdk:"ntp"`
	NtpVariable                                  types.String                                 `tfsdk:"ntp_variable"`
	Netconf                                      types.Bool                                   `tfsdk:"netconf"`
	NetconfVariable                              types.String                                 `tfsdk:"netconf_variable"`
	Ospf                                         types.Bool                                   `tfsdk:"ospf"`
	OspfVariable                                 types.String                                 `tfsdk:"ospf_variable"`
	Stun                                         types.Bool                                   `tfsdk:"stun"`
	StunVariable                                 types.String                                 `tfsdk:"stun_variable"`
	Snmp                                         types.Bool                                   `tfsdk:"snmp"`
	SnmpVariable                                 types.String                                 `tfsdk:"snmp_variable"`
	Https                                        types.Bool                                   `tfsdk:"https"`
	HttpsVariable                                types.String                                 `tfsdk:"https_variable"`
	ClearDontFragmentBit                         types.Bool                                   `tfsdk:"clear_dont_fragment_bit"`
	ClearDontFragmentBitVariable                 types.String                                 `tfsdk:"clear_dont_fragment_bit_variable"`
	PmtuDiscovery                                types.Bool                                   `tfsdk:"pmtu_discovery"`
	PmtuDiscoveryVariable                        types.String                                 `tfsdk:"pmtu_discovery_variable"`
	IpMtu                                        types.Int64                                  `tfsdk:"ip_mtu"`
	IpMtuVariable                                types.String                                 `tfsdk:"ip_mtu_variable"`
	StaticIngressQos                             types.Int64                                  `tfsdk:"static_ingress_qos"`
	StaticIngressQosVariable                     types.String                                 `tfsdk:"static_ingress_qos_variable"`
	TcpMss                                       types.Int64                                  `tfsdk:"tcp_mss"`
	TcpMssVariable                               types.String                                 `tfsdk:"tcp_mss_variable"`
	TlocExtension                                types.String                                 `tfsdk:"tloc_extension"`
	TlocExtensionVariable                        types.String                                 `tfsdk:"tloc_extension_variable"`
	AdministrativeShutdown                       types.Bool                                   `tfsdk:"administrative_shutdown"`
	AdministrativeShutdownVariable               types.String                                 `tfsdk:"administrative_shutdown_variable"`
	LinkAutonegotiate                            types.Bool                                   `tfsdk:"link_autonegotiate"`
	LinkAutonegotiateVariable                    types.String                                 `tfsdk:"link_autonegotiate_variable"`
	ShapingRate                                  types.Int64                                  `tfsdk:"shaping_rate"`
	ShapingRateVariable                          types.String                                 `tfsdk:"shaping_rate_variable"`
	QosMap                                       types.String                                 `tfsdk:"qos_map"`
	QosMapVariable                               types.String                                 `tfsdk:"qos_map_variable"`
	VpnQosMap                                    types.String                                 `tfsdk:"vpn_qos_map"`
	VpnQosMapVariable                            types.String                                 `tfsdk:"vpn_qos_map_variable"`
	InterfaceBandwidthCapacity                   types.Int64                                  `tfsdk:"interface_bandwidth_capacity"`
	InterfaceBandwidthCapacityVariable           types.String                                 `tfsdk:"interface_bandwidth_capacity_variable"`
	ClockRate                                    types.String                                 `tfsdk:"clock_rate"`
	ClockRateVariable                            types.String                                 `tfsdk:"clock_rate_variable"`
	Encapsulation                                types.String                                 `tfsdk:"encapsulation"`
	EncapsulationVariable                        types.String                                 `tfsdk:"encapsulation_variable"`
	InterfaceDownstreamBandwidthCapacity         types.Int64                                  `tfsdk:"interface_downstream_bandwidth_capacity"`
	InterfaceDownstreamBandwidthCapacityVariable types.String                                 `tfsdk:"interface_downstream_bandwidth_capacity_variable"`
	WriteRule                                    types.String                                 `tfsdk:"write_rule"`
	WriteRuleVariable                            types.String                                 `tfsdk:"write_rule_variable"`
	AccessList                                   []VPNInterfaceT1E1SerialAccessList           `tfsdk:"access_list"`
}

type VPNInterfaceT1E1SerialIpv6AccessLists struct {
	Optional        types.Bool   `tfsdk:"optional"`
	Direction       types.String `tfsdk:"direction"`
	AclName         types.String `tfsdk:"acl_name"`
	AclNameVariable types.String `tfsdk:"acl_name_variable"`
}

type VPNInterfaceT1E1SerialEncapsulationForTloc struct {
	Optional           types.Bool   `tfsdk:"optional"`
	EncapsulationType  types.String `tfsdk:"encapsulation_type"`
	Preference         types.Int64  `tfsdk:"preference"`
	PreferenceVariable types.String `tfsdk:"preference_variable"`
	Weight             types.Int64  `tfsdk:"weight"`
	WeightVariable     types.String `tfsdk:"weight_variable"`
}

type VPNInterfaceT1E1SerialAccessList struct {
	Optional        types.Bool   `tfsdk:"optional"`
	Direction       types.String `tfsdk:"direction"`
	AclName         types.String `tfsdk:"acl_name"`
	AclNameVariable types.String `tfsdk:"acl_name_variable"`
}

func (data VPNInterfaceT1E1Serial) getModel() string {
	return "vpn-interface-t1-e1"
}

func (data VPNInterfaceT1E1Serial) toBody(ctx context.Context) string {
	body := ""

	var device_types []string
	data.DeviceTypes.ElementsAs(ctx, &device_types, false)
	body, _ = sjson.Set(body, "deviceType", device_types)
	body, _ = sjson.Set(body, "factoryDefault", false)
	body, _ = sjson.Set(body, "templateDescription", data.Description.ValueString())
	body, _ = sjson.Set(body, "templateMinVersion", "15.0.0")
	body, _ = sjson.Set(body, "templateName", data.Name.ValueString())
	body, _ = sjson.Set(body, "templateType", "vpn-interface-t1-e1")
	body, _ = sjson.Set(body, "templateDefinition", map[string]interface{}{})

	path := "templateDefinition."

	if !data.SerialInterfaceNameVariable.IsNull() {
		body, _ = sjson.Set(body, path+"if-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"if-name."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"if-name."+"vipVariableName", data.SerialInterfaceNameVariable.ValueString())
	} else if data.SerialInterfaceName.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"if-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"if-name."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"if-name."+"vipValue", data.SerialInterfaceName.ValueString())
	}

	if !data.InterfaceDescriptionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"description."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"description."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"description."+"vipVariableName", data.InterfaceDescriptionVariable.ValueString())
	} else if data.InterfaceDescription.IsNull() {
		body, _ = sjson.Set(body, path+"description."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"description."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"description."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"description."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"description."+"vipValue", data.InterfaceDescription.ValueString())
	}

	if !data.Ipv4AddressVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ip.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip.address."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ip.address."+"vipVariableName", data.Ipv4AddressVariable.ValueString())
	} else if data.Ipv4Address.IsNull() {
		body, _ = sjson.Set(body, path+"ip.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip.address."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ip.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ip.address."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ip.address."+"vipValue", data.Ipv4Address.ValueString())
	}

	if !data.Ipv6AddressVariable.IsNull() {
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipVariableName", data.Ipv6AddressVariable.ValueString())
	} else if data.Ipv6Address.IsNull() {
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ipv6.address."+"vipValue", data.Ipv6Address.ValueString())
	}
	if len(data.Ipv6AccessLists) > 0 {
		body, _ = sjson.Set(body, path+"ipv6.access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ipv6.access-list."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"ipv6.access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"ipv6.access-list."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"ipv6.access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"ipv6.access-list."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"ipv6.access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"ipv6.access-list."+"vipValue", []interface{}{})
	}
	for _, item := range data.Ipv6AccessLists {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "direction")
		if item.Direction.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipValue", item.Direction.ValueString())
		}
		itemAttributes = append(itemAttributes, "acl-name")

		if !item.AclNameVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipVariableName", item.AclNameVariable.ValueString())
		} else if item.AclName.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipValue", item.AclName.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"ipv6.access-list."+"vipValue.-1", itemBody)
	}

	if !data.EnableCoreRegionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipVariableName", data.EnableCoreRegionVariable.ValueString())
	} else if data.EnableCoreRegion.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.enable-core-region."+"vipValue", strconv.FormatBool(data.EnableCoreRegion.ValueBool()))
	}

	if !data.CoreRegionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipVariableName", data.CoreRegionVariable.ValueString())
	} else if data.CoreRegion.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.core-region."+"vipValue", data.CoreRegion.ValueString())
	}

	if !data.SecondaryRegionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipVariableName", data.SecondaryRegionVariable.ValueString())
	} else if data.SecondaryRegion.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.secondary-region."+"vipValue", data.SecondaryRegion.ValueString())
	}
	if len(data.EncapsulationForTloc) > 0 {
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipPrimaryKey", []string{"encap"})
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipPrimaryKey", []string{"encap"})
		body, _ = sjson.Set(body, path+"tunnel-interface.encapsulation."+"vipValue", []interface{}{})
	}
	for _, item := range data.EncapsulationForTloc {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "encap")
		if item.EncapsulationType.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "encap."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "encap."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "encap."+"vipValue", item.EncapsulationType.ValueString())
		}
		itemAttributes = append(itemAttributes, "preference")

		if !item.PreferenceVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipVariableName", item.PreferenceVariable.ValueString())
		} else if item.Preference.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "preference."+"vipValue", item.Preference.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "weight")

		if !item.WeightVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipVariableName", item.WeightVariable.ValueString())
		} else if item.Weight.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "weight."+"vipValue", item.Weight.ValueInt64())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"tunnel-interface.encapsulation."+"vipValue.-1", itemBody)
	}

	if !data.GroupsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipVariableName", data.GroupsVariable.ValueString())
	} else if data.Groups.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipType", "constant")
		var values []int64
		data.Groups.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, path+"tunnel-interface.group."+"vipValue", values)
	}

	if !data.BorderVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipVariableName", data.BorderVariable.ValueString())
	} else if data.Border.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.border."+"vipValue", strconv.FormatBool(data.Border.ValueBool()))
	}

	if !data.PerTunnelQosVariable.IsNull() {
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipVariableName", data.PerTunnelQosVariable.ValueString())
	} else if data.PerTunnelQos.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"per-tunnel-qos."+"vipValue", strconv.FormatBool(data.PerTunnelQos.ValueBool()))
	}

	if !data.PerTunnelQosAggregatorVariable.IsNull() {
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipVariableName", data.PerTunnelQosAggregatorVariable.ValueString())
	} else if data.PerTunnelQosAggregator.IsNull() {
	} else {
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"per-tunnel-qos-aggregator."+"vipValue", strconv.FormatBool(data.PerTunnelQosAggregator.ValueBool()))
	}

	if !data.ColorVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipVariableName", data.ColorVariable.ValueString())
	} else if data.Color.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.value."+"vipValue", data.Color.ValueString())
	}

	if !data.LastResortCircuitVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipVariableName", data.LastResortCircuitVariable.ValueString())
	} else if data.LastResortCircuit.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.last-resort-circuit."+"vipValue", strconv.FormatBool(data.LastResortCircuit.ValueBool()))
	}

	if !data.LowBandwidthLinkVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipVariableName", data.LowBandwidthLinkVariable.ValueString())
	} else if data.LowBandwidthLink.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.low-bandwidth-link."+"vipValue", strconv.FormatBool(data.LowBandwidthLink.ValueBool()))
	}

	if !data.TunnelTcpMssVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipVariableName", data.TunnelTcpMssVariable.ValueString())
	} else if data.TunnelTcpMss.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.tunnel-tcp-mss-adjust."+"vipValue", data.TunnelTcpMss.ValueInt64())
	}

	if !data.EnableClearDonVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipVariableName", data.EnableClearDonVariable.ValueString())
	} else if data.EnableClearDon.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.clear-dont-fragment."+"vipValue", strconv.FormatBool(data.EnableClearDon.ValueBool()))
	}

	if !data.NetworkBroadcast1Variable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipVariableName", data.NetworkBroadcast1Variable.ValueString())
	} else if data.NetworkBroadcast1.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipValue", strconv.FormatBool(data.NetworkBroadcast1.ValueBool()))
	}

	if !data.MaxControlConnectionsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipVariableName", data.MaxControlConnectionsVariable.ValueString())
	} else if data.MaxControlConnections.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.max-control-connections."+"vipValue", data.MaxControlConnections.ValueInt64())
	}

	if !data.VbondAsStunServerVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipVariableName", data.VbondAsStunServerVariable.ValueString())
	} else if data.VbondAsStunServer.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.vbond-as-stun-server."+"vipValue", strconv.FormatBool(data.VbondAsStunServer.ValueBool()))
	}

	if !data.ExcludeControllerGroupListVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipVariableName", data.ExcludeControllerGroupListVariable.ValueString())
	} else if data.ExcludeControllerGroupList.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipObjectType", "list")
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipType", "constant")
		var values []int64
		data.ExcludeControllerGroupList.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, path+"tunnel-interface.exclude-controller-group-list."+"vipValue", values)
	}

	if !data.VmanageConnectionPreferenceVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipVariableName", data.VmanageConnectionPreferenceVariable.ValueString())
	} else if data.VmanageConnectionPreference.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.vmanage-connection-preference."+"vipValue", data.VmanageConnectionPreference.ValueInt64())
	}

	if !data.PortHopVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipVariableName", data.PortHopVariable.ValueString())
	} else if data.PortHop.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.port-hop."+"vipValue", strconv.FormatBool(data.PortHop.ValueBool()))
	}

	if !data.RestrictVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipVariableName", data.RestrictVariable.ValueString())
	} else if data.Restrict.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipObjectType", "node-only")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.color.restrict."+"vipValue", strconv.FormatBool(data.Restrict.ValueBool()))
	}

	if !data.CarrierVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipVariableName", data.CarrierVariable.ValueString())
	} else if data.Carrier.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.carrier."+"vipValue", data.Carrier.ValueString())
	}

	if !data.NatRefreshIntervalVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipVariableName", data.NatRefreshIntervalVariable.ValueString())
	} else if data.NatRefreshInterval.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.nat-refresh-interval."+"vipValue", data.NatRefreshInterval.ValueInt64())
	}

	if !data.HelloIntervalVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipVariableName", data.HelloIntervalVariable.ValueString())
	} else if data.HelloInterval.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-interval."+"vipValue", data.HelloInterval.ValueInt64())
	}

	if !data.HelloToleranceVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipVariableName", data.HelloToleranceVariable.ValueString())
	} else if data.HelloTolerance.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.hello-tolerance."+"vipValue", data.HelloTolerance.ValueInt64())
	}

	if !data.BindLoopbackTunnelVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipVariableName", data.BindLoopbackTunnelVariable.ValueString())
	} else if data.BindLoopbackTunnel.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.bind."+"vipValue", data.BindLoopbackTunnel.ValueString())
	}

	if !data.AllVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipVariableName", data.AllVariable.ValueString())
	} else if data.All.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.all."+"vipValue", strconv.FormatBool(data.All.ValueBool()))
	}

	if !data.NetworkBroadcast2Variable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipVariableName", data.NetworkBroadcast2Variable.ValueString())
	} else if data.NetworkBroadcast2.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.network-broadcast."+"vipValue", strconv.FormatBool(data.NetworkBroadcast2.ValueBool()))
	}

	if !data.BgpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipVariableName", data.BgpVariable.ValueString())
	} else if data.Bgp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.bgp."+"vipValue", strconv.FormatBool(data.Bgp.ValueBool()))
	}

	if !data.DhcpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipVariableName", data.DhcpVariable.ValueString())
	} else if data.Dhcp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dhcp."+"vipValue", strconv.FormatBool(data.Dhcp.ValueBool()))
	}

	if !data.DnsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipVariableName", data.DnsVariable.ValueString())
	} else if data.Dns.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.dns."+"vipValue", strconv.FormatBool(data.Dns.ValueBool()))
	}

	if !data.IcmpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipVariableName", data.IcmpVariable.ValueString())
	} else if data.Icmp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.icmp."+"vipValue", strconv.FormatBool(data.Icmp.ValueBool()))
	}

	if !data.SshVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipVariableName", data.SshVariable.ValueString())
	} else if data.Ssh.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.sshd."+"vipValue", strconv.FormatBool(data.Ssh.ValueBool()))
	}

	if !data.NtpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ntp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ntp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ntp."+"vipVariableName", data.NtpVariable.ValueString())
	} else if data.Ntp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ntp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ntp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ntp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ntp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ntp."+"vipValue", strconv.FormatBool(data.Ntp.ValueBool()))
	}

	if !data.NetconfVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipVariableName", data.NetconfVariable.ValueString())
	} else if data.Netconf.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.netconf."+"vipValue", strconv.FormatBool(data.Netconf.ValueBool()))
	}

	if !data.OspfVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipVariableName", data.OspfVariable.ValueString())
	} else if data.Ospf.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.ospf."+"vipValue", strconv.FormatBool(data.Ospf.ValueBool()))
	}

	if !data.StunVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipVariableName", data.StunVariable.ValueString())
	} else if data.Stun.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.stun."+"vipValue", strconv.FormatBool(data.Stun.ValueBool()))
	}

	if !data.SnmpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipVariableName", data.SnmpVariable.ValueString())
	} else if data.Snmp.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.snmp."+"vipValue", strconv.FormatBool(data.Snmp.ValueBool()))
	}

	if !data.HttpsVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipVariableName", data.HttpsVariable.ValueString())
	} else if data.Https.IsNull() {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tunnel-interface.allow-service.https."+"vipValue", strconv.FormatBool(data.Https.ValueBool()))
	}

	if !data.ClearDontFragmentBitVariable.IsNull() {
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipVariableName", data.ClearDontFragmentBitVariable.ValueString())
	} else if data.ClearDontFragmentBit.IsNull() {
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"clear-dont-fragment."+"vipValue", strconv.FormatBool(data.ClearDontFragmentBit.ValueBool()))
	}

	if !data.PmtuDiscoveryVariable.IsNull() {
		body, _ = sjson.Set(body, path+"pmtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"pmtu."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"pmtu."+"vipVariableName", data.PmtuDiscoveryVariable.ValueString())
	} else if data.PmtuDiscovery.IsNull() {
		body, _ = sjson.Set(body, path+"pmtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"pmtu."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"pmtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"pmtu."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"pmtu."+"vipValue", strconv.FormatBool(data.PmtuDiscovery.ValueBool()))
	}

	if !data.IpMtuVariable.IsNull() {
		body, _ = sjson.Set(body, path+"mtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"mtu."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"mtu."+"vipVariableName", data.IpMtuVariable.ValueString())
	} else if data.IpMtu.IsNull() {
		body, _ = sjson.Set(body, path+"mtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"mtu."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"mtu."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"mtu."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"mtu."+"vipValue", data.IpMtu.ValueInt64())
	}

	if !data.StaticIngressQosVariable.IsNull() {
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipVariableName", data.StaticIngressQosVariable.ValueString())
	} else if data.StaticIngressQos.IsNull() {
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"static-ingress-qos."+"vipValue", data.StaticIngressQos.ValueInt64())
	}

	if !data.TcpMssVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipVariableName", data.TcpMssVariable.ValueString())
	} else if data.TcpMss.IsNull() {
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tcp-mss-adjust."+"vipValue", data.TcpMss.ValueInt64())
	}

	if !data.TlocExtensionVariable.IsNull() {
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipVariableName", data.TlocExtensionVariable.ValueString())
	} else if data.TlocExtension.IsNull() {
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"tloc-extension."+"vipValue", data.TlocExtension.ValueString())
	}

	if !data.AdministrativeShutdownVariable.IsNull() {
		body, _ = sjson.Set(body, path+"shutdown."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shutdown."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"shutdown."+"vipVariableName", data.AdministrativeShutdownVariable.ValueString())
	} else if data.AdministrativeShutdown.IsNull() {
		body, _ = sjson.Set(body, path+"shutdown."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shutdown."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"shutdown."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shutdown."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"shutdown."+"vipValue", strconv.FormatBool(data.AdministrativeShutdown.ValueBool()))
	}

	if !data.LinkAutonegotiateVariable.IsNull() {
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipVariableName", data.LinkAutonegotiateVariable.ValueString())
	} else if data.LinkAutonegotiate.IsNull() {
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"autonegotiate."+"vipValue", strconv.FormatBool(data.LinkAutonegotiate.ValueBool()))
	}

	if !data.ShapingRateVariable.IsNull() {
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipVariableName", data.ShapingRateVariable.ValueString())
	} else if data.ShapingRate.IsNull() {
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"shaping-rate."+"vipValue", data.ShapingRate.ValueInt64())
	}

	if !data.QosMapVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-map."+"vipVariableName", data.QosMapVariable.ValueString())
	} else if data.QosMap.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"qos-map."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-map."+"vipValue", data.QosMap.ValueString())
	}

	if !data.VpnQosMapVariable.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipVariableName", data.VpnQosMapVariable.ValueString())
	} else if data.VpnQosMap.IsNull() {
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"qos-map-vpn."+"vipValue", data.VpnQosMap.ValueString())
	}

	if !data.InterfaceBandwidthCapacityVariable.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"bandwidth."+"vipVariableName", data.InterfaceBandwidthCapacityVariable.ValueString())
	} else if data.InterfaceBandwidthCapacity.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"bandwidth."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"bandwidth."+"vipValue", data.InterfaceBandwidthCapacity.ValueInt64())
	}

	if !data.ClockRateVariable.IsNull() {
		body, _ = sjson.Set(body, path+"clock-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clock-rate."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"clock-rate."+"vipVariableName", data.ClockRateVariable.ValueString())
	} else if data.ClockRate.IsNull() {
		body, _ = sjson.Set(body, path+"clock-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clock-rate."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"clock-rate."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"clock-rate."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"clock-rate."+"vipValue", data.ClockRate.ValueString())
	}

	if !data.EncapsulationVariable.IsNull() {
		body, _ = sjson.Set(body, path+"encapsulation-serial."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"encapsulation-serial."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"encapsulation-serial."+"vipVariableName", data.EncapsulationVariable.ValueString())
	} else if data.Encapsulation.IsNull() {
		body, _ = sjson.Set(body, path+"encapsulation-serial."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"encapsulation-serial."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"encapsulation-serial."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"encapsulation-serial."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"encapsulation-serial."+"vipValue", data.Encapsulation.ValueString())
	}

	if !data.InterfaceDownstreamBandwidthCapacityVariable.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipVariableName", data.InterfaceDownstreamBandwidthCapacityVariable.ValueString())
	} else if data.InterfaceDownstreamBandwidthCapacity.IsNull() {
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"bandwidth-downstream."+"vipValue", data.InterfaceDownstreamBandwidthCapacity.ValueInt64())
	}

	if !data.WriteRuleVariable.IsNull() {
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipVariableName", data.WriteRuleVariable.ValueString())
	} else if data.WriteRule.IsNull() {
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"rewrite-rule.rule-name."+"vipValue", data.WriteRule.ValueString())
	}
	if len(data.AccessList) > 0 {
		body, _ = sjson.Set(body, path+"access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"access-list."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"access-list."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"access-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"access-list."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"access-list."+"vipPrimaryKey", []string{"direction"})
		body, _ = sjson.Set(body, path+"access-list."+"vipValue", []interface{}{})
	}
	for _, item := range data.AccessList {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "direction")
		if item.Direction.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "direction."+"vipValue", item.Direction.ValueString())
		}
		itemAttributes = append(itemAttributes, "acl-name")

		if !item.AclNameVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipVariableName", item.AclNameVariable.ValueString())
		} else if item.AclName.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "acl-name."+"vipValue", item.AclName.ValueString())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"access-list."+"vipValue.-1", itemBody)
	}
	return body
}

func (data *VPNInterfaceT1E1Serial) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("deviceType"); value.Exists() {
		data.DeviceTypes = helpers.GetStringSet(value.Array())
	} else {
		data.DeviceTypes = types.SetNull(types.StringType)
	}
	if value := res.Get("templateDescription"); value.Exists() && value.String() != "" {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("templateName"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("templateType"); value.Exists() {
		data.TemplateType = types.StringValue(value.String())
	} else {
		data.TemplateType = types.StringNull()
	}

	path := "templateDefinition."
	if value := res.Get(path + "if-name.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SerialInterfaceName = types.StringNull()

			v := res.Get(path + "if-name.vipVariableName")
			data.SerialInterfaceNameVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SerialInterfaceName = types.StringNull()
			data.SerialInterfaceNameVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "if-name.vipValue")
			data.SerialInterfaceName = types.StringValue(v.String())
			data.SerialInterfaceNameVariable = types.StringNull()
		}
	} else {
		data.SerialInterfaceName = types.StringNull()
		data.SerialInterfaceNameVariable = types.StringNull()
	}
	if value := res.Get(path + "description.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.InterfaceDescription = types.StringNull()

			v := res.Get(path + "description.vipVariableName")
			data.InterfaceDescriptionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.InterfaceDescription = types.StringNull()
			data.InterfaceDescriptionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "description.vipValue")
			data.InterfaceDescription = types.StringValue(v.String())
			data.InterfaceDescriptionVariable = types.StringNull()
		}
	} else {
		data.InterfaceDescription = types.StringNull()
		data.InterfaceDescriptionVariable = types.StringNull()
	}
	if value := res.Get(path + "ip.address.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ipv4Address = types.StringNull()

			v := res.Get(path + "ip.address.vipVariableName")
			data.Ipv4AddressVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ipv4Address = types.StringNull()
			data.Ipv4AddressVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ip.address.vipValue")
			data.Ipv4Address = types.StringValue(v.String())
			data.Ipv4AddressVariable = types.StringNull()
		}
	} else {
		data.Ipv4Address = types.StringNull()
		data.Ipv4AddressVariable = types.StringNull()
	}
	if value := res.Get(path + "ipv6.address.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ipv6Address = types.StringNull()

			v := res.Get(path + "ipv6.address.vipVariableName")
			data.Ipv6AddressVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ipv6Address = types.StringNull()
			data.Ipv6AddressVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "ipv6.address.vipValue")
			data.Ipv6Address = types.StringValue(v.String())
			data.Ipv6AddressVariable = types.StringNull()
		}
	} else {
		data.Ipv6Address = types.StringNull()
		data.Ipv6AddressVariable = types.StringNull()
	}
	if value := res.Get(path + "ipv6.access-list.vipValue"); len(value.Array()) > 0 {
		data.Ipv6AccessLists = make([]VPNInterfaceT1E1SerialIpv6AccessLists, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceT1E1SerialIpv6AccessLists{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("direction.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("direction.vipValue")
					item.Direction = types.StringValue(cv.String())

				}
			} else {
				item.Direction = types.StringNull()

			}
			if cValue := v.Get("acl-name.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.AclName = types.StringNull()

					cv := v.Get("acl-name.vipVariableName")
					item.AclNameVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.AclName = types.StringNull()
					item.AclNameVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("acl-name.vipValue")
					item.AclName = types.StringValue(cv.String())
					item.AclNameVariable = types.StringNull()
				}
			} else {
				item.AclName = types.StringNull()
				item.AclNameVariable = types.StringNull()
			}
			data.Ipv6AccessLists = append(data.Ipv6AccessLists, item)
			return true
		})
	} else {
		data.Ipv6AccessLists = []VPNInterfaceT1E1SerialIpv6AccessLists{}
	}
	if value := res.Get(path + "tunnel-interface.enable-core-region.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.EnableCoreRegion = types.BoolNull()

			v := res.Get(path + "tunnel-interface.enable-core-region.vipVariableName")
			data.EnableCoreRegionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.EnableCoreRegion = types.BoolNull()
			data.EnableCoreRegionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.enable-core-region.vipValue")
			data.EnableCoreRegion = types.BoolValue(v.Bool())
			data.EnableCoreRegionVariable = types.StringNull()
		}
	} else {
		data.EnableCoreRegion = types.BoolNull()
		data.EnableCoreRegionVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.core-region.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.CoreRegion = types.StringNull()

			v := res.Get(path + "tunnel-interface.core-region.vipVariableName")
			data.CoreRegionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.CoreRegion = types.StringNull()
			data.CoreRegionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.core-region.vipValue")
			data.CoreRegion = types.StringValue(v.String())
			data.CoreRegionVariable = types.StringNull()
		}
	} else {
		data.CoreRegion = types.StringNull()
		data.CoreRegionVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.secondary-region.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SecondaryRegion = types.StringNull()

			v := res.Get(path + "tunnel-interface.secondary-region.vipVariableName")
			data.SecondaryRegionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SecondaryRegion = types.StringNull()
			data.SecondaryRegionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.secondary-region.vipValue")
			data.SecondaryRegion = types.StringValue(v.String())
			data.SecondaryRegionVariable = types.StringNull()
		}
	} else {
		data.SecondaryRegion = types.StringNull()
		data.SecondaryRegionVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.encapsulation.vipValue"); len(value.Array()) > 0 {
		data.EncapsulationForTloc = make([]VPNInterfaceT1E1SerialEncapsulationForTloc, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceT1E1SerialEncapsulationForTloc{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("encap.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.EncapsulationType = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.EncapsulationType = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("encap.vipValue")
					item.EncapsulationType = types.StringValue(cv.String())

				}
			} else {
				item.EncapsulationType = types.StringNull()

			}
			if cValue := v.Get("preference.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Preference = types.Int64Null()

					cv := v.Get("preference.vipVariableName")
					item.PreferenceVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Preference = types.Int64Null()
					item.PreferenceVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("preference.vipValue")
					item.Preference = types.Int64Value(cv.Int())
					item.PreferenceVariable = types.StringNull()
				}
			} else {
				item.Preference = types.Int64Null()
				item.PreferenceVariable = types.StringNull()
			}
			if cValue := v.Get("weight.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Weight = types.Int64Null()

					cv := v.Get("weight.vipVariableName")
					item.WeightVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.Weight = types.Int64Null()
					item.WeightVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("weight.vipValue")
					item.Weight = types.Int64Value(cv.Int())
					item.WeightVariable = types.StringNull()
				}
			} else {
				item.Weight = types.Int64Null()
				item.WeightVariable = types.StringNull()
			}
			data.EncapsulationForTloc = append(data.EncapsulationForTloc, item)
			return true
		})
	} else {
		data.EncapsulationForTloc = []VPNInterfaceT1E1SerialEncapsulationForTloc{}
	}
	if value := res.Get(path + "tunnel-interface.group.vipType"); len(value.Array()) > 0 {
		if value.String() == "variableName" {
			data.Groups = types.SetNull(types.Int64Type)

			v := res.Get(path + "tunnel-interface.group.vipVariableName")
			data.GroupsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Groups = types.SetNull(types.Int64Type)
			data.GroupsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.group.vipValue")
			data.Groups = helpers.GetInt64Set(v.Array())
			data.GroupsVariable = types.StringNull()
		}
	} else {
		data.Groups = types.SetNull(types.Int64Type)
		data.GroupsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.border.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Border = types.BoolNull()

			v := res.Get(path + "tunnel-interface.border.vipVariableName")
			data.BorderVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Border = types.BoolNull()
			data.BorderVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.border.vipValue")
			data.Border = types.BoolValue(v.Bool())
			data.BorderVariable = types.StringNull()
		}
	} else {
		data.Border = types.BoolNull()
		data.BorderVariable = types.StringNull()
	}
	if value := res.Get(path + "per-tunnel-qos.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PerTunnelQos = types.BoolNull()

			v := res.Get(path + "per-tunnel-qos.vipVariableName")
			data.PerTunnelQosVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PerTunnelQos = types.BoolNull()
			data.PerTunnelQosVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "per-tunnel-qos.vipValue")
			data.PerTunnelQos = types.BoolValue(v.Bool())
			data.PerTunnelQosVariable = types.StringNull()
		}
	} else {
		data.PerTunnelQos = types.BoolNull()
		data.PerTunnelQosVariable = types.StringNull()
	}
	if value := res.Get(path + "per-tunnel-qos-aggregator.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PerTunnelQosAggregator = types.BoolNull()

			v := res.Get(path + "per-tunnel-qos-aggregator.vipVariableName")
			data.PerTunnelQosAggregatorVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PerTunnelQosAggregator = types.BoolNull()
			data.PerTunnelQosAggregatorVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "per-tunnel-qos-aggregator.vipValue")
			data.PerTunnelQosAggregator = types.BoolValue(v.Bool())
			data.PerTunnelQosAggregatorVariable = types.StringNull()
		}
	} else {
		data.PerTunnelQosAggregator = types.BoolNull()
		data.PerTunnelQosAggregatorVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.color.value.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Color = types.StringNull()

			v := res.Get(path + "tunnel-interface.color.value.vipVariableName")
			data.ColorVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Color = types.StringNull()
			data.ColorVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.color.value.vipValue")
			data.Color = types.StringValue(v.String())
			data.ColorVariable = types.StringNull()
		}
	} else {
		data.Color = types.StringNull()
		data.ColorVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.last-resort-circuit.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.LastResortCircuit = types.BoolNull()

			v := res.Get(path + "tunnel-interface.last-resort-circuit.vipVariableName")
			data.LastResortCircuitVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.LastResortCircuit = types.BoolNull()
			data.LastResortCircuitVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.last-resort-circuit.vipValue")
			data.LastResortCircuit = types.BoolValue(v.Bool())
			data.LastResortCircuitVariable = types.StringNull()
		}
	} else {
		data.LastResortCircuit = types.BoolNull()
		data.LastResortCircuitVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.low-bandwidth-link.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.LowBandwidthLink = types.BoolNull()

			v := res.Get(path + "tunnel-interface.low-bandwidth-link.vipVariableName")
			data.LowBandwidthLinkVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.LowBandwidthLink = types.BoolNull()
			data.LowBandwidthLinkVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.low-bandwidth-link.vipValue")
			data.LowBandwidthLink = types.BoolValue(v.Bool())
			data.LowBandwidthLinkVariable = types.StringNull()
		}
	} else {
		data.LowBandwidthLink = types.BoolNull()
		data.LowBandwidthLinkVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.tunnel-tcp-mss-adjust.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TunnelTcpMss = types.Int64Null()

			v := res.Get(path + "tunnel-interface.tunnel-tcp-mss-adjust.vipVariableName")
			data.TunnelTcpMssVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TunnelTcpMss = types.Int64Null()
			data.TunnelTcpMssVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.tunnel-tcp-mss-adjust.vipValue")
			data.TunnelTcpMss = types.Int64Value(v.Int())
			data.TunnelTcpMssVariable = types.StringNull()
		}
	} else {
		data.TunnelTcpMss = types.Int64Null()
		data.TunnelTcpMssVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.clear-dont-fragment.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.EnableClearDon = types.BoolNull()

			v := res.Get(path + "tunnel-interface.clear-dont-fragment.vipVariableName")
			data.EnableClearDonVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.EnableClearDon = types.BoolNull()
			data.EnableClearDonVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.clear-dont-fragment.vipValue")
			data.EnableClearDon = types.BoolValue(v.Bool())
			data.EnableClearDonVariable = types.StringNull()
		}
	} else {
		data.EnableClearDon = types.BoolNull()
		data.EnableClearDonVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.network-broadcast.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.NetworkBroadcast1 = types.BoolNull()

			v := res.Get(path + "tunnel-interface.network-broadcast.vipVariableName")
			data.NetworkBroadcast1Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.NetworkBroadcast1 = types.BoolNull()
			data.NetworkBroadcast1Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.network-broadcast.vipValue")
			data.NetworkBroadcast1 = types.BoolValue(v.Bool())
			data.NetworkBroadcast1Variable = types.StringNull()
		}
	} else {
		data.NetworkBroadcast1 = types.BoolNull()
		data.NetworkBroadcast1Variable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.max-control-connections.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.MaxControlConnections = types.Int64Null()

			v := res.Get(path + "tunnel-interface.max-control-connections.vipVariableName")
			data.MaxControlConnectionsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.MaxControlConnections = types.Int64Null()
			data.MaxControlConnectionsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.max-control-connections.vipValue")
			data.MaxControlConnections = types.Int64Value(v.Int())
			data.MaxControlConnectionsVariable = types.StringNull()
		}
	} else {
		data.MaxControlConnections = types.Int64Null()
		data.MaxControlConnectionsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.vbond-as-stun-server.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.VbondAsStunServer = types.BoolNull()

			v := res.Get(path + "tunnel-interface.vbond-as-stun-server.vipVariableName")
			data.VbondAsStunServerVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.VbondAsStunServer = types.BoolNull()
			data.VbondAsStunServerVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.vbond-as-stun-server.vipValue")
			data.VbondAsStunServer = types.BoolValue(v.Bool())
			data.VbondAsStunServerVariable = types.StringNull()
		}
	} else {
		data.VbondAsStunServer = types.BoolNull()
		data.VbondAsStunServerVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.exclude-controller-group-list.vipType"); len(value.Array()) > 0 {
		if value.String() == "variableName" {
			data.ExcludeControllerGroupList = types.SetNull(types.Int64Type)

			v := res.Get(path + "tunnel-interface.exclude-controller-group-list.vipVariableName")
			data.ExcludeControllerGroupListVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ExcludeControllerGroupList = types.SetNull(types.Int64Type)
			data.ExcludeControllerGroupListVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.exclude-controller-group-list.vipValue")
			data.ExcludeControllerGroupList = helpers.GetInt64Set(v.Array())
			data.ExcludeControllerGroupListVariable = types.StringNull()
		}
	} else {
		data.ExcludeControllerGroupList = types.SetNull(types.Int64Type)
		data.ExcludeControllerGroupListVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.vmanage-connection-preference.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.VmanageConnectionPreference = types.Int64Null()

			v := res.Get(path + "tunnel-interface.vmanage-connection-preference.vipVariableName")
			data.VmanageConnectionPreferenceVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.VmanageConnectionPreference = types.Int64Null()
			data.VmanageConnectionPreferenceVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.vmanage-connection-preference.vipValue")
			data.VmanageConnectionPreference = types.Int64Value(v.Int())
			data.VmanageConnectionPreferenceVariable = types.StringNull()
		}
	} else {
		data.VmanageConnectionPreference = types.Int64Null()
		data.VmanageConnectionPreferenceVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.port-hop.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PortHop = types.BoolNull()

			v := res.Get(path + "tunnel-interface.port-hop.vipVariableName")
			data.PortHopVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PortHop = types.BoolNull()
			data.PortHopVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.port-hop.vipValue")
			data.PortHop = types.BoolValue(v.Bool())
			data.PortHopVariable = types.StringNull()
		}
	} else {
		data.PortHop = types.BoolNull()
		data.PortHopVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.color.restrict.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Restrict = types.BoolNull()

			v := res.Get(path + "tunnel-interface.color.restrict.vipVariableName")
			data.RestrictVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Restrict = types.BoolNull()
			data.RestrictVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.color.restrict.vipValue")
			data.Restrict = types.BoolValue(v.Bool())
			data.RestrictVariable = types.StringNull()
		}
	} else {
		data.Restrict = types.BoolNull()
		data.RestrictVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.carrier.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Carrier = types.StringNull()

			v := res.Get(path + "tunnel-interface.carrier.vipVariableName")
			data.CarrierVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Carrier = types.StringNull()
			data.CarrierVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.carrier.vipValue")
			data.Carrier = types.StringValue(v.String())
			data.CarrierVariable = types.StringNull()
		}
	} else {
		data.Carrier = types.StringNull()
		data.CarrierVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.nat-refresh-interval.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.NatRefreshInterval = types.Int64Null()

			v := res.Get(path + "tunnel-interface.nat-refresh-interval.vipVariableName")
			data.NatRefreshIntervalVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.NatRefreshInterval = types.Int64Null()
			data.NatRefreshIntervalVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.nat-refresh-interval.vipValue")
			data.NatRefreshInterval = types.Int64Value(v.Int())
			data.NatRefreshIntervalVariable = types.StringNull()
		}
	} else {
		data.NatRefreshInterval = types.Int64Null()
		data.NatRefreshIntervalVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.hello-interval.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.HelloInterval = types.Int64Null()

			v := res.Get(path + "tunnel-interface.hello-interval.vipVariableName")
			data.HelloIntervalVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.HelloInterval = types.Int64Null()
			data.HelloIntervalVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.hello-interval.vipValue")
			data.HelloInterval = types.Int64Value(v.Int())
			data.HelloIntervalVariable = types.StringNull()
		}
	} else {
		data.HelloInterval = types.Int64Null()
		data.HelloIntervalVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.hello-tolerance.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.HelloTolerance = types.Int64Null()

			v := res.Get(path + "tunnel-interface.hello-tolerance.vipVariableName")
			data.HelloToleranceVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.HelloTolerance = types.Int64Null()
			data.HelloToleranceVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.hello-tolerance.vipValue")
			data.HelloTolerance = types.Int64Value(v.Int())
			data.HelloToleranceVariable = types.StringNull()
		}
	} else {
		data.HelloTolerance = types.Int64Null()
		data.HelloToleranceVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.bind.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.BindLoopbackTunnel = types.StringNull()

			v := res.Get(path + "tunnel-interface.bind.vipVariableName")
			data.BindLoopbackTunnelVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.BindLoopbackTunnel = types.StringNull()
			data.BindLoopbackTunnelVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.bind.vipValue")
			data.BindLoopbackTunnel = types.StringValue(v.String())
			data.BindLoopbackTunnelVariable = types.StringNull()
		}
	} else {
		data.BindLoopbackTunnel = types.StringNull()
		data.BindLoopbackTunnelVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.all.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.All = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.all.vipVariableName")
			data.AllVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.All = types.BoolNull()
			data.AllVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.all.vipValue")
			data.All = types.BoolValue(v.Bool())
			data.AllVariable = types.StringNull()
		}
	} else {
		data.All = types.BoolNull()
		data.AllVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.network-broadcast.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.NetworkBroadcast2 = types.BoolNull()

			v := res.Get(path + "tunnel-interface.network-broadcast.vipVariableName")
			data.NetworkBroadcast2Variable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.NetworkBroadcast2 = types.BoolNull()
			data.NetworkBroadcast2Variable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.network-broadcast.vipValue")
			data.NetworkBroadcast2 = types.BoolValue(v.Bool())
			data.NetworkBroadcast2Variable = types.StringNull()
		}
	} else {
		data.NetworkBroadcast2 = types.BoolNull()
		data.NetworkBroadcast2Variable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.bgp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Bgp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.bgp.vipVariableName")
			data.BgpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Bgp = types.BoolNull()
			data.BgpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.bgp.vipValue")
			data.Bgp = types.BoolValue(v.Bool())
			data.BgpVariable = types.StringNull()
		}
	} else {
		data.Bgp = types.BoolNull()
		data.BgpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.dhcp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Dhcp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.dhcp.vipVariableName")
			data.DhcpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Dhcp = types.BoolNull()
			data.DhcpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.dhcp.vipValue")
			data.Dhcp = types.BoolValue(v.Bool())
			data.DhcpVariable = types.StringNull()
		}
	} else {
		data.Dhcp = types.BoolNull()
		data.DhcpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.dns.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Dns = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.dns.vipVariableName")
			data.DnsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Dns = types.BoolNull()
			data.DnsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.dns.vipValue")
			data.Dns = types.BoolValue(v.Bool())
			data.DnsVariable = types.StringNull()
		}
	} else {
		data.Dns = types.BoolNull()
		data.DnsVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.icmp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Icmp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.icmp.vipVariableName")
			data.IcmpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Icmp = types.BoolNull()
			data.IcmpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.icmp.vipValue")
			data.Icmp = types.BoolValue(v.Bool())
			data.IcmpVariable = types.StringNull()
		}
	} else {
		data.Icmp = types.BoolNull()
		data.IcmpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.sshd.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ssh = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.sshd.vipVariableName")
			data.SshVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ssh = types.BoolNull()
			data.SshVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.sshd.vipValue")
			data.Ssh = types.BoolValue(v.Bool())
			data.SshVariable = types.StringNull()
		}
	} else {
		data.Ssh = types.BoolNull()
		data.SshVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.ntp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ntp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.ntp.vipVariableName")
			data.NtpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ntp = types.BoolNull()
			data.NtpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.ntp.vipValue")
			data.Ntp = types.BoolValue(v.Bool())
			data.NtpVariable = types.StringNull()
		}
	} else {
		data.Ntp = types.BoolNull()
		data.NtpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.netconf.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Netconf = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.netconf.vipVariableName")
			data.NetconfVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Netconf = types.BoolNull()
			data.NetconfVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.netconf.vipValue")
			data.Netconf = types.BoolValue(v.Bool())
			data.NetconfVariable = types.StringNull()
		}
	} else {
		data.Netconf = types.BoolNull()
		data.NetconfVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.ospf.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Ospf = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.ospf.vipVariableName")
			data.OspfVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Ospf = types.BoolNull()
			data.OspfVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.ospf.vipValue")
			data.Ospf = types.BoolValue(v.Bool())
			data.OspfVariable = types.StringNull()
		}
	} else {
		data.Ospf = types.BoolNull()
		data.OspfVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.stun.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Stun = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.stun.vipVariableName")
			data.StunVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Stun = types.BoolNull()
			data.StunVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.stun.vipValue")
			data.Stun = types.BoolValue(v.Bool())
			data.StunVariable = types.StringNull()
		}
	} else {
		data.Stun = types.BoolNull()
		data.StunVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.snmp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Snmp = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.snmp.vipVariableName")
			data.SnmpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Snmp = types.BoolNull()
			data.SnmpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.snmp.vipValue")
			data.Snmp = types.BoolValue(v.Bool())
			data.SnmpVariable = types.StringNull()
		}
	} else {
		data.Snmp = types.BoolNull()
		data.SnmpVariable = types.StringNull()
	}
	if value := res.Get(path + "tunnel-interface.allow-service.https.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Https = types.BoolNull()

			v := res.Get(path + "tunnel-interface.allow-service.https.vipVariableName")
			data.HttpsVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Https = types.BoolNull()
			data.HttpsVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tunnel-interface.allow-service.https.vipValue")
			data.Https = types.BoolValue(v.Bool())
			data.HttpsVariable = types.StringNull()
		}
	} else {
		data.Https = types.BoolNull()
		data.HttpsVariable = types.StringNull()
	}
	if value := res.Get(path + "clear-dont-fragment.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ClearDontFragmentBit = types.BoolNull()

			v := res.Get(path + "clear-dont-fragment.vipVariableName")
			data.ClearDontFragmentBitVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ClearDontFragmentBit = types.BoolNull()
			data.ClearDontFragmentBitVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "clear-dont-fragment.vipValue")
			data.ClearDontFragmentBit = types.BoolValue(v.Bool())
			data.ClearDontFragmentBitVariable = types.StringNull()
		}
	} else {
		data.ClearDontFragmentBit = types.BoolNull()
		data.ClearDontFragmentBitVariable = types.StringNull()
	}
	if value := res.Get(path + "pmtu.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.PmtuDiscovery = types.BoolNull()

			v := res.Get(path + "pmtu.vipVariableName")
			data.PmtuDiscoveryVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.PmtuDiscovery = types.BoolNull()
			data.PmtuDiscoveryVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "pmtu.vipValue")
			data.PmtuDiscovery = types.BoolValue(v.Bool())
			data.PmtuDiscoveryVariable = types.StringNull()
		}
	} else {
		data.PmtuDiscovery = types.BoolNull()
		data.PmtuDiscoveryVariable = types.StringNull()
	}
	if value := res.Get(path + "mtu.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.IpMtu = types.Int64Null()

			v := res.Get(path + "mtu.vipVariableName")
			data.IpMtuVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.IpMtu = types.Int64Null()
			data.IpMtuVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "mtu.vipValue")
			data.IpMtu = types.Int64Value(v.Int())
			data.IpMtuVariable = types.StringNull()
		}
	} else {
		data.IpMtu = types.Int64Null()
		data.IpMtuVariable = types.StringNull()
	}
	if value := res.Get(path + "static-ingress-qos.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.StaticIngressQos = types.Int64Null()

			v := res.Get(path + "static-ingress-qos.vipVariableName")
			data.StaticIngressQosVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.StaticIngressQos = types.Int64Null()
			data.StaticIngressQosVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "static-ingress-qos.vipValue")
			data.StaticIngressQos = types.Int64Value(v.Int())
			data.StaticIngressQosVariable = types.StringNull()
		}
	} else {
		data.StaticIngressQos = types.Int64Null()
		data.StaticIngressQosVariable = types.StringNull()
	}
	if value := res.Get(path + "tcp-mss-adjust.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TcpMss = types.Int64Null()

			v := res.Get(path + "tcp-mss-adjust.vipVariableName")
			data.TcpMssVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TcpMss = types.Int64Null()
			data.TcpMssVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tcp-mss-adjust.vipValue")
			data.TcpMss = types.Int64Value(v.Int())
			data.TcpMssVariable = types.StringNull()
		}
	} else {
		data.TcpMss = types.Int64Null()
		data.TcpMssVariable = types.StringNull()
	}
	if value := res.Get(path + "tloc-extension.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.TlocExtension = types.StringNull()

			v := res.Get(path + "tloc-extension.vipVariableName")
			data.TlocExtensionVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.TlocExtension = types.StringNull()
			data.TlocExtensionVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "tloc-extension.vipValue")
			data.TlocExtension = types.StringValue(v.String())
			data.TlocExtensionVariable = types.StringNull()
		}
	} else {
		data.TlocExtension = types.StringNull()
		data.TlocExtensionVariable = types.StringNull()
	}
	if value := res.Get(path + "shutdown.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.AdministrativeShutdown = types.BoolNull()

			v := res.Get(path + "shutdown.vipVariableName")
			data.AdministrativeShutdownVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.AdministrativeShutdown = types.BoolNull()
			data.AdministrativeShutdownVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "shutdown.vipValue")
			data.AdministrativeShutdown = types.BoolValue(v.Bool())
			data.AdministrativeShutdownVariable = types.StringNull()
		}
	} else {
		data.AdministrativeShutdown = types.BoolNull()
		data.AdministrativeShutdownVariable = types.StringNull()
	}
	if value := res.Get(path + "autonegotiate.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.LinkAutonegotiate = types.BoolNull()

			v := res.Get(path + "autonegotiate.vipVariableName")
			data.LinkAutonegotiateVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.LinkAutonegotiate = types.BoolNull()
			data.LinkAutonegotiateVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "autonegotiate.vipValue")
			data.LinkAutonegotiate = types.BoolValue(v.Bool())
			data.LinkAutonegotiateVariable = types.StringNull()
		}
	} else {
		data.LinkAutonegotiate = types.BoolNull()
		data.LinkAutonegotiateVariable = types.StringNull()
	}
	if value := res.Get(path + "shaping-rate.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ShapingRate = types.Int64Null()

			v := res.Get(path + "shaping-rate.vipVariableName")
			data.ShapingRateVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ShapingRate = types.Int64Null()
			data.ShapingRateVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "shaping-rate.vipValue")
			data.ShapingRate = types.Int64Value(v.Int())
			data.ShapingRateVariable = types.StringNull()
		}
	} else {
		data.ShapingRate = types.Int64Null()
		data.ShapingRateVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-map.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.QosMap = types.StringNull()

			v := res.Get(path + "qos-map.vipVariableName")
			data.QosMapVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.QosMap = types.StringNull()
			data.QosMapVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-map.vipValue")
			data.QosMap = types.StringValue(v.String())
			data.QosMapVariable = types.StringNull()
		}
	} else {
		data.QosMap = types.StringNull()
		data.QosMapVariable = types.StringNull()
	}
	if value := res.Get(path + "qos-map-vpn.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.VpnQosMap = types.StringNull()

			v := res.Get(path + "qos-map-vpn.vipVariableName")
			data.VpnQosMapVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.VpnQosMap = types.StringNull()
			data.VpnQosMapVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "qos-map-vpn.vipValue")
			data.VpnQosMap = types.StringValue(v.String())
			data.VpnQosMapVariable = types.StringNull()
		}
	} else {
		data.VpnQosMap = types.StringNull()
		data.VpnQosMapVariable = types.StringNull()
	}
	if value := res.Get(path + "bandwidth.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.InterfaceBandwidthCapacity = types.Int64Null()

			v := res.Get(path + "bandwidth.vipVariableName")
			data.InterfaceBandwidthCapacityVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.InterfaceBandwidthCapacity = types.Int64Null()
			data.InterfaceBandwidthCapacityVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "bandwidth.vipValue")
			data.InterfaceBandwidthCapacity = types.Int64Value(v.Int())
			data.InterfaceBandwidthCapacityVariable = types.StringNull()
		}
	} else {
		data.InterfaceBandwidthCapacity = types.Int64Null()
		data.InterfaceBandwidthCapacityVariable = types.StringNull()
	}
	if value := res.Get(path + "clock-rate.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ClockRate = types.StringNull()

			v := res.Get(path + "clock-rate.vipVariableName")
			data.ClockRateVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ClockRate = types.StringNull()
			data.ClockRateVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "clock-rate.vipValue")
			data.ClockRate = types.StringValue(v.String())
			data.ClockRateVariable = types.StringNull()
		}
	} else {
		data.ClockRate = types.StringNull()
		data.ClockRateVariable = types.StringNull()
	}
	if value := res.Get(path + "encapsulation-serial.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.Encapsulation = types.StringNull()

			v := res.Get(path + "encapsulation-serial.vipVariableName")
			data.EncapsulationVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.Encapsulation = types.StringNull()
			data.EncapsulationVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "encapsulation-serial.vipValue")
			data.Encapsulation = types.StringValue(v.String())
			data.EncapsulationVariable = types.StringNull()
		}
	} else {
		data.Encapsulation = types.StringNull()
		data.EncapsulationVariable = types.StringNull()
	}
	if value := res.Get(path + "bandwidth-downstream.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.InterfaceDownstreamBandwidthCapacity = types.Int64Null()

			v := res.Get(path + "bandwidth-downstream.vipVariableName")
			data.InterfaceDownstreamBandwidthCapacityVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.InterfaceDownstreamBandwidthCapacity = types.Int64Null()
			data.InterfaceDownstreamBandwidthCapacityVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "bandwidth-downstream.vipValue")
			data.InterfaceDownstreamBandwidthCapacity = types.Int64Value(v.Int())
			data.InterfaceDownstreamBandwidthCapacityVariable = types.StringNull()
		}
	} else {
		data.InterfaceDownstreamBandwidthCapacity = types.Int64Null()
		data.InterfaceDownstreamBandwidthCapacityVariable = types.StringNull()
	}
	if value := res.Get(path + "rewrite-rule.rule-name.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.WriteRule = types.StringNull()

			v := res.Get(path + "rewrite-rule.rule-name.vipVariableName")
			data.WriteRuleVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.WriteRule = types.StringNull()
			data.WriteRuleVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "rewrite-rule.rule-name.vipValue")
			data.WriteRule = types.StringValue(v.String())
			data.WriteRuleVariable = types.StringNull()
		}
	} else {
		data.WriteRule = types.StringNull()
		data.WriteRuleVariable = types.StringNull()
	}
	if value := res.Get(path + "access-list.vipValue"); len(value.Array()) > 0 {
		data.AccessList = make([]VPNInterfaceT1E1SerialAccessList, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VPNInterfaceT1E1SerialAccessList{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("direction.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.Direction = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("direction.vipValue")
					item.Direction = types.StringValue(cv.String())

				}
			} else {
				item.Direction = types.StringNull()

			}
			if cValue := v.Get("acl-name.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.AclName = types.StringNull()

					cv := v.Get("acl-name.vipVariableName")
					item.AclNameVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.AclName = types.StringNull()
					item.AclNameVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("acl-name.vipValue")
					item.AclName = types.StringValue(cv.String())
					item.AclNameVariable = types.StringNull()
				}
			} else {
				item.AclName = types.StringNull()
				item.AclNameVariable = types.StringNull()
			}
			data.AccessList = append(data.AccessList, item)
			return true
		})
	} else {
		data.AccessList = []VPNInterfaceT1E1SerialAccessList{}
	}
}

func (data *VPNInterfaceT1E1Serial) hasChanges(ctx context.Context, state *VPNInterfaceT1E1Serial) bool {
	hasChanges := false
	if !data.SerialInterfaceName.Equal(state.SerialInterfaceName) {
		hasChanges = true
	}
	if !data.InterfaceDescription.Equal(state.InterfaceDescription) {
		hasChanges = true
	}
	if !data.Ipv4Address.Equal(state.Ipv4Address) {
		hasChanges = true
	}
	if !data.Ipv6Address.Equal(state.Ipv6Address) {
		hasChanges = true
	}
	if len(data.Ipv6AccessLists) != len(state.Ipv6AccessLists) {
		hasChanges = true
	} else {
		for i := range data.Ipv6AccessLists {
			if !data.Ipv6AccessLists[i].Direction.Equal(state.Ipv6AccessLists[i].Direction) {
				hasChanges = true
			}
			if !data.Ipv6AccessLists[i].AclName.Equal(state.Ipv6AccessLists[i].AclName) {
				hasChanges = true
			}
		}
	}
	if !data.EnableCoreRegion.Equal(state.EnableCoreRegion) {
		hasChanges = true
	}
	if !data.CoreRegion.Equal(state.CoreRegion) {
		hasChanges = true
	}
	if !data.SecondaryRegion.Equal(state.SecondaryRegion) {
		hasChanges = true
	}
	if len(data.EncapsulationForTloc) != len(state.EncapsulationForTloc) {
		hasChanges = true
	} else {
		for i := range data.EncapsulationForTloc {
			if !data.EncapsulationForTloc[i].EncapsulationType.Equal(state.EncapsulationForTloc[i].EncapsulationType) {
				hasChanges = true
			}
			if !data.EncapsulationForTloc[i].Preference.Equal(state.EncapsulationForTloc[i].Preference) {
				hasChanges = true
			}
			if !data.EncapsulationForTloc[i].Weight.Equal(state.EncapsulationForTloc[i].Weight) {
				hasChanges = true
			}
		}
	}
	if !data.Groups.Equal(state.Groups) {
		hasChanges = true
	}
	if !data.Border.Equal(state.Border) {
		hasChanges = true
	}
	if !data.PerTunnelQos.Equal(state.PerTunnelQos) {
		hasChanges = true
	}
	if !data.PerTunnelQosAggregator.Equal(state.PerTunnelQosAggregator) {
		hasChanges = true
	}
	if !data.Color.Equal(state.Color) {
		hasChanges = true
	}
	if !data.LastResortCircuit.Equal(state.LastResortCircuit) {
		hasChanges = true
	}
	if !data.LowBandwidthLink.Equal(state.LowBandwidthLink) {
		hasChanges = true
	}
	if !data.TunnelTcpMss.Equal(state.TunnelTcpMss) {
		hasChanges = true
	}
	if !data.EnableClearDon.Equal(state.EnableClearDon) {
		hasChanges = true
	}
	if !data.NetworkBroadcast1.Equal(state.NetworkBroadcast1) {
		hasChanges = true
	}
	if !data.MaxControlConnections.Equal(state.MaxControlConnections) {
		hasChanges = true
	}
	if !data.VbondAsStunServer.Equal(state.VbondAsStunServer) {
		hasChanges = true
	}
	if !data.ExcludeControllerGroupList.Equal(state.ExcludeControllerGroupList) {
		hasChanges = true
	}
	if !data.VmanageConnectionPreference.Equal(state.VmanageConnectionPreference) {
		hasChanges = true
	}
	if !data.PortHop.Equal(state.PortHop) {
		hasChanges = true
	}
	if !data.Restrict.Equal(state.Restrict) {
		hasChanges = true
	}
	if !data.Carrier.Equal(state.Carrier) {
		hasChanges = true
	}
	if !data.NatRefreshInterval.Equal(state.NatRefreshInterval) {
		hasChanges = true
	}
	if !data.HelloInterval.Equal(state.HelloInterval) {
		hasChanges = true
	}
	if !data.HelloTolerance.Equal(state.HelloTolerance) {
		hasChanges = true
	}
	if !data.BindLoopbackTunnel.Equal(state.BindLoopbackTunnel) {
		hasChanges = true
	}
	if !data.All.Equal(state.All) {
		hasChanges = true
	}
	if !data.NetworkBroadcast2.Equal(state.NetworkBroadcast2) {
		hasChanges = true
	}
	if !data.Bgp.Equal(state.Bgp) {
		hasChanges = true
	}
	if !data.Dhcp.Equal(state.Dhcp) {
		hasChanges = true
	}
	if !data.Dns.Equal(state.Dns) {
		hasChanges = true
	}
	if !data.Icmp.Equal(state.Icmp) {
		hasChanges = true
	}
	if !data.Ssh.Equal(state.Ssh) {
		hasChanges = true
	}
	if !data.Ntp.Equal(state.Ntp) {
		hasChanges = true
	}
	if !data.Netconf.Equal(state.Netconf) {
		hasChanges = true
	}
	if !data.Ospf.Equal(state.Ospf) {
		hasChanges = true
	}
	if !data.Stun.Equal(state.Stun) {
		hasChanges = true
	}
	if !data.Snmp.Equal(state.Snmp) {
		hasChanges = true
	}
	if !data.Https.Equal(state.Https) {
		hasChanges = true
	}
	if !data.ClearDontFragmentBit.Equal(state.ClearDontFragmentBit) {
		hasChanges = true
	}
	if !data.PmtuDiscovery.Equal(state.PmtuDiscovery) {
		hasChanges = true
	}
	if !data.IpMtu.Equal(state.IpMtu) {
		hasChanges = true
	}
	if !data.StaticIngressQos.Equal(state.StaticIngressQos) {
		hasChanges = true
	}
	if !data.TcpMss.Equal(state.TcpMss) {
		hasChanges = true
	}
	if !data.TlocExtension.Equal(state.TlocExtension) {
		hasChanges = true
	}
	if !data.AdministrativeShutdown.Equal(state.AdministrativeShutdown) {
		hasChanges = true
	}
	if !data.LinkAutonegotiate.Equal(state.LinkAutonegotiate) {
		hasChanges = true
	}
	if !data.ShapingRate.Equal(state.ShapingRate) {
		hasChanges = true
	}
	if !data.QosMap.Equal(state.QosMap) {
		hasChanges = true
	}
	if !data.VpnQosMap.Equal(state.VpnQosMap) {
		hasChanges = true
	}
	if !data.InterfaceBandwidthCapacity.Equal(state.InterfaceBandwidthCapacity) {
		hasChanges = true
	}
	if !data.ClockRate.Equal(state.ClockRate) {
		hasChanges = true
	}
	if !data.Encapsulation.Equal(state.Encapsulation) {
		hasChanges = true
	}
	if !data.InterfaceDownstreamBandwidthCapacity.Equal(state.InterfaceDownstreamBandwidthCapacity) {
		hasChanges = true
	}
	if !data.WriteRule.Equal(state.WriteRule) {
		hasChanges = true
	}
	if len(data.AccessList) != len(state.AccessList) {
		hasChanges = true
	} else {
		for i := range data.AccessList {
			if !data.AccessList[i].Direction.Equal(state.AccessList[i].Direction) {
				hasChanges = true
			}
			if !data.AccessList[i].AclName.Equal(state.AccessList[i].AclName) {
				hasChanges = true
			}
		}
	}
	return hasChanges
}
