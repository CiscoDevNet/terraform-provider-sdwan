// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceSdwanSystemLoggingProfileParcel(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "disk_enable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "disk_file_size", "9"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "disk_file_rotate", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "tls_profile.0.profile", "test"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "tls_profile.0.tls_version", "TLSv1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "tls_profile.0.auth_type", "Server"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "server.0.name", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "server.0.vpn", "512"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "server.0.source_interface", "GigabitEthernet1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "server.0.priority", "informational"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "server.0.tls_enable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "server.0.tls_properties_custom_profile", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "server.0.tls_properties_profile", "test"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "ipv6_server.0.name", "1.1.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "ipv6_server.0.vpn", "512"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "ipv6_server.0.source_interface", "GigabitEthernet1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "ipv6_server.0.priority", "informational"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "ipv6_server.0.tls_enable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "ipv6_server.0.tls_properties_custom_profile", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.sdwan_system_logging_profile_parcel.test", "ipv6_server.0.tls_properties_profile", "test"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceSdwanSystemLoggingPrerequisitesProfileParcelConfig + testAccDataSourceSdwanSystemLoggingProfileParcelConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

const testAccDataSourceSdwanSystemLoggingPrerequisitesProfileParcelConfig = `
resource "sdwan_system_feature_profile" "test" {
  name = "TF_TEST"
  description = "Terraform test"
}
`

func testAccDataSourceSdwanSystemLoggingProfileParcelConfig() string {
	config := `resource "sdwan_system_logging_profile_parcel" "test" {` + "\n"
	config += ` name = "TF_TEST"` + "\n"
	config += ` description = "Terraform integration test"` + "\n"
	config += `	feature_profile_id = sdwan_system_feature_profile.test.id` + "\n"
	config += `	disk_enable = true` + "\n"
	config += `	disk_file_size = 9` + "\n"
	config += `	disk_file_rotate = 10` + "\n"
	config += `	tls_profile = [{` + "\n"
	config += `	  profile = "test"` + "\n"
	config += `	  tls_version = "TLSv1.1"` + "\n"
	config += `	  auth_type = "Server"` + "\n"
	config += `	  cipher_suite_list = ["aes-128-cbc-sha"]` + "\n"
	config += `	}]` + "\n"
	config += `	server = [{` + "\n"
	config += `	  name = "1.1.1.1"` + "\n"
	config += `	  vpn = 512` + "\n"
	config += `	  source_interface = "GigabitEthernet1"` + "\n"
	config += `	  priority = "informational"` + "\n"
	config += `	  tls_enable = true` + "\n"
	config += `	  tls_properties_custom_profile = false` + "\n"
	config += `	  tls_properties_profile = "test"` + "\n"
	config += `	}]` + "\n"
	config += `	ipv6_server = [{` + "\n"
	config += `	  name = "1.1.1.1"` + "\n"
	config += `	  vpn = 512` + "\n"
	config += `	  source_interface = "GigabitEthernet1"` + "\n"
	config += `	  priority = "informational"` + "\n"
	config += `	  tls_enable = true` + "\n"
	config += `	  tls_properties_custom_profile = false` + "\n"
	config += `	  tls_properties_profile = "test"` + "\n"
	config += `	}]` + "\n"
	config += `}` + "\n"

	config += `
		data "sdwan_system_logging_profile_parcel" "test" {
			id = sdwan_system_logging_profile_parcel.test.id
			feature_profile_id = sdwan_system_feature_profile.test.id
		}
	`
	return config
}
