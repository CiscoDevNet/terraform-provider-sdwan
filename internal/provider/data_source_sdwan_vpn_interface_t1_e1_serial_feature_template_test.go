// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceSdwanVPNInterfaceT1E1SerialFeatureTemplate(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceSdwanVPNInterfaceT1E1SerialFeatureTemplateConfig,
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "serial_interface_name", "Example"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "interface_description", "My description"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "ipv4_address", "1.2.3.4/24"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "ipv6_address", "2001:0:0:1::/64"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "ipv6_access_lists.0.direction", "in"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "ipv6_access_lists.0.acl_name", "ACL1"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "enable_core_region", "true"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "core_region", "core"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "secondary_region", "off"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "encapsulation_for_tloc.0.encapsulation_type", "gre"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "encapsulation_for_tloc.0.preference", "4294967"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "encapsulation_for_tloc.0.weight", "250"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "border", "true"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "per_tunnel_qos", "true"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "per_tunnel_qos_aggregator", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "color", "custom1"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "last_resort_circuit", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "low_bandwidth_link", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "tunnel_tcp_mss", "1460"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "enable_clear_don", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "network_broadcast_1", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "max_control_connections", "8"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "vbond_as_stun_server", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "vmanage_connection_preference", "5"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "port_hop", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "restrict", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "carrier", "carrier1"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "nat_refresh_interval", "15"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "hello_interval", "1000"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "hello_tolerance", "12"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "bind_loopback_tunnel", "12"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "all", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "network_broadcast_2", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "bgp", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "dhcp", "true"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "dns", "true"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "icmp", "true"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "ssh", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "ntp", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "netconf", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "ospf", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "stun", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "snmp", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "https", "true"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "clear_dont_fragment_bit", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "pmtu_discovery", "false"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "ip_mtu", "1500"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "static_ingress_qos", "6"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "tcp_mss", "720"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "tloc_extension", "tloc"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "administrative_shutdown", "true"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "link_autonegotiate", "true"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "shaping_rate", "10000000"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "qos_map", "test"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "vpn_qos_map", "test"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "interface_bandwidth_capacity", "128"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "clock_rate", "5300000"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "encapsulation", "hdlc"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "interface_downstream_bandwidth_capacity", "10000000"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "write_rule", "test_rule"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "access_list.0.direction", "in"),
					resource.TestCheckResourceAttr("data.sdwan_vpn_interface_t1_e1_serial_feature_template.test", "access_list.0.acl_name", "Egress ACL - IPv4"),
				),
			},
		},
	})
}

const testAccDataSourceSdwanVPNInterfaceT1E1SerialFeatureTemplateConfig = `

resource "sdwan_vpn_interface_t1_e1_serial_feature_template" "test" {
  name = "TF_TEST_MIN"
  description = "Terraform integration test"
  device_types = ["vedge-C8000V"]
  serial_interface_name = "Example"
  interface_description = "My description"
  ipv4_address = "1.2.3.4/24"
  ipv6_address = "2001:0:0:1::/64"
  ipv6_access_lists = [{
    direction = "in"
    acl_name = "ACL1"
  }]
  enable_core_region = true
  core_region = "core"
  secondary_region = "off"
  encapsulation_for_tloc = [{
    encapsulation_type = "gre"
    preference = 4294967
    weight = 250
  }]
  groups = [42949672]
  border = true
  per_tunnel_qos = true
  per_tunnel_qos_aggregator = false
  color = "custom1"
  last_resort_circuit = false
  low_bandwidth_link = false
  tunnel_tcp_mss = 1460
  enable_clear_don = false
  network_broadcast_1 = false
  max_control_connections = 8
  vbond_as_stun_server = false
  exclude_controller_group_list = [100]
  vmanage_connection_preference = 5
  port_hop = false
  restrict = false
  carrier = "carrier1"
  nat_refresh_interval = 15
  hello_interval = 1000
  hello_tolerance = 12
  bind_loopback_tunnel = "12"
  all = false
  network_broadcast_2 = false
  bgp = false
  dhcp = true
  dns = true
  icmp = true
  ssh = false
  ntp = false
  netconf = false
  ospf = false
  stun = false
  snmp = false
  https = true
  clear_dont_fragment_bit = false
  pmtu_discovery = false
  ip_mtu = 1500
  static_ingress_qos = 6
  tcp_mss = 720
  tloc_extension = "tloc"
  administrative_shutdown = true
  link_autonegotiate = true
  shaping_rate = 10000000
  qos_map = "test"
  vpn_qos_map = "test"
  interface_bandwidth_capacity = 128
  clock_rate = "5300000"
  encapsulation = "hdlc"
  interface_downstream_bandwidth_capacity = 10000000
  write_rule = "test_rule"
  access_list = [{
    direction = "in"
    acl_name = "Egress ACL - IPv4"
  }]
}

data "sdwan_vpn_interface_t1_e1_serial_feature_template" "test" {
  id = sdwan_vpn_interface_t1_e1_serial_feature_template.test.id
}
`
