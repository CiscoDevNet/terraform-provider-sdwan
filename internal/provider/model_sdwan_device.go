// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type Device struct {
	Id           types.String `tfsdk:"id"`
	DeviceId     types.String `tfsdk:"device_id"`
	Uuid         types.String `tfsdk:"uuid"`
	SiteId       types.String `tfsdk:"site_id"`
	SerialNumber types.String `tfsdk:"serial_number"`
	Hostname     types.String `tfsdk:"hostname"`
	Reachability types.String `tfsdk:"reachability"`
	Status       types.String `tfsdk:"status"`
	State        types.String `tfsdk:"state"`
}

func (data Device) toBody(ctx context.Context) string {
	body := ""
	if !data.DeviceId.IsNull() {
		body, _ = sjson.Set(body, "deviceId", data.DeviceId.ValueString())
	}
	if !data.Uuid.IsNull() {
		body, _ = sjson.Set(body, "uuid", data.Uuid.ValueString())
	}
	if !data.SiteId.IsNull() {
		body, _ = sjson.Set(body, "site-id", data.SiteId.ValueString())
	}
	if !data.SerialNumber.IsNull() {
		body, _ = sjson.Set(body, "", data.SerialNumber.ValueString())
	}
	if !data.Hostname.IsNull() {
		body, _ = sjson.Set(body, "host-name", data.Hostname.ValueString())
	}
	if !data.Reachability.IsNull() {
		body, _ = sjson.Set(body, "reachability", data.Reachability.ValueString())
	}
	if !data.Status.IsNull() {
		body, _ = sjson.Set(body, "status", data.Status.ValueString())
	}
	if !data.State.IsNull() {
		body, _ = sjson.Set(body, "state", data.State.ValueString())
	}
	return body
}

func (data *Device) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("deviceId"); value.Exists() {
		data.DeviceId = types.StringValue(value.String())
	} else {
		data.DeviceId = types.StringNull()
	}
	if value := res.Get("uuid"); value.Exists() {
		data.Uuid = types.StringValue(value.String())
	} else {
		data.Uuid = types.StringNull()
	}
	if value := res.Get("site-id"); value.Exists() {
		data.SiteId = types.StringValue(value.String())
	} else {
		data.SiteId = types.StringNull()
	}
	if value := res.Get(""); value.Exists() {
		data.SerialNumber = types.StringValue(value.String())
	} else {
		data.SerialNumber = types.StringNull()
	}
	if value := res.Get("host-name"); value.Exists() {
		data.Hostname = types.StringValue(value.String())
	} else {
		data.Hostname = types.StringNull()
	}
	if value := res.Get("reachability"); value.Exists() {
		data.Reachability = types.StringValue(value.String())
	} else {
		data.Reachability = types.StringNull()
	}
	if value := res.Get("status"); value.Exists() {
		data.Status = types.StringValue(value.String())
	} else {
		data.Status = types.StringNull()
	}
	if value := res.Get("state"); value.Exists() {
		data.State = types.StringValue(value.String())
	} else {
		data.State = types.StringNull()
	}
}

func (data *Device) hasChanges(ctx context.Context, state *Device) bool {
	hasChanges := false
	if !data.DeviceId.Equal(state.DeviceId) {
		hasChanges = true
	}
	if !data.Uuid.Equal(state.Uuid) {
		hasChanges = true
	}
	if !data.SiteId.Equal(state.SiteId) {
		hasChanges = true
	}
	if !data.SerialNumber.Equal(state.SerialNumber) {
		hasChanges = true
	}
	if !data.Hostname.Equal(state.Hostname) {
		hasChanges = true
	}
	if !data.Reachability.Equal(state.Reachability) {
		hasChanges = true
	}
	if !data.Status.Equal(state.Status) {
		hasChanges = true
	}
	if !data.State.Equal(state.State) {
		hasChanges = true
	}
	return hasChanges
}
