// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-sdwan/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type CiscoTrustSec struct {
	Id                              types.String                     `tfsdk:"id"`
	Version                         types.Int64                      `tfsdk:"version"`
	TemplateType                    types.String                     `tfsdk:"template_type"`
	Name                            types.String                     `tfsdk:"name"`
	Description                     types.String                     `tfsdk:"description"`
	DeviceTypes                     types.Set                        `tfsdk:"device_types"`
	DeviceSgt                       types.Int64                      `tfsdk:"device_sgt"`
	DeviceSgtVariable               types.String                     `tfsdk:"device_sgt_variable"`
	CredentialsId                   types.String                     `tfsdk:"credentials_id"`
	CredentialsIdVariable           types.String                     `tfsdk:"credentials_id_variable"`
	CredentialsPassword             types.String                     `tfsdk:"credentials_password"`
	CredentialsPasswordVariable     types.String                     `tfsdk:"credentials_password_variable"`
	EnableEnforcement               types.Bool                       `tfsdk:"enable_enforcement"`
	EnableEnforcementVariable       types.String                     `tfsdk:"enable_enforcement_variable"`
	EnableSxp                       types.Bool                       `tfsdk:"enable_sxp"`
	SxpSourceIp                     types.String                     `tfsdk:"sxp_source_ip"`
	SxpSourceIpVariable             types.String                     `tfsdk:"sxp_source_ip_variable"`
	SxpDefaultPassword              types.String                     `tfsdk:"sxp_default_password"`
	SxpDefaultPasswordVariable      types.String                     `tfsdk:"sxp_default_password_variable"`
	SxpKeyChain                     types.String                     `tfsdk:"sxp_key_chain"`
	SxpKeyChainVariable             types.String                     `tfsdk:"sxp_key_chain_variable"`
	SxpLogBindingChanges            types.Bool                       `tfsdk:"sxp_log_binding_changes"`
	SxpLogBindingChangesVariable    types.String                     `tfsdk:"sxp_log_binding_changes_variable"`
	SxpReconciliationPeriod         types.Int64                      `tfsdk:"sxp_reconciliation_period"`
	SxpReconciliationPeriodVariable types.String                     `tfsdk:"sxp_reconciliation_period_variable"`
	SxpRetryPeriod                  types.Int64                      `tfsdk:"sxp_retry_period"`
	SxpRetryPeriodVariable          types.String                     `tfsdk:"sxp_retry_period_variable"`
	SpeakerHoldTime                 types.Int64                      `tfsdk:"speaker_hold_time"`
	SpeakerHoldTimeVariable         types.String                     `tfsdk:"speaker_hold_time_variable"`
	ListenerHoldTimeMin             types.Int64                      `tfsdk:"listener_hold_time_min"`
	ListenerHoldTimeMinVariable     types.String                     `tfsdk:"listener_hold_time_min_variable"`
	ListenerHoldTimeMax             types.Int64                      `tfsdk:"listener_hold_time_max"`
	ListenerHoldTimeMaxVariable     types.String                     `tfsdk:"listener_hold_time_max_variable"`
	SxpNodeIdType                   types.String                     `tfsdk:"sxp_node_id_type"`
	SxpNodeId                       types.String                     `tfsdk:"sxp_node_id"`
	SxpNodeIdVariable               types.String                     `tfsdk:"sxp_node_id_variable"`
	SxpConnectionList               []CiscoTrustSecSxpConnectionList `tfsdk:"sxp_connection_list"`
}

type CiscoTrustSecSxpConnectionList struct {
	Optional                      types.Bool   `tfsdk:"optional"`
	ConnectionPeerIp              types.String `tfsdk:"connection_peer_ip"`
	ConnectionSourceIp            types.String `tfsdk:"connection_source_ip"`
	ConnectionSourceIpVariable    types.String `tfsdk:"connection_source_ip_variable"`
	ConnectionPresharedKey        types.String `tfsdk:"connection_preshared_key"`
	ConnectionMode                types.String `tfsdk:"connection_mode"`
	ConnectionModeType            types.String `tfsdk:"connection_mode_type"`
	ConnectionMinHoldTime         types.Int64  `tfsdk:"connection_min_hold_time"`
	ConnectionMinHoldTimeVariable types.String `tfsdk:"connection_min_hold_time_variable"`
	ConnectionMaxHoldTime         types.Int64  `tfsdk:"connection_max_hold_time"`
	ConnectionMaxHoldTimeVariable types.String `tfsdk:"connection_max_hold_time_variable"`
	ConnectionVpnId               types.Int64  `tfsdk:"connection_vpn_id"`
	ConnectionVpnIdVariable       types.String `tfsdk:"connection_vpn_id_variable"`
}

func (data CiscoTrustSec) getModel() string {
	return "cisco_trustsec"
}

func (data CiscoTrustSec) toBody(ctx context.Context) string {
	body := ""

	var device_types []string
	data.DeviceTypes.ElementsAs(ctx, &device_types, false)
	body, _ = sjson.Set(body, "deviceType", device_types)
	body, _ = sjson.Set(body, "factoryDefault", false)
	body, _ = sjson.Set(body, "templateDescription", data.Description.ValueString())
	body, _ = sjson.Set(body, "templateMinVersion", "15.0.0")
	body, _ = sjson.Set(body, "templateName", data.Name.ValueString())
	body, _ = sjson.Set(body, "templateType", "cisco_trustsec")
	body, _ = sjson.Set(body, "templateDefinition", map[string]interface{}{})

	path := "templateDefinition."

	if !data.DeviceSgtVariable.IsNull() {
		body, _ = sjson.Set(body, path+"device-sgt."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"device-sgt."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"device-sgt."+"vipVariableName", data.DeviceSgtVariable.ValueString())
	} else if data.DeviceSgt.IsNull() {
		body, _ = sjson.Set(body, path+"device-sgt."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"device-sgt."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"device-sgt."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"device-sgt."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"device-sgt."+"vipValue", data.DeviceSgt.ValueInt64())
	}

	if !data.CredentialsIdVariable.IsNull() {
		body, _ = sjson.Set(body, path+"credentials-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"credentials-id."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"credentials-id."+"vipVariableName", data.CredentialsIdVariable.ValueString())
	} else if data.CredentialsId.IsNull() {
		body, _ = sjson.Set(body, path+"credentials-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"credentials-id."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"credentials-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"credentials-id."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"credentials-id."+"vipValue", data.CredentialsId.ValueString())
	}

	if !data.CredentialsPasswordVariable.IsNull() {
		body, _ = sjson.Set(body, path+"credentials-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"credentials-password."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"credentials-password."+"vipVariableName", data.CredentialsPasswordVariable.ValueString())
	} else if data.CredentialsPassword.IsNull() {
		body, _ = sjson.Set(body, path+"credentials-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"credentials-password."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"credentials-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"credentials-password."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"credentials-password."+"vipValue", data.CredentialsPassword.ValueString())
	}

	if !data.EnableEnforcementVariable.IsNull() {
		body, _ = sjson.Set(body, path+"enable-enforcement."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"enable-enforcement."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"enable-enforcement."+"vipVariableName", data.EnableEnforcementVariable.ValueString())
	} else if data.EnableEnforcement.IsNull() {
		body, _ = sjson.Set(body, path+"enable-enforcement."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"enable-enforcement."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"enable-enforcement."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"enable-enforcement."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"enable-enforcement."+"vipValue", strconv.FormatBool(data.EnableEnforcement.ValueBool()))
	}
	if data.EnableSxp.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.enable-sxp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.enable-sxp."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.enable-sxp."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.enable-sxp."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.enable-sxp."+"vipValue", strconv.FormatBool(data.EnableSxp.ValueBool()))
	}

	if !data.SxpSourceIpVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-source-ip."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-source-ip."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-source-ip."+"vipVariableName", data.SxpSourceIpVariable.ValueString())
	} else if data.SxpSourceIp.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-source-ip."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-source-ip."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-source-ip."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-source-ip."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-source-ip."+"vipValue", data.SxpSourceIp.ValueString())
	}

	if !data.SxpDefaultPasswordVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-default-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-default-password."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-default-password."+"vipVariableName", data.SxpDefaultPasswordVariable.ValueString())
	} else if data.SxpDefaultPassword.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-default-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-default-password."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-default-password."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-default-password."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-default-password."+"vipValue", data.SxpDefaultPassword.ValueString())
	}

	if !data.SxpKeyChainVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-key-chain."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-key-chain."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-key-chain."+"vipVariableName", data.SxpKeyChainVariable.ValueString())
	} else if data.SxpKeyChain.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-key-chain."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-key-chain."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-key-chain."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-key-chain."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-key-chain."+"vipValue", data.SxpKeyChain.ValueString())
	}

	if !data.SxpLogBindingChangesVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-log-binding-changes."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-log-binding-changes."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-log-binding-changes."+"vipVariableName", data.SxpLogBindingChangesVariable.ValueString())
	} else if data.SxpLogBindingChanges.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-log-binding-changes."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-log-binding-changes."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-log-binding-changes."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-log-binding-changes."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-log-binding-changes."+"vipValue", strconv.FormatBool(data.SxpLogBindingChanges.ValueBool()))
	}

	if !data.SxpReconciliationPeriodVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-reconciliation-period."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-reconciliation-period."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-reconciliation-period."+"vipVariableName", data.SxpReconciliationPeriodVariable.ValueString())
	} else if data.SxpReconciliationPeriod.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-reconciliation-period."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-reconciliation-period."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-reconciliation-period."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-reconciliation-period."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-reconciliation-period."+"vipValue", data.SxpReconciliationPeriod.ValueInt64())
	}

	if !data.SxpRetryPeriodVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-retry-period."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-retry-period."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-retry-period."+"vipVariableName", data.SxpRetryPeriodVariable.ValueString())
	} else if data.SxpRetryPeriod.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-retry-period."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-retry-period."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-retry-period."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-retry-period."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-retry-period."+"vipValue", data.SxpRetryPeriod.ValueInt64())
	}

	if !data.SpeakerHoldTimeVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.speaker-hold-time."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.speaker-hold-time."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.speaker-hold-time."+"vipVariableName", data.SpeakerHoldTimeVariable.ValueString())
	} else if data.SpeakerHoldTime.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.speaker-hold-time."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.speaker-hold-time."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.speaker-hold-time."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.speaker-hold-time."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.speaker-hold-time."+"vipValue", data.SpeakerHoldTime.ValueInt64())
	}

	if !data.ListenerHoldTimeMinVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-min."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-min."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-min."+"vipVariableName", data.ListenerHoldTimeMinVariable.ValueString())
	} else if data.ListenerHoldTimeMin.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-min."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-min."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-min."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-min."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-min."+"vipValue", data.ListenerHoldTimeMin.ValueInt64())
	}

	if !data.ListenerHoldTimeMaxVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-max."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-max."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-max."+"vipVariableName", data.ListenerHoldTimeMaxVariable.ValueString())
	} else if data.ListenerHoldTimeMax.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-max."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-max."+"vipType", "ignore")
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-max."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-max."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.listener-hold-time-max."+"vipValue", data.ListenerHoldTimeMax.ValueInt64())
	}
	if data.SxpNodeIdType.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-node-id-type."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-node-id-type."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-node-id-type."+"vipValue", data.SxpNodeIdType.ValueString())
	}

	if !data.SxpNodeIdVariable.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-node-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-node-id."+"vipType", "variableName")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-node-id."+"vipVariableName", data.SxpNodeIdVariable.ValueString())
	} else if data.SxpNodeId.IsNull() {
		body, _ = sjson.Set(body, path+"sxp-default", map[string]interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"sxp-default.sxp-node-id."+"vipObjectType", "object")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-node-id."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-default.sxp-node-id."+"vipValue", data.SxpNodeId.ValueString())
	}
	if len(data.SxpConnectionList) > 0 {
		body, _ = sjson.Set(body, path+"sxp-connection-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"sxp-connection-list."+"vipType", "constant")
		body, _ = sjson.Set(body, path+"sxp-connection-list."+"vipPrimaryKey", []string{"connection-peer-ip"})
		body, _ = sjson.Set(body, path+"sxp-connection-list."+"vipValue", []interface{}{})
	} else {
		body, _ = sjson.Set(body, path+"sxp-connection-list."+"vipObjectType", "tree")
		body, _ = sjson.Set(body, path+"sxp-connection-list."+"vipType", "ignore")
		body, _ = sjson.Set(body, path+"sxp-connection-list."+"vipPrimaryKey", []string{"connection-peer-ip"})
		body, _ = sjson.Set(body, path+"sxp-connection-list."+"vipValue", []interface{}{})
	}
	for _, item := range data.SxpConnectionList {
		itemBody := ""
		itemAttributes := make([]string, 0)
		itemAttributes = append(itemAttributes, "connection-peer-ip")
		if item.ConnectionPeerIp.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "connection-peer-ip."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-peer-ip."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "connection-peer-ip."+"vipValue", item.ConnectionPeerIp.ValueString())
		}
		itemAttributes = append(itemAttributes, "connection-source-ip")

		if !item.ConnectionSourceIpVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "connection-source-ip."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-source-ip."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "connection-source-ip."+"vipVariableName", item.ConnectionSourceIpVariable.ValueString())
		} else if item.ConnectionSourceIp.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "connection-source-ip."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-source-ip."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "connection-source-ip."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-source-ip."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "connection-source-ip."+"vipValue", item.ConnectionSourceIp.ValueString())
		}
		itemAttributes = append(itemAttributes, "connection-preshared-key")
		if item.ConnectionPresharedKey.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "connection-preshared-key."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-preshared-key."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "connection-preshared-key."+"vipValue", item.ConnectionPresharedKey.ValueString())
		}
		itemAttributes = append(itemAttributes, "connection-mode")
		if item.ConnectionMode.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "connection-mode."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-mode."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "connection-mode."+"vipValue", item.ConnectionMode.ValueString())
		}
		itemAttributes = append(itemAttributes, "connection-mode-type")
		if item.ConnectionModeType.IsNull() {
		} else {
			itemBody, _ = sjson.Set(itemBody, "connection-mode-type."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-mode-type."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "connection-mode-type."+"vipValue", item.ConnectionModeType.ValueString())
		}
		itemAttributes = append(itemAttributes, "connection-min-hold-time")

		if !item.ConnectionMinHoldTimeVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "connection-min-hold-time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-min-hold-time."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "connection-min-hold-time."+"vipVariableName", item.ConnectionMinHoldTimeVariable.ValueString())
		} else if item.ConnectionMinHoldTime.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "connection-min-hold-time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-min-hold-time."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "connection-min-hold-time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-min-hold-time."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "connection-min-hold-time."+"vipValue", item.ConnectionMinHoldTime.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "connection-max-hold-time")

		if !item.ConnectionMaxHoldTimeVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "connection-max-hold-time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-max-hold-time."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "connection-max-hold-time."+"vipVariableName", item.ConnectionMaxHoldTimeVariable.ValueString())
		} else if item.ConnectionMaxHoldTime.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "connection-max-hold-time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-max-hold-time."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "connection-max-hold-time."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-max-hold-time."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "connection-max-hold-time."+"vipValue", item.ConnectionMaxHoldTime.ValueInt64())
		}
		itemAttributes = append(itemAttributes, "connection-vpn-id")

		if !item.ConnectionVpnIdVariable.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "connection-vpn-id."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-vpn-id."+"vipType", "variableName")
			itemBody, _ = sjson.Set(itemBody, "connection-vpn-id."+"vipVariableName", item.ConnectionVpnIdVariable.ValueString())
		} else if item.ConnectionVpnId.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "connection-vpn-id."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-vpn-id."+"vipType", "ignore")
		} else {
			itemBody, _ = sjson.Set(itemBody, "connection-vpn-id."+"vipObjectType", "object")
			itemBody, _ = sjson.Set(itemBody, "connection-vpn-id."+"vipType", "constant")
			itemBody, _ = sjson.Set(itemBody, "connection-vpn-id."+"vipValue", item.ConnectionVpnId.ValueInt64())
		}
		if !item.Optional.IsNull() {
			itemBody, _ = sjson.Set(itemBody, "vipOptional", item.Optional.ValueBool())
			itemBody, _ = sjson.Set(itemBody, "priority-order", itemAttributes)
		}
		body, _ = sjson.SetRaw(body, path+"sxp-connection-list."+"vipValue.-1", itemBody)
	}
	return body
}

func (data *CiscoTrustSec) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("deviceType"); value.Exists() {
		data.DeviceTypes = helpers.GetStringSet(value.Array())
	} else {
		data.DeviceTypes = types.SetNull(types.StringType)
	}
	if value := res.Get("templateDescription"); value.Exists() && value.String() != "" {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("templateName"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("templateType"); value.Exists() {
		data.TemplateType = types.StringValue(value.String())
	} else {
		data.TemplateType = types.StringNull()
	}

	path := "templateDefinition."
	if value := res.Get(path + "device-sgt.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.DeviceSgt = types.Int64Null()

			v := res.Get(path + "device-sgt.vipVariableName")
			data.DeviceSgtVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.DeviceSgt = types.Int64Null()
			data.DeviceSgtVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "device-sgt.vipValue")
			data.DeviceSgt = types.Int64Value(v.Int())
			data.DeviceSgtVariable = types.StringNull()
		}
	} else {
		data.DeviceSgt = types.Int64Null()
		data.DeviceSgtVariable = types.StringNull()
	}
	if value := res.Get(path + "credentials-id.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.CredentialsId = types.StringNull()

			v := res.Get(path + "credentials-id.vipVariableName")
			data.CredentialsIdVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.CredentialsId = types.StringNull()
			data.CredentialsIdVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "credentials-id.vipValue")
			data.CredentialsId = types.StringValue(v.String())
			data.CredentialsIdVariable = types.StringNull()
		}
	} else {
		data.CredentialsId = types.StringNull()
		data.CredentialsIdVariable = types.StringNull()
	}
	if value := res.Get(path + "credentials-password.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.CredentialsPassword = types.StringNull()

			v := res.Get(path + "credentials-password.vipVariableName")
			data.CredentialsPasswordVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.CredentialsPassword = types.StringNull()
			data.CredentialsPasswordVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "credentials-password.vipValue")
			data.CredentialsPassword = types.StringValue(v.String())
			data.CredentialsPasswordVariable = types.StringNull()
		}
	} else {
		data.CredentialsPassword = types.StringNull()
		data.CredentialsPasswordVariable = types.StringNull()
	}
	if value := res.Get(path + "enable-enforcement.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.EnableEnforcement = types.BoolNull()

			v := res.Get(path + "enable-enforcement.vipVariableName")
			data.EnableEnforcementVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.EnableEnforcement = types.BoolNull()
			data.EnableEnforcementVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "enable-enforcement.vipValue")
			data.EnableEnforcement = types.BoolValue(v.Bool())
			data.EnableEnforcementVariable = types.StringNull()
		}
	} else {
		data.EnableEnforcement = types.BoolNull()
		data.EnableEnforcementVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.enable-sxp.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.EnableSxp = types.BoolNull()

		} else if value.String() == "ignore" {
			data.EnableSxp = types.BoolNull()

		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.enable-sxp.vipValue")
			data.EnableSxp = types.BoolValue(v.Bool())

		}
	} else {
		data.EnableSxp = types.BoolNull()

	}
	if value := res.Get(path + "sxp-default.sxp-source-ip.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SxpSourceIp = types.StringNull()

			v := res.Get(path + "sxp-default.sxp-source-ip.vipVariableName")
			data.SxpSourceIpVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SxpSourceIp = types.StringNull()
			data.SxpSourceIpVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.sxp-source-ip.vipValue")
			data.SxpSourceIp = types.StringValue(v.String())
			data.SxpSourceIpVariable = types.StringNull()
		}
	} else {
		data.SxpSourceIp = types.StringNull()
		data.SxpSourceIpVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.sxp-default-password.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SxpDefaultPassword = types.StringNull()

			v := res.Get(path + "sxp-default.sxp-default-password.vipVariableName")
			data.SxpDefaultPasswordVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SxpDefaultPassword = types.StringNull()
			data.SxpDefaultPasswordVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.sxp-default-password.vipValue")
			data.SxpDefaultPassword = types.StringValue(v.String())
			data.SxpDefaultPasswordVariable = types.StringNull()
		}
	} else {
		data.SxpDefaultPassword = types.StringNull()
		data.SxpDefaultPasswordVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.sxp-key-chain.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SxpKeyChain = types.StringNull()

			v := res.Get(path + "sxp-default.sxp-key-chain.vipVariableName")
			data.SxpKeyChainVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SxpKeyChain = types.StringNull()
			data.SxpKeyChainVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.sxp-key-chain.vipValue")
			data.SxpKeyChain = types.StringValue(v.String())
			data.SxpKeyChainVariable = types.StringNull()
		}
	} else {
		data.SxpKeyChain = types.StringNull()
		data.SxpKeyChainVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.sxp-log-binding-changes.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SxpLogBindingChanges = types.BoolNull()

			v := res.Get(path + "sxp-default.sxp-log-binding-changes.vipVariableName")
			data.SxpLogBindingChangesVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SxpLogBindingChanges = types.BoolNull()
			data.SxpLogBindingChangesVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.sxp-log-binding-changes.vipValue")
			data.SxpLogBindingChanges = types.BoolValue(v.Bool())
			data.SxpLogBindingChangesVariable = types.StringNull()
		}
	} else {
		data.SxpLogBindingChanges = types.BoolNull()
		data.SxpLogBindingChangesVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.sxp-reconciliation-period.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SxpReconciliationPeriod = types.Int64Null()

			v := res.Get(path + "sxp-default.sxp-reconciliation-period.vipVariableName")
			data.SxpReconciliationPeriodVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SxpReconciliationPeriod = types.Int64Null()
			data.SxpReconciliationPeriodVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.sxp-reconciliation-period.vipValue")
			data.SxpReconciliationPeriod = types.Int64Value(v.Int())
			data.SxpReconciliationPeriodVariable = types.StringNull()
		}
	} else {
		data.SxpReconciliationPeriod = types.Int64Null()
		data.SxpReconciliationPeriodVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.sxp-retry-period.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SxpRetryPeriod = types.Int64Null()

			v := res.Get(path + "sxp-default.sxp-retry-period.vipVariableName")
			data.SxpRetryPeriodVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SxpRetryPeriod = types.Int64Null()
			data.SxpRetryPeriodVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.sxp-retry-period.vipValue")
			data.SxpRetryPeriod = types.Int64Value(v.Int())
			data.SxpRetryPeriodVariable = types.StringNull()
		}
	} else {
		data.SxpRetryPeriod = types.Int64Null()
		data.SxpRetryPeriodVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.speaker-hold-time.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SpeakerHoldTime = types.Int64Null()

			v := res.Get(path + "sxp-default.speaker-hold-time.vipVariableName")
			data.SpeakerHoldTimeVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SpeakerHoldTime = types.Int64Null()
			data.SpeakerHoldTimeVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.speaker-hold-time.vipValue")
			data.SpeakerHoldTime = types.Int64Value(v.Int())
			data.SpeakerHoldTimeVariable = types.StringNull()
		}
	} else {
		data.SpeakerHoldTime = types.Int64Null()
		data.SpeakerHoldTimeVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.listener-hold-time-min.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ListenerHoldTimeMin = types.Int64Null()

			v := res.Get(path + "sxp-default.listener-hold-time-min.vipVariableName")
			data.ListenerHoldTimeMinVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ListenerHoldTimeMin = types.Int64Null()
			data.ListenerHoldTimeMinVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.listener-hold-time-min.vipValue")
			data.ListenerHoldTimeMin = types.Int64Value(v.Int())
			data.ListenerHoldTimeMinVariable = types.StringNull()
		}
	} else {
		data.ListenerHoldTimeMin = types.Int64Null()
		data.ListenerHoldTimeMinVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.listener-hold-time-max.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.ListenerHoldTimeMax = types.Int64Null()

			v := res.Get(path + "sxp-default.listener-hold-time-max.vipVariableName")
			data.ListenerHoldTimeMaxVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.ListenerHoldTimeMax = types.Int64Null()
			data.ListenerHoldTimeMaxVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.listener-hold-time-max.vipValue")
			data.ListenerHoldTimeMax = types.Int64Value(v.Int())
			data.ListenerHoldTimeMaxVariable = types.StringNull()
		}
	} else {
		data.ListenerHoldTimeMax = types.Int64Null()
		data.ListenerHoldTimeMaxVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-default.sxp-node-id-type.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SxpNodeIdType = types.StringNull()

		} else if value.String() == "ignore" {
			data.SxpNodeIdType = types.StringNull()

		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.sxp-node-id-type.vipValue")
			data.SxpNodeIdType = types.StringValue(v.String())

		}
	} else {
		data.SxpNodeIdType = types.StringNull()

	}
	if value := res.Get(path + "sxp-default.sxp-node-id.vipType"); value.Exists() {
		if value.String() == "variableName" {
			data.SxpNodeId = types.StringNull()

			v := res.Get(path + "sxp-default.sxp-node-id.vipVariableName")
			data.SxpNodeIdVariable = types.StringValue(v.String())

		} else if value.String() == "ignore" {
			data.SxpNodeId = types.StringNull()
			data.SxpNodeIdVariable = types.StringNull()
		} else if value.String() == "constant" {
			v := res.Get(path + "sxp-default.sxp-node-id.vipValue")
			data.SxpNodeId = types.StringValue(v.String())
			data.SxpNodeIdVariable = types.StringNull()
		}
	} else {
		data.SxpNodeId = types.StringNull()
		data.SxpNodeIdVariable = types.StringNull()
	}
	if value := res.Get(path + "sxp-connection-list.vipValue"); len(value.Array()) > 0 {
		data.SxpConnectionList = make([]CiscoTrustSecSxpConnectionList, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CiscoTrustSecSxpConnectionList{}
			if cValue := v.Get("vipOptional"); cValue.Exists() {
				item.Optional = types.BoolValue(cValue.Bool())
			} else {
				item.Optional = types.BoolNull()
			}
			if cValue := v.Get("connection-peer-ip.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ConnectionPeerIp = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.ConnectionPeerIp = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("connection-peer-ip.vipValue")
					item.ConnectionPeerIp = types.StringValue(cv.String())

				}
			} else {
				item.ConnectionPeerIp = types.StringNull()

			}
			if cValue := v.Get("connection-source-ip.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ConnectionSourceIp = types.StringNull()

					cv := v.Get("connection-source-ip.vipVariableName")
					item.ConnectionSourceIpVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ConnectionSourceIp = types.StringNull()
					item.ConnectionSourceIpVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("connection-source-ip.vipValue")
					item.ConnectionSourceIp = types.StringValue(cv.String())
					item.ConnectionSourceIpVariable = types.StringNull()
				}
			} else {
				item.ConnectionSourceIp = types.StringNull()
				item.ConnectionSourceIpVariable = types.StringNull()
			}
			if cValue := v.Get("connection-preshared-key.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ConnectionPresharedKey = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.ConnectionPresharedKey = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("connection-preshared-key.vipValue")
					item.ConnectionPresharedKey = types.StringValue(cv.String())

				}
			} else {
				item.ConnectionPresharedKey = types.StringNull()

			}
			if cValue := v.Get("connection-mode.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ConnectionMode = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.ConnectionMode = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("connection-mode.vipValue")
					item.ConnectionMode = types.StringValue(cv.String())

				}
			} else {
				item.ConnectionMode = types.StringNull()

			}
			if cValue := v.Get("connection-mode-type.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ConnectionModeType = types.StringNull()

				} else if cValue.String() == "ignore" {
					item.ConnectionModeType = types.StringNull()

				} else if cValue.String() == "constant" {
					cv := v.Get("connection-mode-type.vipValue")
					item.ConnectionModeType = types.StringValue(cv.String())

				}
			} else {
				item.ConnectionModeType = types.StringNull()

			}
			if cValue := v.Get("connection-min-hold-time.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ConnectionMinHoldTime = types.Int64Null()

					cv := v.Get("connection-min-hold-time.vipVariableName")
					item.ConnectionMinHoldTimeVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ConnectionMinHoldTime = types.Int64Null()
					item.ConnectionMinHoldTimeVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("connection-min-hold-time.vipValue")
					item.ConnectionMinHoldTime = types.Int64Value(cv.Int())
					item.ConnectionMinHoldTimeVariable = types.StringNull()
				}
			} else {
				item.ConnectionMinHoldTime = types.Int64Null()
				item.ConnectionMinHoldTimeVariable = types.StringNull()
			}
			if cValue := v.Get("connection-max-hold-time.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ConnectionMaxHoldTime = types.Int64Null()

					cv := v.Get("connection-max-hold-time.vipVariableName")
					item.ConnectionMaxHoldTimeVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ConnectionMaxHoldTime = types.Int64Null()
					item.ConnectionMaxHoldTimeVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("connection-max-hold-time.vipValue")
					item.ConnectionMaxHoldTime = types.Int64Value(cv.Int())
					item.ConnectionMaxHoldTimeVariable = types.StringNull()
				}
			} else {
				item.ConnectionMaxHoldTime = types.Int64Null()
				item.ConnectionMaxHoldTimeVariable = types.StringNull()
			}
			if cValue := v.Get("connection-vpn-id.vipType"); cValue.Exists() {
				if cValue.String() == "variableName" {
					item.ConnectionVpnId = types.Int64Null()

					cv := v.Get("connection-vpn-id.vipVariableName")
					item.ConnectionVpnIdVariable = types.StringValue(cv.String())

				} else if cValue.String() == "ignore" {
					item.ConnectionVpnId = types.Int64Null()
					item.ConnectionVpnIdVariable = types.StringNull()
				} else if cValue.String() == "constant" {
					cv := v.Get("connection-vpn-id.vipValue")
					item.ConnectionVpnId = types.Int64Value(cv.Int())
					item.ConnectionVpnIdVariable = types.StringNull()
				}
			} else {
				item.ConnectionVpnId = types.Int64Null()
				item.ConnectionVpnIdVariable = types.StringNull()
			}
			data.SxpConnectionList = append(data.SxpConnectionList, item)
			return true
		})
	}
}

func (data *CiscoTrustSec) hasChanges(ctx context.Context, state *CiscoTrustSec) bool {
	hasChanges := false
	if !data.DeviceSgt.Equal(state.DeviceSgt) {
		hasChanges = true
	}
	if !data.CredentialsId.Equal(state.CredentialsId) {
		hasChanges = true
	}
	if !data.CredentialsPassword.Equal(state.CredentialsPassword) {
		hasChanges = true
	}
	if !data.EnableEnforcement.Equal(state.EnableEnforcement) {
		hasChanges = true
	}
	if !data.EnableSxp.Equal(state.EnableSxp) {
		hasChanges = true
	}
	if !data.SxpSourceIp.Equal(state.SxpSourceIp) {
		hasChanges = true
	}
	if !data.SxpDefaultPassword.Equal(state.SxpDefaultPassword) {
		hasChanges = true
	}
	if !data.SxpKeyChain.Equal(state.SxpKeyChain) {
		hasChanges = true
	}
	if !data.SxpLogBindingChanges.Equal(state.SxpLogBindingChanges) {
		hasChanges = true
	}
	if !data.SxpReconciliationPeriod.Equal(state.SxpReconciliationPeriod) {
		hasChanges = true
	}
	if !data.SxpRetryPeriod.Equal(state.SxpRetryPeriod) {
		hasChanges = true
	}
	if !data.SpeakerHoldTime.Equal(state.SpeakerHoldTime) {
		hasChanges = true
	}
	if !data.ListenerHoldTimeMin.Equal(state.ListenerHoldTimeMin) {
		hasChanges = true
	}
	if !data.ListenerHoldTimeMax.Equal(state.ListenerHoldTimeMax) {
		hasChanges = true
	}
	if !data.SxpNodeIdType.Equal(state.SxpNodeIdType) {
		hasChanges = true
	}
	if !data.SxpNodeId.Equal(state.SxpNodeId) {
		hasChanges = true
	}
	if len(data.SxpConnectionList) != len(state.SxpConnectionList) {
		hasChanges = true
	} else {
		for i := range data.SxpConnectionList {
			if !data.SxpConnectionList[i].ConnectionPeerIp.Equal(state.SxpConnectionList[i].ConnectionPeerIp) {
				hasChanges = true
			}
			if !data.SxpConnectionList[i].ConnectionSourceIp.Equal(state.SxpConnectionList[i].ConnectionSourceIp) {
				hasChanges = true
			}
			if !data.SxpConnectionList[i].ConnectionPresharedKey.Equal(state.SxpConnectionList[i].ConnectionPresharedKey) {
				hasChanges = true
			}
			if !data.SxpConnectionList[i].ConnectionMode.Equal(state.SxpConnectionList[i].ConnectionMode) {
				hasChanges = true
			}
			if !data.SxpConnectionList[i].ConnectionModeType.Equal(state.SxpConnectionList[i].ConnectionModeType) {
				hasChanges = true
			}
			if !data.SxpConnectionList[i].ConnectionMinHoldTime.Equal(state.SxpConnectionList[i].ConnectionMinHoldTime) {
				hasChanges = true
			}
			if !data.SxpConnectionList[i].ConnectionMaxHoldTime.Equal(state.SxpConnectionList[i].ConnectionMaxHoldTime) {
				hasChanges = true
			}
			if !data.SxpConnectionList[i].ConnectionVpnId.Equal(state.SxpConnectionList[i].ConnectionVpnId) {
				hasChanges = true
			}
		}
	}
	return hasChanges
}
