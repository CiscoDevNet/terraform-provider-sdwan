// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"

	"github.com/CiscoDevNet/terraform-provider-sdwan/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type URLFilteringPolicyDefinition struct {
	Id                  types.String `tfsdk:"id"`
	Version             types.Int64  `tfsdk:"version"`
	Name                types.String `tfsdk:"name"`
	Description         types.String `tfsdk:"description"`
	Mode                types.String `tfsdk:"mode"`
	Alerts              types.List   `tfsdk:"alerts"`
	WebCategories       types.List   `tfsdk:"web_categories"`
	WebCategoriesAction types.String `tfsdk:"web_categories_action"`
	WebReputation       types.String `tfsdk:"web_reputation"`
	TargetVpns          types.List   `tfsdk:"target_vpns"`
	UrlWhiteListId      types.String `tfsdk:"url_white_list_id"`
	UrlBlackListId      types.String `tfsdk:"url_black_list_id"`
	BlockPageAction     types.String `tfsdk:"block_page_action"`
	BlockPageContents   types.String `tfsdk:"block_page_contents"`
}

func (data URLFilteringPolicyDefinition) toBody(ctx context.Context) string {
	body := ""
	body, _ = sjson.Set(body, "type", "urlFiltering")
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "name", data.Name.ValueString())
	}
	if !data.Description.IsNull() {
		body, _ = sjson.Set(body, "description", data.Description.ValueString())
	}
	if !data.Mode.IsNull() {
		body, _ = sjson.Set(body, "mode", data.Mode.ValueString())
	}
	if !data.Alerts.IsNull() {
		var values []string
		data.Alerts.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "definition.alerts", values)
	}
	if !data.WebCategories.IsNull() {
		var values []string
		data.WebCategories.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "definition.webCategories", values)
	}
	if !data.WebCategoriesAction.IsNull() {
		body, _ = sjson.Set(body, "definition.webCategoriesAction", data.WebCategoriesAction.ValueString())
	}
	if !data.WebReputation.IsNull() {
		body, _ = sjson.Set(body, "definition.webReputation", data.WebReputation.ValueString())
	}
	if !data.TargetVpns.IsNull() {
		var values []string
		data.TargetVpns.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "definition.targetVpns", values)
	}
	if !data.UrlWhiteListId.IsNull() {
		body, _ = sjson.Set(body, "definition.urlWhiteList.ref", data.UrlWhiteListId.ValueString())
	}
	if !data.UrlBlackListId.IsNull() {
		body, _ = sjson.Set(body, "definition.urlBlackList.ref", data.UrlBlackListId.ValueString())
	}
	if !data.BlockPageAction.IsNull() {
		body, _ = sjson.Set(body, "definition.blockPageAction", data.BlockPageAction.ValueString())
	}
	if !data.BlockPageContents.IsNull() {
		body, _ = sjson.Set(body, "definition.blockPageContents", data.BlockPageContents.ValueString())
	}
	return body
}

func (data *URLFilteringPolicyDefinition) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get("mode"); value.Exists() {
		data.Mode = types.StringValue(value.String())
	} else {
		data.Mode = types.StringNull()
	}
	if value := res.Get("definition.alerts"); value.Exists() {
		data.Alerts = helpers.GetStringList(value.Array())
	} else {
		data.Alerts = types.ListNull(types.StringType)
	}
	if value := res.Get("definition.webCategories"); value.Exists() {
		data.WebCategories = helpers.GetStringList(value.Array())
	} else {
		data.WebCategories = types.ListNull(types.StringType)
	}
	if value := res.Get("definition.webCategoriesAction"); value.Exists() {
		data.WebCategoriesAction = types.StringValue(value.String())
	} else {
		data.WebCategoriesAction = types.StringNull()
	}
	if value := res.Get("definition.webReputation"); value.Exists() {
		data.WebReputation = types.StringValue(value.String())
	} else {
		data.WebReputation = types.StringNull()
	}
	if value := res.Get("definition.targetVpns"); value.Exists() {
		data.TargetVpns = helpers.GetStringList(value.Array())
	} else {
		data.TargetVpns = types.ListNull(types.StringType)
	}
	if value := res.Get("definition.urlWhiteList.ref"); value.Exists() {
		data.UrlWhiteListId = types.StringValue(value.String())
	} else {
		data.UrlWhiteListId = types.StringNull()
	}
	if value := res.Get("definition.urlBlackList.ref"); value.Exists() {
		data.UrlBlackListId = types.StringValue(value.String())
	} else {
		data.UrlBlackListId = types.StringNull()
	}
	if value := res.Get("definition.blockPageAction"); value.Exists() {
		data.BlockPageAction = types.StringValue(value.String())
	} else {
		data.BlockPageAction = types.StringNull()
	}
	if value := res.Get("definition.blockPageContents"); value.Exists() {
		data.BlockPageContents = types.StringValue(value.String())
	} else {
		data.BlockPageContents = types.StringNull()
	}
}

func (data *URLFilteringPolicyDefinition) hasChanges(ctx context.Context, state *URLFilteringPolicyDefinition) bool {
	hasChanges := false
	if !data.Name.Equal(state.Name) {
		hasChanges = true
	}
	if !data.Description.Equal(state.Description) {
		hasChanges = true
	}
	if !data.Mode.Equal(state.Mode) {
		hasChanges = true
	}
	if !data.Alerts.Equal(state.Alerts) {
		hasChanges = true
	}
	if !data.WebCategories.Equal(state.WebCategories) {
		hasChanges = true
	}
	if !data.WebCategoriesAction.Equal(state.WebCategoriesAction) {
		hasChanges = true
	}
	if !data.WebReputation.Equal(state.WebReputation) {
		hasChanges = true
	}
	if !data.TargetVpns.Equal(state.TargetVpns) {
		hasChanges = true
	}
	if !data.UrlWhiteListId.Equal(state.UrlWhiteListId) {
		hasChanges = true
	}
	if !data.UrlBlackListId.Equal(state.UrlBlackListId) {
		hasChanges = true
	}
	if !data.BlockPageAction.Equal(state.BlockPageAction) {
		hasChanges = true
	}
	if !data.BlockPageContents.Equal(state.BlockPageContents) {
		hasChanges = true
	}
	return hasChanges
}
