---
name: Transport Management VPN Interface Ethernet
rest_endpoint: /v1/feature-profile/sdwan/transport/%v/management/vpn/%s/interface/ethernet
minimum_version: 20.12.0
test_tags: [SDWAN_2012]
attributes:
  - tf_name: feature_profile_id
    reference: true
    type: String
    description: Feature Profile ID
    example: f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac
    test_value: sdwan_system_feature_profile.test.id
  - tf_name: profile_parcel_id
    reference: true
    type: String
    description: Profile Profile ID
    example: 140331f6-5418-4755-a059-13c77eb96037
    test_value: sdwan_transport_management_vpn_profile_parcel.test.id
  - model_name: shutdown
    example: true
  - model_name: interfaceName 
    example: GigabitEthernet1
  - model_name: description
    tf_name: basic_configuration_description
    example: Transport Management VPN Interface Ethernet
  - model_name: dynamicDhcpDistance
    tf_name: ipv4_settings_dynamic_dhcp_distance
    data_path: [intfIpAddress, dynamic]
    example: 1
  - model_name: ipAddress
    tf_name: ipv4_settings_ip_address
    data_path: [intfIpAddress, static, staticIpV4AddressPrimary]
    example: 1.2.3.4
  - model_name: subnetMask
    tf_name: ipv4_settings_subnet_mask
    data_path: [intfIpAddress, static, staticIpV4AddressPrimary]
    example: 0.0.0.0
  - model_name: staticIpV4AddressSecondary
    tf_name: ipv4_settings_secondary_ip_addresses
    data_path: [intfIpAddress, static]
    attributes:
    - model_name: ipAddress
      example: 1.2.3.4
    - model_name: subnetMask
      example: 0.0.0.0
  - model_name: dhcpHelper
    tf_name: ipv4_settings_dhcp_helper
    example: 1.2.3.4
  - model_name: iperfServer
    tf_name: ipv4_settings_iperf_server
    example: example 
  - model_name: autoDetectBandwidth
    tf_name: ipv4_settings_auto_detect_bandwidth
    example: false
  - model_name: dhcpClient
    tf_name: enable_dhcpv6
    data_path: [intfIpV6Address, dynamic]
    type: Bool
    example: true
  - model_name: address
    tf_name: ipv6_settings_static_ip_address
    data_path: [intfIpV6Address, static, primaryIpV6Address]
    example: 2001:0:0:1::/64
  - model_name: arp
    attributes:
    - model_name: ipAddress
      example: 1.2.3.4
    - model_name: macAddress
      example: "00-B0-D0-63-C2-26"
  - model_name: duplex
    data_path: [advanced]
    example: full
  - model_name: macAddress
    data_path: [advanced]
    example: "00-B0-D0-63-C2-26"
  - model_name: ipMtu
    data_path: [advanced]
    example: 1500
  - model_name: intrfMtu
    tf_name: interface_mtu
    data_path: [advanced]
    example: 1500
  - model_name: tcpMss
    data_path: [advanced]
    example: 505
  - model_name: speed
    data_path: [advanced]
    example: 2500
  - model_name: arpTimeout
    data_path: [advanced]
    example: 1200
  - model_name: autonegotiate
    data_path: [advanced]
    example: false
  - model_name: mediaType
    data_path: [advanced]
    example: rj45  
  - model_name: loadInterval
    data_path: [advanced]
    example: 30
  - model_name: icmpRedirectDisable
    data_path: [advanced]
    example: true
  - model_name: ipDirectedBroadcast
    data_path: [advanced]
    example: false 

test_prerequisites: |
  resource "sdwan_system_feature_profile" "test" {
    name = "TF_TEST"
    description = "Terraform test"
  }

  resource "sdwan_transport_management_vpn_profile_parcel" "test" {
    name                            = "TF_TEST"
    description                     = "Terraform test"
    feature_profile_id              = sdwan_system_feature_profile.test.id
    basic_configuration_description = "example"
    primary_dns_address_ipv4        = "1.2.3.4"
    secondary_dns_address_ipv4      = "2.3.4.5"
    primary_dns_address_ipv6        = "2001:0:0:1::0"
    secondary_dns_address_ipv6      = "2001:0:0:2::0"
    host_mappings = [
      {
        host_name            = "example"
        list_of_ip_addresses = ["1.2.3.4"]
      }
    ]
    ipv4_static_routes = [
      {
        network_address = "1.2.3.4"
        subnet_mask     = "0.0.0.0"
        gateway         = "nextHop"
        ipv4_route_gateway_next_ho = [
          {
            address                 = "1.2.3.4"
            administrative_distance = 1
          }
        ]
        administrative_distance = 1
      }
    ]
    ipv6_static_routes = [
      {
        prefix = "2002::/16"
        next_hops = [
          {
            address                 = "2001:0:0:1::/64"
            administrative_distance = 1
          }
        ]
      }
    ]
  }